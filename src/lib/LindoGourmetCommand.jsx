import React from "react" ;
import ReactDOM from "react-dom/client" ;
import {Link} from "react-router-dom" ;
import Axios from "axios" ;
import draftToHtml from "draftjs-to-html" ;
import {Editor} from "react-draft-wysiwyg" ;
import {EditorState,ContentState,convertFromHTML,convertToRaw} from "draft-js" ;
import {getPrefix,setPrefix,getSession,getSessionErrorMessage,setSession,clearSession,validSession,getSessionToken,getSessionUserEntityId,administratorPermission,editorPermission,managerPermission,signin,signout,BandungComponent,AccountMenuComponent,ProfileComponent,SigninComponent,JoinComponent} from "./Bandung" ;
import "./react-draft-wysiwyg.css" ;
import "./Bandung.css" ;

//Copyright IpserLab LLC. All rights reserved. Confidential and proprietary.
//WARNING: This file is generated by Bandung. Do not modify.
///Users/ipser/Data/IpserLabStartup5/Workspace/LindoGourmetServer/src/main/java/lindogourmet/command/LindoGourmetCommandModel.xml

class AnnouncementEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			announcementEntity:{},
			announcementEntityList:[],
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (announcementEntityId)
	{
		if (!announcementEntityId) announcementEntityId = this.state.announcementEntity.announcementEntityId ;
		Axios.get(getPrefix()+"/app/announcement/view?sessionToken="+getSessionToken()+"&announcementEntityId="+announcementEntityId,null)
			.then(response=>{this.setState({command:"View",announcementEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/announcement/textlongdescription?sessionToken="+getSessionToken()+"&announcementEntityId="+announcementEntityId,null)
			.then(response=>{this.setState({longDescription:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/announcement/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",announcementEntityList:response.data,announcementEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/announcement/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",announcementEntityList:response.data,announcementEntity:{}});}) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.announcementEntity.announcementEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{true&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeAnnouncementView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeAnnouncementCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeAnnouncementUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeAnnouncementUpdateLongDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateLongDescription</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeAnnouncementDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.command("Send");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Send</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>} {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderAnnouncementView() ;
		else if (this.state.command==="Create")
			return this.renderAnnouncementCreate() ;
		else if (this.state.command==="Update")
			return this.renderAnnouncementUpdate() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderAnnouncementUpdateLongDescription() ;
		else if (this.state.command==="Delete")
			return this.renderAnnouncementDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.announcementEntityList?.map(announcementEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={announcementEntity.announcementEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(announcementEntity.announcementEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderAnnouncementView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>{this.state.announcementEntity.label}</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.announcementEntity.label}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>sendDate</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.announcementEntity.sendDate}</div>
				</div>
				<p>{this.state.longDescription}</p>
			</div>
		) ;
	}
	renderAnnouncementCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create Announcement</div>
				<form onSubmit={(event)=>{this.executeAnnouncementCreate(event);}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='AnnouncementEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter label...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>sendDate</label>
					<input type='text' id='AnnouncementEntitySendDate' name='sendDate' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter sendDate...'/>
				</div>
				<div className="editor_field fields"><Editor id="AnnouncementEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeAnnouncementCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('label',document.getElementById("AnnouncementEntityLabel").value) ;
		form.append('sendDate',document.getElementById("AnnouncementEntitySendDate").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/announcement/create",form).then(response=>{this.zoomin(response.data.announcementEntityId)}) ;
	}
	renderAnnouncementUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeAnnouncementUpdate(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='AnnouncementEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.announcementEntity.label}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>sendDate</label>
					<input type='text' id='AnnouncementEntitySendDate' name='sendDate' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.announcementEntity.sendDate}/>
				</div>
				<div className="editor_field fields"><Editor id="AnnouncementEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeAnnouncementUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('announcementEntityId',this.state.announcementEntity.announcementEntityId) ;
		form.append('label',document.getElementById("AnnouncementEntityLabel").value) ;
		form.append('sendDate',document.getElementById("AnnouncementEntitySendDate").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/announcement/update",form).then(response=>{this.zoomin(response.data.announcementEntityId)}) ;
		Axios.post(getPrefix()+"/app/announcement/updatelongdescription",form) ;
	}
	renderAnnouncementUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeAnnouncementUpdateLongDescription(event)}}>
				<div className="editor_field fields"><Editor id="AnnouncementEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeAnnouncementUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('announcementEntityId',this.state.announcementEntity.announcementEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/announcement/updatelongdescription/",form).then(response=>{this.zoomin(response.data.announcementEntityId)}) ;
	}
	renderAnnouncementDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Announcement?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeAnnouncementDelete (event)
	{
		Axios.get(getPrefix()+"/app/announcement/delete?sessionToken="+getSession().sessionToken+"&announcementEntityId="+this.state.announcementEntity.announcementEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	renderAnnouncementSend ()
	{
	}
	executeAnnouncementSend (event)
	{
		Axios.get(getPrefix()+"/app/announcement/send?sessionToken="+getSession().sessionToken,null) ;
	}
}

class CategoryEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			categoryEntity:{},
			categoryEntityList:[],
			sessionCategoryUserEntity:{},
			shortDescription:null,
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (categoryEntityId)
	{
		if (!categoryEntityId) categoryEntityId = this.state.categoryEntity.categoryEntityId ;
		Axios.get(getPrefix()+"/app/category/view?sessionToken="+getSessionToken()+"&categoryEntityId="+categoryEntityId,null)
			.then(response=>{this.setState({command:"View",categoryEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/categoryuser/view?sessionToken="+getSessionToken()+"&categoryEntityId="+categoryEntityId+"&userEntityId="+getSessionUserEntityId(),null)
			.then(response=>{this.setState({CategoryUserEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/category/textshortdescription?sessionToken="+getSessionToken()+"&categoryEntityId="+categoryEntityId,null)
			.then(response=>{this.setState({shortDescription:response.data});}) ;
		Axios.get(getPrefix()+"/app/category/textlongdescription?sessionToken="+getSessionToken()+"&categoryEntityId="+categoryEntityId,null)
			.then(response=>{this.setState({longDescription:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/category/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",categoryEntityList:response.data,categoryEntity:{},sessionCategoryUserEntity:{}});}) ;
		else if (commandList==="ListByParent")
			Axios.get(getPrefix()+"/app/category/listbyparent?sessionToken="+getSessionToken()+"&page="+this.page+"&parentCategoryEntityId="+props.parentCategoryEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByParent",categoryEntityList:response.data,categoryEntity:{},sessionCategoryUserEntity:{}});}) ;
		else if (commandList==="ListUnapproved")
			Axios.get(getPrefix()+"/app/category/listunapproved?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"ListUnapproved",categoryEntityList:response.data,categoryEntity:{},sessionCategoryUserEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/category/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",categoryEntityList:response.data,categoryEntity:{},sessionCategoryUserEntity:{}});}) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.categoryEntity.categoryEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{true&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{true&&<li><button onClick={()=>{this.zoomout("ListByParent");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByParent</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout("ListUnapproved");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListUnapproved</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCategoryView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCategoryCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCategoryUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCategoryUpdateShortDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateShortDescription</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCategoryUpdateLongDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateLongDescription</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCategoryUpdateImage();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateImage</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCategoryUploadImage();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadImage</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCategoryDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
												{(this.adminPermission())&&!this.state.categoryEntity.approveDate&&<li><button onClick={()=>{this.executeCategoryApprove();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Approve</span></button></li>}
												{(this.adminPermission())&&this.state.categoryEntity.approveDate&&<li><button onClick={()=>{this.executeCategoryUnapprove();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Unapprove</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>} {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListUnapproved")}}>ListUnapproved</button>} {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderCategoryView() ;
		else if (this.state.command==="Create")
			return this.renderCategoryCreate() ;
		else if (this.state.command==="Update")
			return this.renderCategoryUpdate() ;
		else if (this.state.command==="UpdateShortDescription")
			return this.renderCategoryUpdateShortDescription() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderCategoryUpdateLongDescription() ;
		else if (this.state.command==="UpdateImage")
			return this.renderCategoryUpdateImage() ;
		else if (this.state.command==="UploadImage")
			return this.renderCategoryUploadImage() ;
		else if (this.state.command==="Delete")
			return this.renderCategoryDelete() ;
		else if (this.state.command==="Approve")
			return this.renderCategoryApprove() ;
		else if (this.state.command==="Unapprove")
			return this.renderCategoryUnapprove() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.categoryEntityList?.map(categoryEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={categoryEntity.categoryEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div onClick={()=>{this.zoomin(categoryEntity.categoryEntityId);}} className='list-item-image sm:w-[120px] sm:h-[120px] flex items-center justify-center'>
										<img src={getPrefix()+"/app/category/imageimage?categoryEntityId=${categoryEntity.categoryEntityId}"} alt={categoryEntity.label}/>									</div>
									<div className='list-item-body flex flex-col space-y-2'>
										<span onClick={()=>{this.zoomin(categoryEntity.categoryEntityId);}}>{categoryEntity.label}</span>
									</div>
									<div onClick={()=>{this.zoomin(categoryEntity.categoryEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderCategoryView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>{this.state.categoryEntity.label}</div>
				<img className="image" alt='{categoryEntity.label}' src={getPrefix()+`/app/category/imageimage?categoryEntityId=${this.state.categoryEntity.categoryEntityId}`}/>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.categoryEntity.label}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Owner</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.categoryEntity.userEntityId}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Approve Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.categoryEntity.approveDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Reject Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.categoryEntity.rejectDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Rating Total</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.categoryEntity.ratingTotal}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Ratiing Count</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.categoryEntity.ratingCount}</div>
				</div>
				<p>{this.state.shortDescription}</p>
				<p>{this.state.longDescription}</p>
			</div>
		) ;
	}
	renderCategoryCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create Category</div>
				<form onSubmit={(event)=>{this.executeCategoryCreate(event);}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='CategoryEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter label...'/>
				</div>
				<textarea id="CategoryEntityShortDescription" name="shortDescription" className="text_area fields" placeholder="Enter shortDescription..." rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="CategoryEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCategoryCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('label',document.getElementById("CategoryEntityLabel").value) ;
		form.append('shortDescription',document.getElementById("CategoryEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/category/create",form).then(response=>{this.zoomin(response.data.categoryEntityId)}) ;
	}
	renderCategoryUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCategoryUpdate(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='CategoryEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.categoryEntity.label}/>
				</div>
				<textarea id="CategoryEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="CategoryEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCategoryUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('categoryEntityId',this.state.categoryEntity.categoryEntityId) ;
		form.append('label',document.getElementById("CategoryEntityLabel").value) ;
		form.append('shortDescription',document.getElementById("CategoryEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/category/update",form).then(response=>{this.zoomin(response.data.categoryEntityId)}) ;
		Axios.post(getPrefix()+"/app/category/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/category/updatelongdescription",form) ;
	}
	renderCategoryUpdateShortDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCategoryUpdateShortDescription(event)}}>
				<textarea id="CategoryEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCategoryUpdateShortDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('categoryEntityId',this.state.categoryEntity.categoryEntityId) ;
		form.append('shortDescription',document.getElementById("CategoryEntityShortDescription").value) ;
		Axios.post(getPrefix()+"/app/category/updateshortdescription/",form).then(response=>{this.zoomin(response.data.categoryEntityId)}) ;
	}
	renderCategoryUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCategoryUpdateLongDescription(event)}}>
				<div className="editor_field fields"><Editor id="CategoryEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCategoryUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('categoryEntityId',this.state.categoryEntity.categoryEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/category/updatelongdescription/",form).then(response=>{this.zoomin(response.data.categoryEntityId)}) ;
	}
	renderCategoryUpdateImage ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCategoryUpdateImage(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Label</label>
					<input type='text' id='CategoryEntityImageLabel' name='imageLabel' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.categoryEntity.imageLabel}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Name</label>
					<input type='text' id='CategoryEntityImageName' name='imageName' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.categoryEntity.imageName}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Type</label>
					<input type='text' id='CategoryEntityImageType' name='imageType' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.categoryEntity.imageType}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Url</label>
					<input type='text' id='CategoryEntityImageUrl' name='imageUrl' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.categoryEntity.imageUrl}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Credit</label>
					<input type='text' id='CategoryEntityImageCredit' name='imageCredit' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.categoryEntity.imageCredit}/>
				</div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCategoryUpdateImage (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('categoryEntityId',this.state.categoryEntity.categoryEntityId) ;
		form.append('label',document.getElementById("CategoryEntityLabel").value) ;
		form.append('shortDescription',document.getElementById("CategoryEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/category/update",form).then(response=>{this.zoomin(response.data.categoryEntityId)}) ;
		Axios.post(getPrefix()+"/app/category/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/category/updatelongdescription",form) ;
	}
	renderCategoryUploadImage ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeCategoryUploadImage(event)}}>
			<input type="file" accept="image/*" id="myFile" name="image" onChange={(event)=>{this.executeCategoryUploadImage(event)}}/>
			<input className="upload_image_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeCategoryUploadImage (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('categoryEntityId',this.state.categoryEntity.categoryEntityId) ;
		Axios.post(getPrefix()+"/app/category/uploadimage",form)
			.then(response=>{this.zoomin(this.state.categoryEntity.categoryEntityId)}) ;
	}
	renderCategoryDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Category?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeCategoryDelete (event)
	{
		Axios.get(getPrefix()+"/app/category/delete?sessionToken="+getSession().sessionToken+"&categoryEntityId="+this.state.categoryEntity.categoryEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	executeCategoryApprove (event)
	{
		Axios.get(getPrefix()+"/app/category/approve?sessionToken="+getSession().sessionToken+"&categoryEntityId="+this.state.categoryEntity.categoryEntityId,null)
			.then(response=>{this.zoomin(this.state.categoryEntity.categoryEntityId)}) ;
	}
	executeCategoryUnapprove (event)
	{
		Axios.get(getPrefix()+"/app/category/unapprove?sessionToken="+getSession().sessionToken+"&categoryEntityId="+this.state.categoryEntity.categoryEntityId,null)
			.then(response=>{this.zoomin(this.state.categoryEntity.categoryEntityId)}) ;
	}
}

class CategoryUserEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			categoryUserEntity:{},
			categoryUserEntityList:[],
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (categoryUserEntityId)
	{
		if (!categoryUserEntityId) categoryUserEntityId = this.state.categoryUserEntity.categoryUserEntityId ;
		Axios.get(getPrefix()+"/app/categoryuser/view?sessionToken="+getSessionToken()+"&categoryUserEntityId="+categoryUserEntityId,null)
			.then(response=>{this.setState({command:"View",categoryUserEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/categoryuser/textlongdescription?sessionToken="+getSessionToken()+"&categoryUserEntityId="+categoryUserEntityId,null)
			.then(response=>{this.setState({longDescription:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/categoryuser/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",categoryUserEntityList:response.data,categoryUserEntity:{}});}) ;
		else if (commandList==="ListByCategory")
			Axios.get(getPrefix()+"/app/categoryuser/listbycategory?sessionToken="+getSessionToken()+"&page="+this.page+"&categoryEntityId="+props.categoryEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByCategory",categoryUserEntityList:response.data,categoryUserEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/categoryuser/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",categoryUserEntityList:response.data,categoryUserEntity:{}});}) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.categoryUserEntity.categoryUserEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{true&&<li><button onClick={()=>{this.zoomout("ListByCategory");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByCategory</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCategoryUserView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCategoryUserCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCategoryUserUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCategoryUserUpdateLongDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateLongDescription</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCategoryUserDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
												{true&&!this.state.categoryUserEntity.subscribeDate&&<li><button onClick={()=>{this.executeCategoryUserSubscribe();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Subscribe</span></button></li>}
												{true&&this.state.categoryUserEntity.subscribeDate&&<li><button onClick={()=>{this.executeCategoryUserUnsubscribe();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Unsubscribe</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeCategoryUserRate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Rate</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeCategoryUserComment();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Comment</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>} {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderCategoryUserView() ;
		else if (this.state.command==="Create")
			return this.renderCategoryUserCreate() ;
		else if (this.state.command==="Update")
			return this.renderCategoryUserUpdate() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderCategoryUserUpdateLongDescription() ;
		else if (this.state.command==="Delete")
			return this.renderCategoryUserDelete() ;
		else if (this.state.command==="Subscribe")
			return this.renderCategoryUserSubscribe() ;
		else if (this.state.command==="Unsubscribe")
			return this.renderCategoryUserUnsubscribe() ;
		else if (this.state.command==="Rate")
			return this.renderCategoryUserRate() ;
		else if (this.state.command==="Comment")
			return this.renderCategoryUserComment() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.categoryUserEntityList?.map(categoryUserEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={categoryUserEntity.categoryUserEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(categoryUserEntity.categoryUserEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderCategoryUserView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>View CategoryUser</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Subscriber</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.categoryUserEntity.subscriber}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Rating</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.categoryUserEntity.rating}</div>
				</div>
				<p>{this.state.longDescription}</p>
			</div>
		) ;
	}
	renderCategoryUserCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create CategoryUser</div>
				<form onSubmit={(event)=>{this.executeCategoryUserCreate(event);}}>
				<div className="editor_field fields"><Editor id="CategoryUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCategoryUserCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/categoryuser/create",form).then(response=>{this.zoomin(response.data.categoryUserEntityId)}) ;
	}
	renderCategoryUserUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCategoryUserUpdate(event)}}>
				<div className="editor_field fields"><Editor id="CategoryUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCategoryUserUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('categoryUserEntityId',this.state.categoryUserEntity.categoryUserEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/categoryuser/update",form).then(response=>{this.zoomin(response.data.categoryUserEntityId)}) ;
		Axios.post(getPrefix()+"/app/categoryuser/updatelongdescription",form) ;
	}
	renderCategoryUserUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCategoryUserUpdateLongDescription(event)}}>
				<div className="editor_field fields"><Editor id="CategoryUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCategoryUserUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('categoryUserEntityId',this.state.categoryUserEntity.categoryUserEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/categoryuser/updatelongdescription/",form).then(response=>{this.zoomin(response.data.categoryUserEntityId)}) ;
	}
	renderCategoryUserDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this CategoryUser?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeCategoryUserDelete (event)
	{
		Axios.get(getPrefix()+"/app/categoryuser/delete?sessionToken="+getSession().sessionToken+"&categoryUserEntityId="+this.state.categoryUserEntity.categoryUserEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	executeCategoryUserSubscribe (event)
	{
		Axios.get(getPrefix()+"/app/categoryuser/subscribe?sessionToken="+getSession().sessionToken+"&categoryUserEntityId="+this.state.categoryUserEntity.categoryUserEntityId,null)
			.then(response=>{this.zoomin(this.state.categoryUserEntity.categoryUserEntityId)}) ;
	}
	executeCategoryUserUnsubscribe (event)
	{
		Axios.get(getPrefix()+"/app/categoryuser/unsubscribe?sessionToken="+getSession().sessionToken+"&categoryUserEntityId="+this.state.categoryUserEntity.categoryUserEntityId,null)
			.then(response=>{this.zoomin(this.state.categoryUserEntity.categoryUserEntityId)}) ;
	}
	renderCategoryUserRate ()
	{
		//Rate
	}
	executeCategoryUserRate (event)
	{
		Axios.get(getPrefix()+"/app/categoryuser/rate?sessionToken="+getSession().sessionToken+"&categoryUserEntityId="+this.state.categoryUserEntity.categoryUserEntityId,null)
			.then(response=>{this.zoomin(this.state.categoryUserEntity.categoryUserEntityId)}) ;
	}
	renderCategoryUserComment ()
	{
		//Comment
	}
	executeCategoryUserComment (event)
	{
		Axios.get(getPrefix()+"/app/categoryuser/comment?sessionToken="+getSession().sessionToken+"&categoryUserEntityId="+this.state.categoryUserEntity.categoryUserEntityId,null)
			.then(response=>{this.zoomin(this.state.categoryUserEntity.categoryUserEntityId)}) ;
	}
}

class ContactEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			contactEntity:{},
			contactEntityList:[],
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (contactEntityId)
	{
		if (!contactEntityId) contactEntityId = this.state.contactEntity.contactEntityId ;
		Axios.get(getPrefix()+"/app/contact/view?sessionToken="+getSessionToken()+"&contactEntityId="+contactEntityId,null)
			.then(response=>{this.setState({command:"View",contactEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/contact/textlongdescription?sessionToken="+getSessionToken()+"&contactEntityId="+contactEntityId,null)
			.then(response=>{this.setState({longDescription:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/contact/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",contactEntityList:response.data,contactEntity:{}});}) ;
		else if (commandList==="ListByUser")
			Axios.get(getPrefix()+"/app/contact/listbyuser?sessionToken="+getSessionToken()+"&page="+this.page+"&userEntityId="+props.userEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByUser",contactEntityList:response.data,contactEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/contact/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",contactEntityList:response.data,contactEntity:{}});}) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.contactEntity.contactEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout("ListByUser");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByUser</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeContactView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeContactCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeContactUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeContactUpdateLongDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateLongDescription</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeContactDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>} {<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderContactView() ;
		else if (this.state.command==="Create")
			return this.renderContactCreate() ;
		else if (this.state.command==="Update")
			return this.renderContactUpdate() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderContactUpdateLongDescription() ;
		else if (this.state.command==="Delete")
			return this.renderContactDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.contactEntityList?.map(contactEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={contactEntity.contactEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(contactEntity.contactEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderContactView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>View Contact</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>firstName</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.contactEntity.firstName}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>lastName</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.contactEntity.lastName}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>email</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.contactEntity.email}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>phone</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.contactEntity.phone}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>request</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.contactEntity.request}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>status</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.contactEntity.status}</div>
				</div>
				<p>{this.state.longDescription}</p>
			</div>
		) ;
	}
	renderContactCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create Contact</div>
				<form onSubmit={(event)=>{this.executeContactCreate(event);}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>firstName</label>
					<input type='text' id='ContactEntityFirstName' name='firstName' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter firstName...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>lastName</label>
					<input type='text' id='ContactEntityLastName' name='lastName' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter lastName...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>email</label>
					<input type='text' id='ContactEntityEmail' name='email' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter email...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>phone</label>
					<input type='text' id='ContactEntityPhone' name='phone' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter phone...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>request</label>
					<input type='text' id='ContactEntityRequest' name='request' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter request...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>status</label>
					<input type='text' id='ContactEntityStatus' name='status' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter status...'/>
				</div>
				<div className="editor_field fields"><Editor id="ContactEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeContactCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('firstName',document.getElementById("ContactEntityFirstName").value) ;
		form.append('lastName',document.getElementById("ContactEntityLastName").value) ;
		form.append('email',document.getElementById("ContactEntityEmail").value) ;
		form.append('phone',document.getElementById("ContactEntityPhone").value) ;
		form.append('request',document.getElementById("ContactEntityRequest").value) ;
		form.append('status',document.getElementById("ContactEntityStatus").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/contact/create",form).then(response=>{this.zoomin(response.data.contactEntityId)}) ;
	}
	renderContactUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeContactUpdate(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>firstName</label>
					<input type='text' id='ContactEntityFirstName' name='firstName' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.contactEntity.firstName}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>lastName</label>
					<input type='text' id='ContactEntityLastName' name='lastName' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.contactEntity.lastName}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>email</label>
					<input type='text' id='ContactEntityEmail' name='email' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.contactEntity.email}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>phone</label>
					<input type='text' id='ContactEntityPhone' name='phone' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.contactEntity.phone}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>request</label>
					<input type='text' id='ContactEntityRequest' name='request' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.contactEntity.request}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>status</label>
					<input type='text' id='ContactEntityStatus' name='status' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.contactEntity.status}/>
				</div>
				<div className="editor_field fields"><Editor id="ContactEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeContactUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('contactEntityId',this.state.contactEntity.contactEntityId) ;
		form.append('firstName',document.getElementById("ContactEntityFirstName").value) ;
		form.append('lastName',document.getElementById("ContactEntityLastName").value) ;
		form.append('email',document.getElementById("ContactEntityEmail").value) ;
		form.append('phone',document.getElementById("ContactEntityPhone").value) ;
		form.append('request',document.getElementById("ContactEntityRequest").value) ;
		form.append('status',document.getElementById("ContactEntityStatus").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/contact/update",form).then(response=>{this.zoomin(response.data.contactEntityId)}) ;
		Axios.post(getPrefix()+"/app/contact/updatelongdescription",form) ;
	}
	renderContactUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeContactUpdateLongDescription(event)}}>
				<div className="editor_field fields"><Editor id="ContactEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeContactUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('contactEntityId',this.state.contactEntity.contactEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/contact/updatelongdescription/",form).then(response=>{this.zoomin(response.data.contactEntityId)}) ;
	}
	renderContactDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Contact?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeContactDelete (event)
	{
		Axios.get(getPrefix()+"/app/contact/delete?sessionToken="+getSession().sessionToken+"&contactEntityId="+this.state.contactEntity.contactEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class CompanyEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			companyEntity:{},
			companyEntityList:[],
			sessionCompanyUserEntity:{},
			shortDescription:null,
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (companyEntityId)
	{
		if (!companyEntityId) companyEntityId = this.state.companyEntity.companyEntityId ;
		Axios.get(getPrefix()+"/app/company/view?sessionToken="+getSessionToken()+"&companyEntityId="+companyEntityId,null)
			.then(response=>{this.setState({command:"View",companyEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/companyuser/view?sessionToken="+getSessionToken()+"&companyEntityId="+companyEntityId+"&userEntityId="+getSessionUserEntityId(),null)
			.then(response=>{this.setState({CompanyUserEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/company/textshortdescription?sessionToken="+getSessionToken()+"&companyEntityId="+companyEntityId,null)
			.then(response=>{this.setState({shortDescription:response.data});}) ;
		Axios.get(getPrefix()+"/app/company/textlongdescription?sessionToken="+getSessionToken()+"&companyEntityId="+companyEntityId,null)
			.then(response=>{this.setState({longDescription:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/company/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",companyEntityList:response.data,companyEntity:{},sessionCompanyUserEntity:{}});}) ;
		else if (commandList==="List")
			Axios.get(getPrefix()+"/app/company/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",companyEntityList:response.data,companyEntity:{},sessionCompanyUserEntity:{}});}) ;
		else if (commandList==="ListUnapproved")
			Axios.get(getPrefix()+"/app/company/listunapproved?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"ListUnapproved",companyEntityList:response.data,companyEntity:{},sessionCompanyUserEntity:{}});}) ;
		else if (commandList==="ListByUser")
			Axios.get(getPrefix()+"/app/company/listbyuser?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByUser",companyEntityList:response.data,companyEntity:{},sessionCompanyUserEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/company/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",companyEntityList:response.data,companyEntity:{},sessionCompanyUserEntity:{}});}) ;
	}
	editorPermission ()
	{
		return (false) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.companyEntity.companyEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.editorPermission())&&<li><button onClick={()=>{this.zoomout("List");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.zoomout("ListUnapproved");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListUnapproved</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.zoomout("ListByUser");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByUser</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeCompanyView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCompanyCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCompanyUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCompanyUpdateShortDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateShortDescription</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCompanyUpdateLongDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateLongDescription</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCompanyUpdateImage();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateImage</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCompanyUploadImage();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadImage</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCompanyDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
												{(this.adminPermission())&&!this.state.companyEntity.approveDate&&<li><button onClick={()=>{this.executeCompanyApprove();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Approve</span></button></li>}
												{(this.adminPermission())&&this.state.companyEntity.approveDate&&<li><button onClick={()=>{this.executeCompanyUnapprove();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Unapprove</span></button></li>}
												{(this.adminPermission())&&!this.state.companyEntity.rejectDate&&<li><button onClick={()=>{this.executeCompanyReject();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Reject</span></button></li>}
												{(this.adminPermission())&&this.state.companyEntity.rejectDate&&<li><button onClick={()=>{this.executeCompanyUnreject();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Unreject</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("List")}}>List</button>} {(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListUnapproved")}}>ListUnapproved</button>} {(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListByUser")}}>ListByUser</button>} {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderCompanyView() ;
		else if (this.state.command==="Create")
			return this.renderCompanyCreate() ;
		else if (this.state.command==="Update")
			return this.renderCompanyUpdate() ;
		else if (this.state.command==="UpdateShortDescription")
			return this.renderCompanyUpdateShortDescription() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderCompanyUpdateLongDescription() ;
		else if (this.state.command==="UpdateImage")
			return this.renderCompanyUpdateImage() ;
		else if (this.state.command==="UploadImage")
			return this.renderCompanyUploadImage() ;
		else if (this.state.command==="Delete")
			return this.renderCompanyDelete() ;
		else if (this.state.command==="Approve")
			return this.renderCompanyApprove() ;
		else if (this.state.command==="Unapprove")
			return this.renderCompanyUnapprove() ;
		else if (this.state.command==="Reject")
			return this.renderCompanyReject() ;
		else if (this.state.command==="Unreject")
			return this.renderCompanyUnreject() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.companyEntityList?.map(companyEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={companyEntity.companyEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div onClick={()=>{this.zoomin(companyEntity.companyEntityId);}} className='list-item-image sm:w-[120px] sm:h-[120px] flex items-center justify-center'>
										<img src={getPrefix()+"/app/company/imageimage?companyEntityId=${companyEntity.companyEntityId}"} alt={companyEntity.label}/>									</div>
									<div className='list-item-body flex flex-col space-y-2'>
										<span onClick={()=>{this.zoomin(companyEntity.companyEntityId);}}>{companyEntity.label}</span>
									</div>
									<div onClick={()=>{this.zoomin(companyEntity.companyEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderCompanyView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>{this.state.companyEntity.label}</div>
				<img className="image" alt='{companyEntity.label}' src={getPrefix()+`/app/company/imageimage?companyEntityId=${this.state.companyEntity.companyEntityId}`}/>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyEntity.label}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>url</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyEntity.url}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>phone</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyEntity.phone}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Owner</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyEntity.userEntityId}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Address</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyEntity.address1}</div>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyEntity.address2}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>City</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyEntity.city}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>State</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyEntity.state}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Postal</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyEntity.postal}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Approve Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyEntity.approveDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Reject Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyEntity.rejectDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Rating Total</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyEntity.ratingTotal}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Ratiing Count</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyEntity.ratingCount}</div>
				</div>
				<p>{this.state.shortDescription}</p>
				<p>{this.state.longDescription}</p>
			</div>
		) ;
	}
	renderCompanyCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create Company</div>
				<form onSubmit={(event)=>{this.executeCompanyCreate(event);}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='CompanyEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter label...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>url</label>
					<input type='text' id='CompanyEntityUrl' name='url' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter url...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>phone</label>
					<input type='text' id='CompanyEntityPhone' name='phone' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter phone...'/>
				</div>
				<textarea id="CompanyEntityShortDescription" name="shortDescription" className="text_area fields" placeholder="Enter shortDescription..." rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="CompanyEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCompanyCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('label',document.getElementById("CompanyEntityLabel").value) ;
		form.append('url',document.getElementById("CompanyEntityUrl").value) ;
		form.append('phone',document.getElementById("CompanyEntityPhone").value) ;
		form.append('shortDescription',document.getElementById("CompanyEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/company/create",form).then(response=>{this.zoomin(response.data.companyEntityId)}) ;
	}
	renderCompanyUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCompanyUpdate(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='CompanyEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.companyEntity.label}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>url</label>
					<input type='text' id='CompanyEntityUrl' name='url' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.companyEntity.url}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>phone</label>
					<input type='text' id='CompanyEntityPhone' name='phone' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.companyEntity.phone}/>
				</div>
				<textarea id="CompanyEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="CompanyEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCompanyUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('companyEntityId',this.state.companyEntity.companyEntityId) ;
		form.append('label',document.getElementById("CompanyEntityLabel").value) ;
		form.append('url',document.getElementById("CompanyEntityUrl").value) ;
		form.append('phone',document.getElementById("CompanyEntityPhone").value) ;
		form.append('shortDescription',document.getElementById("CompanyEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/company/update",form).then(response=>{this.zoomin(response.data.companyEntityId)}) ;
		Axios.post(getPrefix()+"/app/company/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/company/updatelongdescription",form) ;
	}
	renderCompanyUpdateShortDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCompanyUpdateShortDescription(event)}}>
				<textarea id="CompanyEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCompanyUpdateShortDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('companyEntityId',this.state.companyEntity.companyEntityId) ;
		form.append('shortDescription',document.getElementById("CompanyEntityShortDescription").value) ;
		Axios.post(getPrefix()+"/app/company/updateshortdescription/",form).then(response=>{this.zoomin(response.data.companyEntityId)}) ;
	}
	renderCompanyUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCompanyUpdateLongDescription(event)}}>
				<div className="editor_field fields"><Editor id="CompanyEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCompanyUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('companyEntityId',this.state.companyEntity.companyEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/company/updatelongdescription/",form).then(response=>{this.zoomin(response.data.companyEntityId)}) ;
	}
	renderCompanyUpdateImage ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCompanyUpdateImage(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Label</label>
					<input type='text' id='CompanyEntityImageLabel' name='imageLabel' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.companyEntity.imageLabel}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Name</label>
					<input type='text' id='CompanyEntityImageName' name='imageName' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.companyEntity.imageName}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Type</label>
					<input type='text' id='CompanyEntityImageType' name='imageType' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.companyEntity.imageType}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Url</label>
					<input type='text' id='CompanyEntityImageUrl' name='imageUrl' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.companyEntity.imageUrl}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Credit</label>
					<input type='text' id='CompanyEntityImageCredit' name='imageCredit' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.companyEntity.imageCredit}/>
				</div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCompanyUpdateImage (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('companyEntityId',this.state.companyEntity.companyEntityId) ;
		form.append('label',document.getElementById("CompanyEntityLabel").value) ;
		form.append('url',document.getElementById("CompanyEntityUrl").value) ;
		form.append('phone',document.getElementById("CompanyEntityPhone").value) ;
		form.append('shortDescription',document.getElementById("CompanyEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/company/update",form).then(response=>{this.zoomin(response.data.companyEntityId)}) ;
		Axios.post(getPrefix()+"/app/company/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/company/updatelongdescription",form) ;
	}
	renderCompanyUploadImage ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeCompanyUploadImage(event)}}>
			<input type="file" accept="image/*" id="myFile" name="image" onChange={(event)=>{this.executeCompanyUploadImage(event)}}/>
			<input className="upload_image_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeCompanyUploadImage (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('companyEntityId',this.state.companyEntity.companyEntityId) ;
		Axios.post(getPrefix()+"/app/company/uploadimage",form)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
	renderCompanyDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Company?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeCompanyDelete (event)
	{
		Axios.get(getPrefix()+"/app/company/delete?sessionToken="+getSession().sessionToken+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	executeCompanyApprove (event)
	{
		Axios.get(getPrefix()+"/app/company/approve?sessionToken="+getSession().sessionToken+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
	executeCompanyUnapprove (event)
	{
		Axios.get(getPrefix()+"/app/company/unapprove?sessionToken="+getSession().sessionToken+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
	executeCompanyReject (event)
	{
		Axios.get(getPrefix()+"/app/company/reject?sessionToken="+getSession().sessionToken+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
	executeCompanyUnreject (event)
	{
		Axios.get(getPrefix()+"/app/company/unreject?sessionToken="+getSession().sessionToken+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
}

class CompanyImageEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			companyImageEntity:{},
			companyImageEntityList:[],
			shortDescription:null,
		} ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (companyImageEntityId)
	{
		if (!companyImageEntityId) companyImageEntityId = this.state.companyImageEntity.companyImageEntityId ;
		Axios.get(getPrefix()+"/app/companyimage/view?sessionToken="+getSessionToken()+"&companyImageEntityId="+companyImageEntityId,null)
			.then(response=>{this.setState({command:"View",companyImageEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/companyimage/textshortdescription?sessionToken="+getSessionToken()+"&companyImageEntityId="+companyImageEntityId,null)
			.then(response=>{this.setState({shortDescription:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/companyimage/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",companyImageEntityList:response.data,companyImageEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/companyimage/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",companyImageEntityList:response.data,companyImageEntity:{}});}) ;
	}
	editorPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.companyImageEntity.companyImageEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.editorPermission())&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeCompanyImageView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeCompanyImageCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeCompanyImageUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeCompanyImageUpdateImage();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateImage</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeCompanyImageUploadImage();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadImage</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeCompanyImageDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>} {(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderCompanyImageView() ;
		else if (this.state.command==="Create")
			return this.renderCompanyImageCreate() ;
		else if (this.state.command==="Update")
			return this.renderCompanyImageUpdate() ;
		else if (this.state.command==="UpdateImage")
			return this.renderCompanyImageUpdateImage() ;
		else if (this.state.command==="UploadImage")
			return this.renderCompanyImageUploadImage() ;
		else if (this.state.command==="Delete")
			return this.renderCompanyImageDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.companyImageEntityList?.map(companyImageEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={companyImageEntity.companyImageEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div onClick={()=>{this.zoomin(companyImageEntity.companyImageEntityId);}} className='list-item-image sm:w-[120px] sm:h-[120px] flex items-center justify-center'>
										<img src={getPrefix()+"/app/companyimage/imageimage?companyImageEntityId=${companyImageEntity.companyImageEntityId}"} alt={companyImageEntity.label}/>									</div>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(companyImageEntity.companyImageEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderCompanyImageView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>View CompanyImage</div>
				<img className="image" alt='{companyImageEntity.label}' src={getPrefix()+`/app/companyimage/imageimage?companyImageEntityId=${this.state.companyImageEntity.companyImageEntityId}`}/>
				<p>{this.state.shortDescription}</p>
			</div>
		) ;
	}
	renderCompanyImageCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create CompanyImage</div>
				<form onSubmit={(event)=>{this.executeCompanyImageCreate(event);}}>
				<textarea id="CompanyImageEntityShortDescription" name="shortDescription" className="text_area fields" placeholder="Enter shortDescription..." rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCompanyImageCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('shortDescription',document.getElementById("CompanyImageEntityShortDescription").value) ;
		Axios.post(getPrefix()+"/app/companyimage/create",form).then(response=>{this.zoomin(response.data.companyImageEntityId)}) ;
	}
	renderCompanyImageUpdate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCompanyImageUpdate(event)}}>
				<textarea id="CompanyImageEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCompanyImageUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('companyImageEntityId',this.state.companyImageEntity.companyImageEntityId) ;
		form.append('shortDescription',document.getElementById("CompanyImageEntityShortDescription").value) ;
		Axios.post(getPrefix()+"/app/companyimage/update",form).then(response=>{this.zoomin(response.data.companyImageEntityId)}) ;
		Axios.post(getPrefix()+"/app/companyimage/updateshortdescription",form) ;
	}
	renderCompanyImageUpdateImage ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCompanyImageUpdateImage(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Label</label>
					<input type='text' id='CompanyImageEntityImageLabel' name='imageLabel' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.companyImageEntity.imageLabel}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Name</label>
					<input type='text' id='CompanyImageEntityImageName' name='imageName' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.companyImageEntity.imageName}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Type</label>
					<input type='text' id='CompanyImageEntityImageType' name='imageType' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.companyImageEntity.imageType}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Url</label>
					<input type='text' id='CompanyImageEntityImageUrl' name='imageUrl' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.companyImageEntity.imageUrl}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Credit</label>
					<input type='text' id='CompanyImageEntityImageCredit' name='imageCredit' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.companyImageEntity.imageCredit}/>
				</div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCompanyImageUpdateImage (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('companyImageEntityId',this.state.companyImageEntity.companyImageEntityId) ;
		form.append('shortDescription',document.getElementById("CompanyImageEntityShortDescription").value) ;
		Axios.post(getPrefix()+"/app/companyimage/update",form).then(response=>{this.zoomin(response.data.companyImageEntityId)}) ;
		Axios.post(getPrefix()+"/app/companyimage/updateshortdescription",form) ;
	}
	renderCompanyImageUploadImage ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeCompanyImageUploadImage(event)}}>
			<input type="file" accept="image/*" id="myFile" name="image" onChange={(event)=>{this.executeCompanyImageUploadImage(event)}}/>
			<input className="upload_image_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeCompanyImageUploadImage (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('companyImageEntityId',this.state.companyImageEntity.companyImageEntityId) ;
		Axios.post(getPrefix()+"/app/companyimage/uploadimage",form)
			.then(response=>{this.zoomin(this.state.companyImageEntity.companyImageEntityId)}) ;
	}
	renderCompanyImageDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this CompanyImage?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeCompanyImageDelete (event)
	{
		Axios.get(getPrefix()+"/app/companyimage/delete?sessionToken="+getSession().sessionToken+"&companyImageEntityId="+this.state.companyImageEntity.companyImageEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class CompanyUserEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			companyUserEntity:{},
			companyUserEntityList:[],
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (companyUserEntityId)
	{
		if (!companyUserEntityId) companyUserEntityId = this.state.companyUserEntity.companyUserEntityId ;
		Axios.get(getPrefix()+"/app/companyuser/view?sessionToken="+getSessionToken()+"&companyUserEntityId="+companyUserEntityId,null)
			.then(response=>{this.setState({command:"View",companyUserEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/companyuser/textlongdescription?sessionToken="+getSessionToken()+"&companyUserEntityId="+companyUserEntityId,null)
			.then(response=>{this.setState({longDescription:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/companyuser/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",companyUserEntityList:response.data,companyUserEntity:{}});}) ;
		else if (commandList==="ListByCompany")
			Axios.get(getPrefix()+"/app/companyuser/listbycompany?sessionToken="+getSessionToken()+"&page="+this.page+"&companyEntityId="+props.companyEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByCompany",companyUserEntityList:response.data,companyUserEntity:{}});}) ;
		else if (commandList==="ListByLongDescription")
			Axios.get(getPrefix()+"/app/companyuser/listbylongdescription?sessionToken="+getSessionToken()+"&page="+this.page+"&companyEntityId="+props.companyEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByLongDescription",companyUserEntityList:response.data,companyUserEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/companyuser/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",companyUserEntityList:response.data,companyUserEntity:{}});}) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.companyUserEntity.companyUserEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout("ListByCompany");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByCompany</span></button></li>}
												{true&&<li><button onClick={()=>{this.zoomout("ListByLongDescription");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByLongDescription</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCompanyUserView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCompanyUserCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCompanyUserUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeCompanyUserDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
												{true&&!this.state.companyUserEntity.subscribeDate&&<li><button onClick={()=>{this.executeCompanyUserSubscribe();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Subscribe</span></button></li>}
												{true&&this.state.companyUserEntity.subscribeDate&&<li><button onClick={()=>{this.executeCompanyUserUnsubscribe();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Unsubscribe</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeCompanyUserRate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Rate</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeCompanyUserComment();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Comment</span></button></li>}
												{true&&!this.state.companyUserEntity.acceptDate&&<li><button onClick={()=>{this.executeCompanyUserAccept();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Accept</span></button></li>}
												{true&&this.state.companyUserEntity.acceptDate&&<li><button onClick={()=>{this.executeCompanyUserUnaccept();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Unaccept</span></button></li>}
												{true&&!this.state.companyUserEntity.declineDate&&<li><button onClick={()=>{this.executeCompanyUserDecline();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Decline</span></button></li>}
												{true&&this.state.companyUserEntity.declineDate&&<li><button onClick={()=>{this.executeCompanyUserUndecline();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Undecline</span></button></li>}
												{(this.adminPermission())&&!this.state.companyUserEntity.approveDate&&<li><button onClick={()=>{this.executeCompanyUserApprove();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Approve</span></button></li>}
												{(this.adminPermission())&&this.state.companyUserEntity.approveDate&&<li><button onClick={()=>{this.executeCompanyUserUnapprove();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Unapprove</span></button></li>}
												{(this.adminPermission())&&!this.state.companyUserEntity.rejectDate&&<li><button onClick={()=>{this.executeCompanyUserReject();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Reject</span></button></li>}
												{(this.adminPermission())&&this.state.companyUserEntity.rejectDate&&<li><button onClick={()=>{this.executeCompanyUserUnreject();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Unreject</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeCompanyUserQuit();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Quit</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>} {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderCompanyUserView() ;
		else if (this.state.command==="Create")
			return this.renderCompanyUserCreate() ;
		else if (this.state.command==="Update")
			return this.renderCompanyUserUpdate() ;
		else if (this.state.command==="Delete")
			return this.renderCompanyUserDelete() ;
		else if (this.state.command==="Subscribe")
			return this.renderCompanyUserSubscribe() ;
		else if (this.state.command==="Unsubscribe")
			return this.renderCompanyUserUnsubscribe() ;
		else if (this.state.command==="Rate")
			return this.renderCompanyUserRate() ;
		else if (this.state.command==="Comment")
			return this.renderCompanyUserComment() ;
		else if (this.state.command==="Accept")
			return this.renderCompanyUserAccept() ;
		else if (this.state.command==="Unaccept")
			return this.renderCompanyUserUnaccept() ;
		else if (this.state.command==="Decline")
			return this.renderCompanyUserDecline() ;
		else if (this.state.command==="Undecline")
			return this.renderCompanyUserUndecline() ;
		else if (this.state.command==="Approve")
			return this.renderCompanyUserApprove() ;
		else if (this.state.command==="Unapprove")
			return this.renderCompanyUserUnapprove() ;
		else if (this.state.command==="Reject")
			return this.renderCompanyUserReject() ;
		else if (this.state.command==="Unreject")
			return this.renderCompanyUserUnreject() ;
		else if (this.state.command==="Quit")
			return this.renderCompanyUserQuit() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.companyUserEntityList?.map(companyUserEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={companyUserEntity.companyUserEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(companyUserEntity.companyUserEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderCompanyUserView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>View CompanyUser</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Subscriber</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyUserEntity.subscriber}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Approve Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyUserEntity.administrator}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Approve Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyUserEntity.manager}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Approve Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyUserEntity.editor}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Accept Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyUserEntity.acceptDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Decline Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyUserEntity.declineDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Approve Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyUserEntity.approveDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Reject Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyUserEntity.rejectDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Rating</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.companyUserEntity.rating}</div>
				</div>
				<p>{this.state.longDescription}</p>
			</div>
		) ;
	}
	renderCompanyUserCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create CompanyUser</div>
				<form onSubmit={(event)=>{this.executeCompanyUserCreate(event);}}>
				<div className="editor_field fields"><Editor id="CompanyUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCompanyUserCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/companyuser/create",form).then(response=>{this.zoomin(response.data.companyUserEntityId)}) ;
	}
	renderCompanyUserUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCompanyUserUpdate(event)}}>
				<div className="editor_field fields"><Editor id="CompanyUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeCompanyUserUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('companyUserEntityId',this.state.companyUserEntity.companyUserEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/companyuser/update",form).then(response=>{this.zoomin(response.data.companyUserEntityId)}) ;
		Axios.post(getPrefix()+"/app/companyuser/updatelongdescription",form) ;
	}
	renderCompanyUserDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this CompanyUser?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeCompanyUserDelete (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/delete?sessionToken="+getSession().sessionToken+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	executeCompanyUserSubscribe (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/subscribe?sessionToken="+getSession().sessionToken+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
	executeCompanyUserUnsubscribe (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/unsubscribe?sessionToken="+getSession().sessionToken+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
	renderCompanyUserRate ()
	{
		//Rate
	}
	executeCompanyUserRate (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/rate?sessionToken="+getSession().sessionToken+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
	renderCompanyUserComment ()
	{
		//Comment
	}
	executeCompanyUserComment (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/comment?sessionToken="+getSession().sessionToken+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
	executeCompanyUserAccept (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/accept?sessionToken="+getSession().sessionToken+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
	executeCompanyUserUnaccept (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/unaccept?sessionToken="+getSession().sessionToken+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
	executeCompanyUserDecline (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/decline?sessionToken="+getSession().sessionToken+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
	executeCompanyUserUndecline (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/undecline?sessionToken="+getSession().sessionToken+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
	executeCompanyUserApprove (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/approve?sessionToken="+getSession().sessionToken+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
	executeCompanyUserUnapprove (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/unapprove?sessionToken="+getSession().sessionToken+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
	executeCompanyUserReject (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/reject?sessionToken="+getSession().sessionToken+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
	executeCompanyUserUnreject (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/unreject?sessionToken="+getSession().sessionToken+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
	renderCompanyUserQuit ()
	{
	}
	executeCompanyUserQuit (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/quit?sessionToken="+getSession().sessionToken+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
}

class FontEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			fontEntity:{},
			fontEntityList:[],
		} ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (fontEntityId)
	{
		if (!fontEntityId) fontEntityId = this.state.fontEntity.fontEntityId ;
		Axios.get(getPrefix()+"/app/font/view?sessionToken="+getSessionToken()+"&fontEntityId="+fontEntityId,null)
			.then(response=>{this.setState({command:"View",fontEntity:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/font/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",fontEntityList:response.data,fontEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/font/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",fontEntityList:response.data,fontEntity:{}});}) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.fontEntity.fontEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{true&&<li><button onClick={()=>{this.executeFontFileEot();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>FileEot</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeFontFileSvg();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>FileSvg</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeFontFileTtf();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>FileTtf</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeFontFileWoff();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>FileWoff</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeFontFileWoff2();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>FileWoff2</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeFontCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeFontUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeFontUpdateEot();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateEot</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeFontUploadEot();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadEot</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeFontUpdateSvg();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateSvg</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeFontUploadSvg();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadSvg</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeFontUpdateTtf();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateTtf</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeFontUploadTtf();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadTtf</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeFontUpdateWoff();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateWoff</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeFontUploadWoff();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadWoff</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeFontUpdateWoff2();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateWoff2</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeFontUploadWoff2();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadWoff2</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeFontDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="FileEot")
			return this.renderFontFileEot() ;
		else if (this.state.command==="FileSvg")
			return this.renderFontFileSvg() ;
		else if (this.state.command==="FileTtf")
			return this.renderFontFileTtf() ;
		else if (this.state.command==="FileWoff")
			return this.renderFontFileWoff() ;
		else if (this.state.command==="FileWoff2")
			return this.renderFontFileWoff2() ;
		else if (this.state.command==="Create")
			return this.renderFontCreate() ;
		else if (this.state.command==="Update")
			return this.renderFontUpdate() ;
		else if (this.state.command==="UpdateEot")
			return this.renderFontUpdateEot() ;
		else if (this.state.command==="UploadEot")
			return this.renderFontUploadEot() ;
		else if (this.state.command==="UpdateSvg")
			return this.renderFontUpdateSvg() ;
		else if (this.state.command==="UploadSvg")
			return this.renderFontUploadSvg() ;
		else if (this.state.command==="UpdateTtf")
			return this.renderFontUpdateTtf() ;
		else if (this.state.command==="UploadTtf")
			return this.renderFontUploadTtf() ;
		else if (this.state.command==="UpdateWoff")
			return this.renderFontUpdateWoff() ;
		else if (this.state.command==="UploadWoff")
			return this.renderFontUploadWoff() ;
		else if (this.state.command==="UpdateWoff2")
			return this.renderFontUpdateWoff2() ;
		else if (this.state.command==="UploadWoff2")
			return this.renderFontUploadWoff2() ;
		else if (this.state.command==="Delete")
			return this.renderFontDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.fontEntityList?.map(fontEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={fontEntity.fontEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(fontEntity.fontEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderFontCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create Font</div>
				<form onSubmit={(event)=>{this.executeFontCreate(event);}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>name</label>
					<input type='text' id='FontEntityName' name='name' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter name...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='FontEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter label...'/>
				</div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeFontCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('name',document.getElementById("FontEntityName").value) ;
		form.append('label',document.getElementById("FontEntityLabel").value) ;
		Axios.post(getPrefix()+"/app/font/create",form).then(response=>{this.zoomin(response.data.fontEntityId)}) ;
	}
	renderFontUpdate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeFontUpdate(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>name</label>
					<input type='text' id='FontEntityName' name='name' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.fontEntity.name}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='FontEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.fontEntity.label}/>
				</div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeFontUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		form.append('name',document.getElementById("FontEntityName").value) ;
		form.append('label',document.getElementById("FontEntityLabel").value) ;
		Axios.post(getPrefix()+"/app/font/update",form).then(response=>{this.zoomin(response.data.fontEntityId)}) ;
	}
	renderFontUpdateEot ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeFontUpdateEot(event)}}>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeFontUpdateEot (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		form.append('name',document.getElementById("FontEntityName").value) ;
		form.append('label',document.getElementById("FontEntityLabel").value) ;
		Axios.post(getPrefix()+"/app/font/update",form).then(response=>{this.zoomin(response.data.fontEntityId)}) ;
	}
	renderFontUploadEot ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeFontUploadEot(event)}}>
			<input type="file" accept="file/*" id="myFile" name="eot" onChange={(event)=>{this.executeFontUploadEot(event)}}/>
			<input className="upload_file_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeFontUploadEot (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		Axios.post(getPrefix()+"/app/font/uploadeot",form)
			.then(response=>{this.zoomin(this.state.fontEntity.fontEntityId)}) ;
	}
	renderFontUpdateSvg ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeFontUpdateSvg(event)}}>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeFontUpdateSvg (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		form.append('name',document.getElementById("FontEntityName").value) ;
		form.append('label',document.getElementById("FontEntityLabel").value) ;
		Axios.post(getPrefix()+"/app/font/update",form).then(response=>{this.zoomin(response.data.fontEntityId)}) ;
	}
	renderFontUploadSvg ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeFontUploadSvg(event)}}>
			<input type="file" accept="file/*" id="myFile" name="svg" onChange={(event)=>{this.executeFontUploadSvg(event)}}/>
			<input className="upload_file_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeFontUploadSvg (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		Axios.post(getPrefix()+"/app/font/uploadsvg",form)
			.then(response=>{this.zoomin(this.state.fontEntity.fontEntityId)}) ;
	}
	renderFontUpdateTtf ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeFontUpdateTtf(event)}}>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeFontUpdateTtf (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		form.append('name',document.getElementById("FontEntityName").value) ;
		form.append('label',document.getElementById("FontEntityLabel").value) ;
		Axios.post(getPrefix()+"/app/font/update",form).then(response=>{this.zoomin(response.data.fontEntityId)}) ;
	}
	renderFontUploadTtf ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeFontUploadTtf(event)}}>
			<input type="file" accept="file/*" id="myFile" name="ttf" onChange={(event)=>{this.executeFontUploadTtf(event)}}/>
			<input className="upload_file_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeFontUploadTtf (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		Axios.post(getPrefix()+"/app/font/uploadttf",form)
			.then(response=>{this.zoomin(this.state.fontEntity.fontEntityId)}) ;
	}
	renderFontUpdateWoff ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeFontUpdateWoff(event)}}>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeFontUpdateWoff (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		form.append('name',document.getElementById("FontEntityName").value) ;
		form.append('label',document.getElementById("FontEntityLabel").value) ;
		Axios.post(getPrefix()+"/app/font/update",form).then(response=>{this.zoomin(response.data.fontEntityId)}) ;
	}
	renderFontUploadWoff ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeFontUploadWoff(event)}}>
			<input type="file" accept="file/*" id="myFile" name="woff" onChange={(event)=>{this.executeFontUploadWoff(event)}}/>
			<input className="upload_file_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeFontUploadWoff (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		Axios.post(getPrefix()+"/app/font/uploadwoff",form)
			.then(response=>{this.zoomin(this.state.fontEntity.fontEntityId)}) ;
	}
	renderFontUpdateWoff2 ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeFontUpdateWoff2(event)}}>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeFontUpdateWoff2 (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		form.append('name',document.getElementById("FontEntityName").value) ;
		form.append('label',document.getElementById("FontEntityLabel").value) ;
		Axios.post(getPrefix()+"/app/font/update",form).then(response=>{this.zoomin(response.data.fontEntityId)}) ;
	}
	renderFontUploadWoff2 ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeFontUploadWoff2(event)}}>
			<input type="file" accept="file/*" id="myFile" name="woff2" onChange={(event)=>{this.executeFontUploadWoff2(event)}}/>
			<input className="upload_file_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeFontUploadWoff2 (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		Axios.post(getPrefix()+"/app/font/uploadwoff2",form)
			.then(response=>{this.zoomin(this.state.fontEntity.fontEntityId)}) ;
	}
	renderFontDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Font?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeFontDelete (event)
	{
		Axios.get(getPrefix()+"/app/font/delete?sessionToken="+getSession().sessionToken+"&fontEntityId="+this.state.fontEntity.fontEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class ImageEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			imageEntity:{},
			imageEntityList:[],
		} ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (imageEntityId)
	{
		if (!imageEntityId) imageEntityId = this.state.imageEntity.imageEntityId ;
		Axios.get(getPrefix()+"/app/image/view?sessionToken="+getSessionToken()+"&imageEntityId="+imageEntityId,null)
			.then(response=>{this.setState({command:"View",imageEntity:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/image/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",imageEntityList:response.data,imageEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/image/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",imageEntityList:response.data,imageEntity:{}});}) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.imageEntity.imageEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeImageView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeImageCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeImageUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeImageUpdateImage();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateImage</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeImageUploadImage();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadImage</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeImageDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>} {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderImageView() ;
		else if (this.state.command==="Create")
			return this.renderImageCreate() ;
		else if (this.state.command==="Update")
			return this.renderImageUpdate() ;
		else if (this.state.command==="UpdateImage")
			return this.renderImageUpdateImage() ;
		else if (this.state.command==="UploadImage")
			return this.renderImageUploadImage() ;
		else if (this.state.command==="Delete")
			return this.renderImageDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.imageEntityList?.map(imageEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={imageEntity.imageEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div onClick={()=>{this.zoomin(imageEntity.imageEntityId);}} className='list-item-image sm:w-[120px] sm:h-[120px] flex items-center justify-center'>
										<img src={getPrefix()+"/app/image/imageimage?imageEntityId=${imageEntity.imageEntityId}"} alt={imageEntity.label}/>									</div>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(imageEntity.imageEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderImageView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>View Image</div>
				<img className="image" alt='{imageEntity.label}' src={getPrefix()+`/app/image/imageimage?imageEntityId=${this.state.imageEntity.imageEntityId}`}/>
			</div>
		) ;
	}
	renderImageCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create Image</div>
				<form onSubmit={(event)=>{this.executeImageCreate(event);}}>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeImageCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		Axios.post(getPrefix()+"/app/image/create",form).then(response=>{this.zoomin(response.data.imageEntityId)}) ;
	}
	renderImageUpdate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeImageUpdate(event)}}>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeImageUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('imageEntityId',this.state.imageEntity.imageEntityId) ;
		Axios.post(getPrefix()+"/app/image/update",form).then(response=>{this.zoomin(response.data.imageEntityId)}) ;
	}
	renderImageUpdateImage ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeImageUpdateImage(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Label</label>
					<input type='text' id='ImageEntityImageLabel' name='imageLabel' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.imageEntity.imageLabel}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Name</label>
					<input type='text' id='ImageEntityImageName' name='imageName' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.imageEntity.imageName}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Type</label>
					<input type='text' id='ImageEntityImageType' name='imageType' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.imageEntity.imageType}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Url</label>
					<input type='text' id='ImageEntityImageUrl' name='imageUrl' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.imageEntity.imageUrl}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Credit</label>
					<input type='text' id='ImageEntityImageCredit' name='imageCredit' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.imageEntity.imageCredit}/>
				</div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeImageUpdateImage (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('imageEntityId',this.state.imageEntity.imageEntityId) ;
		Axios.post(getPrefix()+"/app/image/update",form).then(response=>{this.zoomin(response.data.imageEntityId)}) ;
	}
	renderImageUploadImage ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeImageUploadImage(event)}}>
			<input type="file" accept="image/*" id="myFile" name="image" onChange={(event)=>{this.executeImageUploadImage(event)}}/>
			<input className="upload_image_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeImageUploadImage (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('imageEntityId',this.state.imageEntity.imageEntityId) ;
		Axios.post(getPrefix()+"/app/image/uploadimage",form)
			.then(response=>{this.zoomin(this.state.imageEntity.imageEntityId)}) ;
	}
	renderImageDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Image?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeImageDelete (event)
	{
		Axios.get(getPrefix()+"/app/image/delete?sessionToken="+getSession().sessionToken+"&imageEntityId="+this.state.imageEntity.imageEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class MainEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			mainEntity:{},
			mainEntityList:[],
			plainSignature:null,
			htmlSignature:null,
			header:null,
			footer:null,
		} ;
		this.htmlSignatureEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (mainEntityId)
	{
		if (!mainEntityId) mainEntityId = this.state.mainEntity.mainEntityId ;
		Axios.get(getPrefix()+"/app/main/view?sessionToken="+getSessionToken()+"&mainEntityId="+mainEntityId,null)
			.then(response=>{this.setState({command:"View",mainEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/main/textplainsignature?sessionToken="+getSessionToken()+"&mainEntityId="+mainEntityId,null)
			.then(response=>{this.setState({plainSignature:response.data});}) ;
		Axios.get(getPrefix()+"/app/main/texthtmlsignature?sessionToken="+getSessionToken()+"&mainEntityId="+mainEntityId,null)
			.then(response=>{this.setState({htmlSignature:response.data});}) ;
		Axios.get(getPrefix()+"/app/main/textheader?sessionToken="+getSessionToken()+"&mainEntityId="+mainEntityId,null)
			.then(response=>{this.setState({header:response.data});}) ;
		Axios.get(getPrefix()+"/app/main/textfooter?sessionToken="+getSessionToken()+"&mainEntityId="+mainEntityId,null)
			.then(response=>{this.setState({footer:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/main/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",mainEntityList:response.data,mainEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/main/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",mainEntityList:response.data,mainEntity:{}});}) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.mainEntity.mainEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeMainView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeMainCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeMainUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeMainUploadPlainSignature();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadPlainSignature</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeMainUploadHtmlSignature();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadHtmlSignature</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeMainUploadHeader();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadHeader</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeMainUploadFooter();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadFooter</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeMainFileReact();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>FileReact</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeMainUpdateReact();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateReact</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeMainUploadReact();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadReact</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeMainDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>} {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderMainView() ;
		else if (this.state.command==="Create")
			return this.renderMainCreate() ;
		else if (this.state.command==="Update")
			return this.renderMainUpdate() ;
		else if (this.state.command==="UploadPlainSignature")
			return this.renderMainUploadPlainSignature() ;
		else if (this.state.command==="UploadHtmlSignature")
			return this.renderMainUploadHtmlSignature() ;
		else if (this.state.command==="UploadHeader")
			return this.renderMainUploadHeader() ;
		else if (this.state.command==="UploadFooter")
			return this.renderMainUploadFooter() ;
		else if (this.state.command==="FileReact")
			return this.renderMainFileReact() ;
		else if (this.state.command==="UpdateReact")
			return this.renderMainUpdateReact() ;
		else if (this.state.command==="UploadReact")
			return this.renderMainUploadReact() ;
		else if (this.state.command==="Delete")
			return this.renderMainDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.mainEntityList?.map(mainEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={mainEntity.mainEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(mainEntity.mainEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderMainView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>{this.state.mainEntity.label}</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.mainEntity.label}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>language</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.mainEntity.language}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>tagline</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.mainEntity.tagline}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>keywords</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.mainEntity.keywords}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>logo</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.mainEntity.logo}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>useReact</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.mainEntity.useReact}</div>
				</div>
				<p>{this.state.plainSignature}</p>
				<p>{this.state.htmlSignature}</p>
				<p>{this.state.header}</p>
				<p>{this.state.footer}</p>
			</div>
		) ;
	}
	renderMainCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create Main</div>
				<form onSubmit={(event)=>{this.executeMainCreate(event);}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='MainEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter label...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>language</label>
					<input type='text' id='MainEntityLanguage' name='language' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter language...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>tagline</label>
					<input type='text' id='MainEntityTagline' name='tagline' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter tagline...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>keywords</label>
					<input type='text' id='MainEntityKeywords' name='keywords' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter keywords...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>logo</label>
					<input type='text' id='MainEntityLogo' name='logo' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter logo...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>useReact</label>
					<input type='text' id='MainEntityUseReact' name='useReact' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter useReact...'/>
				</div>
				<textarea id="MainEntityPlainSignature" name="plainSignature" className="text_area fields" placeholder="Enter plainSignature..." rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="MainEntityHtmlSignature" name="htmlSignature" onEditorStateChange={(editorState)=>{this.htmlSignatureEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter htmlSignature..."/></div>
				<textarea id="MainEntityHeader" name="header" className="text_area fields" placeholder="Enter header..." rows="4" cols="50"></textarea>
				<textarea id="MainEntityFooter" name="footer" className="text_area fields" placeholder="Enter footer..." rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeMainCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('label',document.getElementById("MainEntityLabel").value) ;
		form.append('language',document.getElementById("MainEntityLanguage").value) ;
		form.append('tagline',document.getElementById("MainEntityTagline").value) ;
		form.append('keywords',document.getElementById("MainEntityKeywords").value) ;
		form.append('logo',document.getElementById("MainEntityLogo").value) ;
		form.append('useReact',document.getElementById("MainEntityUseReact").value) ;
		form.append('plainSignature',document.getElementById("MainEntityPlainSignature").value) ;
		form.append('htmlSignature',draftToHtml(convertToRaw(this.htmlSignatureEditorState.getCurrentContent()))) ;
		form.append('header',document.getElementById("MainEntityHeader").value) ;
		form.append('footer',document.getElementById("MainEntityFooter").value) ;
		Axios.post(getPrefix()+"/app/main/create",form).then(response=>{this.zoomin(response.data.mainEntityId)}) ;
	}
	renderMainUpdate ()
	{
		this.htmlSignatureEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeMainUpdate(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='MainEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.mainEntity.label}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>language</label>
					<input type='text' id='MainEntityLanguage' name='language' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.mainEntity.language}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>tagline</label>
					<input type='text' id='MainEntityTagline' name='tagline' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.mainEntity.tagline}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>keywords</label>
					<input type='text' id='MainEntityKeywords' name='keywords' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.mainEntity.keywords}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>logo</label>
					<input type='text' id='MainEntityLogo' name='logo' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.mainEntity.logo}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>useReact</label>
					<input type='text' id='MainEntityUseReact' name='useReact' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.mainEntity.useReact}/>
				</div>
				<textarea id="MainEntityPlainSignature" name="plainSignature" className="text_area fields" defaultValue={this.state.plainSignature?this.state.plainSignature:""} rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="MainEntityHtmlSignature" name="htmlSignature" onEditorStateChange={(editorState)=>{this.htmlSignatureEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter htmlSignature..."/></div>
				<textarea id="MainEntityHeader" name="header" className="text_area fields" defaultValue={this.state.header?this.state.header:""} rows="4" cols="50"></textarea>
				<textarea id="MainEntityFooter" name="footer" className="text_area fields" defaultValue={this.state.footer?this.state.footer:""} rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeMainUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('mainEntityId',this.state.mainEntity.mainEntityId) ;
		form.append('label',document.getElementById("MainEntityLabel").value) ;
		form.append('language',document.getElementById("MainEntityLanguage").value) ;
		form.append('tagline',document.getElementById("MainEntityTagline").value) ;
		form.append('keywords',document.getElementById("MainEntityKeywords").value) ;
		form.append('logo',document.getElementById("MainEntityLogo").value) ;
		form.append('useReact',document.getElementById("MainEntityUseReact").value) ;
		form.append('plainSignature',document.getElementById("MainEntityPlainSignature").value) ;
		form.append('htmlSignature',draftToHtml(convertToRaw(this.htmlSignatureEditorState.getCurrentContent()))) ;
		form.append('header',document.getElementById("MainEntityHeader").value) ;
		form.append('footer',document.getElementById("MainEntityFooter").value) ;
		Axios.post(getPrefix()+"/app/main/update",form).then(response=>{this.zoomin(response.data.mainEntityId)}) ;
		Axios.post(getPrefix()+"/app/main/updateplainsignature",form) ;
		Axios.post(getPrefix()+"/app/main/updatehtmlsignature",form) ;
		Axios.post(getPrefix()+"/app/main/updateheader",form) ;
		Axios.post(getPrefix()+"/app/main/updatefooter",form) ;
	}
	renderMainUpdateReact ()
	{
		this.htmlSignatureEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeMainUpdateReact(event)}}>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeMainUpdateReact (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('mainEntityId',this.state.mainEntity.mainEntityId) ;
		form.append('label',document.getElementById("MainEntityLabel").value) ;
		form.append('language',document.getElementById("MainEntityLanguage").value) ;
		form.append('tagline',document.getElementById("MainEntityTagline").value) ;
		form.append('keywords',document.getElementById("MainEntityKeywords").value) ;
		form.append('logo',document.getElementById("MainEntityLogo").value) ;
		form.append('useReact',document.getElementById("MainEntityUseReact").value) ;
		form.append('plainSignature',document.getElementById("MainEntityPlainSignature").value) ;
		form.append('htmlSignature',draftToHtml(convertToRaw(this.htmlSignatureEditorState.getCurrentContent()))) ;
		form.append('header',document.getElementById("MainEntityHeader").value) ;
		form.append('footer',document.getElementById("MainEntityFooter").value) ;
		Axios.post(getPrefix()+"/app/main/update",form).then(response=>{this.zoomin(response.data.mainEntityId)}) ;
		Axios.post(getPrefix()+"/app/main/updateplainsignature",form) ;
		Axios.post(getPrefix()+"/app/main/updatehtmlsignature",form) ;
		Axios.post(getPrefix()+"/app/main/updateheader",form) ;
		Axios.post(getPrefix()+"/app/main/updatefooter",form) ;
	}
	renderMainUploadReact ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeMainUploadReact(event)}}>
			<input type="file" accept="file/*" id="myFile" name="react" onChange={(event)=>{this.executeMainUploadReact(event)}}/>
			<input className="upload_file_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeMainUploadReact (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('mainEntityId',this.state.mainEntity.mainEntityId) ;
		Axios.post(getPrefix()+"/app/main/uploadreact",form)
			.then(response=>{this.zoomin(this.state.mainEntity.mainEntityId)}) ;
	}
	renderMainDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Main?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeMainDelete (event)
	{
		Axios.get(getPrefix()+"/app/main/delete?sessionToken="+getSession().sessionToken+"&mainEntityId="+this.state.mainEntity.mainEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class OrderEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			orderEntity:{},
			orderEntityList:[],
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (orderEntityId)
	{
		if (!orderEntityId) orderEntityId = this.state.orderEntity.orderEntityId ;
		Axios.get(getPrefix()+"/app/order/view?sessionToken="+getSessionToken()+"&orderEntityId="+orderEntityId,null)
			.then(response=>{this.setState({command:"View",orderEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/order/textlongdescription?sessionToken="+getSessionToken()+"&orderEntityId="+orderEntityId,null)
			.then(response=>{this.setState({longDescription:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/order/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",orderEntityList:response.data,orderEntity:{}});}) ;
		else if (commandList==="ListByUser")
			Axios.get(getPrefix()+"/app/order/listbyuser?sessionToken="+getSessionToken()+"&page="+this.page+"&userEntityId="+props.userEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByUser",orderEntityList:response.data,orderEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/order/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",orderEntityList:response.data,orderEntity:{}});}) ;
	}
	managerPermission ()
	{
		return (false) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.orderEntity.orderEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.managerPermission())&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{(this.managerPermission())&&<li><button onClick={()=>{this.zoomout("ListByUser");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByUser</span></button></li>}
												{(this.managerPermission())&&<li><button onClick={()=>{this.executeOrderView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeOrderCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.managerPermission())&&<li><button onClick={()=>{this.executeOrderUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.managerPermission())&&<li><button onClick={()=>{this.executeOrderUpdateLongDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateLongDescription</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeOrderManager();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Manager</span></button></li>}
												{true&&<li><button onClick={()=>{this.command("Order");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Order</span></button></li>}
												{true&&<li><button onClick={()=>{this.command("Checkout");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Checkout</span></button></li>}
												{true&&<li><button onClick={()=>{this.command("Confirm");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Confirm</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.managerPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>} {<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderOrderView() ;
		else if (this.state.command==="Create")
			return this.renderOrderCreate() ;
		else if (this.state.command==="Update")
			return this.renderOrderUpdate() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderOrderUpdateLongDescription() ;
		else if (this.state.command==="Manager")
			return this.renderOrderManager() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.orderEntityList?.map(orderEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={orderEntity.orderEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div className='list-item-body flex flex-col space-y-2'>
										<span onClick={()=>{this.zoomin(orderEntity.orderEntityId);}}>{orderEntity.label}</span>
									</div>
									<div onClick={()=>{this.zoomin(orderEntity.orderEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderOrderView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>{this.state.orderEntity.label}</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.orderEntity.label}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>orderDate</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.orderEntity.orderDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>paymentDate</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.orderEntity.paymentDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>shipDate</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.orderEntity.shipDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>closeDate</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.orderEntity.closeDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>tax</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.orderEntity.tax}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>total</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.orderEntity.total}</div>
				</div>
				<p>{this.state.longDescription}</p>
			</div>
		) ;
	}
	renderOrderCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create Order</div>
				<form onSubmit={(event)=>{this.executeOrderCreate(event);}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='OrderEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter label...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>orderDate</label>
					<input type='text' id='OrderEntityOrderDate' name='orderDate' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter orderDate...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>paymentDate</label>
					<input type='text' id='OrderEntityPaymentDate' name='paymentDate' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter paymentDate...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>shipDate</label>
					<input type='text' id='OrderEntityShipDate' name='shipDate' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter shipDate...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>closeDate</label>
					<input type='text' id='OrderEntityCloseDate' name='closeDate' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter closeDate...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>tax</label>
					<input type='text' id='OrderEntityTax' name='tax' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter tax...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>total</label>
					<input type='text' id='OrderEntityTotal' name='total' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter total...'/>
				</div>
				<div className="editor_field fields"><Editor id="OrderEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeOrderCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('label',document.getElementById("OrderEntityLabel").value) ;
		form.append('orderDate',document.getElementById("OrderEntityOrderDate").value) ;
		form.append('paymentDate',document.getElementById("OrderEntityPaymentDate").value) ;
		form.append('shipDate',document.getElementById("OrderEntityShipDate").value) ;
		form.append('closeDate',document.getElementById("OrderEntityCloseDate").value) ;
		form.append('tax',document.getElementById("OrderEntityTax").value) ;
		form.append('total',document.getElementById("OrderEntityTotal").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/order/create",form).then(response=>{this.zoomin(response.data.orderEntityId)}) ;
	}
	renderOrderUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeOrderUpdate(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='OrderEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.orderEntity.label}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>orderDate</label>
					<input type='text' id='OrderEntityOrderDate' name='orderDate' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.orderEntity.orderDate}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>paymentDate</label>
					<input type='text' id='OrderEntityPaymentDate' name='paymentDate' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.orderEntity.paymentDate}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>shipDate</label>
					<input type='text' id='OrderEntityShipDate' name='shipDate' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.orderEntity.shipDate}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>closeDate</label>
					<input type='text' id='OrderEntityCloseDate' name='closeDate' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.orderEntity.closeDate}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>tax</label>
					<input type='text' id='OrderEntityTax' name='tax' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.orderEntity.tax}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>total</label>
					<input type='text' id='OrderEntityTotal' name='total' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.orderEntity.total}/>
				</div>
				<div className="editor_field fields"><Editor id="OrderEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeOrderUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('orderEntityId',this.state.orderEntity.orderEntityId) ;
		form.append('label',document.getElementById("OrderEntityLabel").value) ;
		form.append('orderDate',document.getElementById("OrderEntityOrderDate").value) ;
		form.append('paymentDate',document.getElementById("OrderEntityPaymentDate").value) ;
		form.append('shipDate',document.getElementById("OrderEntityShipDate").value) ;
		form.append('closeDate',document.getElementById("OrderEntityCloseDate").value) ;
		form.append('tax',document.getElementById("OrderEntityTax").value) ;
		form.append('total',document.getElementById("OrderEntityTotal").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/order/update",form).then(response=>{this.zoomin(response.data.orderEntityId)}) ;
		Axios.post(getPrefix()+"/app/order/updatelongdescription",form) ;
	}
	renderOrderUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeOrderUpdateLongDescription(event)}}>
				<div className="editor_field fields"><Editor id="OrderEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeOrderUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('orderEntityId',this.state.orderEntity.orderEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/order/updatelongdescription/",form).then(response=>{this.zoomin(response.data.orderEntityId)}) ;
	}
	renderOrderManager ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Order?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeOrderManager (event)
	{
		Axios.get(getPrefix()+"/app/order/delete?sessionToken="+getSession().sessionToken+"&orderEntityId="+this.state.orderEntity.orderEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	renderOrderOrder ()
	{
	}
	executeOrderOrder (event)
	{
		Axios.get(getPrefix()+"/app/order/order?sessionToken="+getSession().sessionToken,null) ;
	}
	renderOrderCheckout ()
	{
	}
	executeOrderCheckout (event)
	{
		Axios.get(getPrefix()+"/app/order/checkout?sessionToken="+getSession().sessionToken,null) ;
	}
	renderOrderConfirm ()
	{
	}
	executeOrderConfirm (event)
	{
		Axios.get(getPrefix()+"/app/order/confirm?sessionToken="+getSession().sessionToken,null) ;
	}
}

class OrderProductEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			orderProductEntity:{},
			orderProductEntityList:[],
			longDescription:null,
			specification:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (orderProductEntityId)
	{
		if (!orderProductEntityId) orderProductEntityId = this.state.orderProductEntity.orderProductEntityId ;
		Axios.get(getPrefix()+"/app/orderproduct/view?sessionToken="+getSessionToken()+"&orderProductEntityId="+orderProductEntityId,null)
			.then(response=>{this.setState({command:"View",orderProductEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/orderproduct/textlongdescription?sessionToken="+getSessionToken()+"&orderProductEntityId="+orderProductEntityId,null)
			.then(response=>{this.setState({longDescription:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/orderproduct/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",orderProductEntityList:response.data,orderProductEntity:{}});}) ;
		else if (commandList==="ListByOrder")
			Axios.get(getPrefix()+"/app/orderproduct/listbyorder?sessionToken="+getSessionToken()+"&page="+this.page+"&orderEntityId="+props.orderEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByOrder",orderProductEntityList:response.data,orderProductEntity:{}});}) ;
		else if (commandList==="ListByProduct")
			Axios.get(getPrefix()+"/app/orderproduct/listbyproduct?sessionToken="+getSessionToken()+"&page="+this.page+"&productEntityId="+props.productEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByProduct",orderProductEntityList:response.data,orderProductEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/orderproduct/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",orderProductEntityList:response.data,orderProductEntity:{}});}) ;
	}
	managerPermission ()
	{
		return (false) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.orderProductEntity.orderProductEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.managerPermission())&&<li><button onClick={()=>{this.zoomout("ListByOrder");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByOrder</span></button></li>}
												{(this.managerPermission())&&<li><button onClick={()=>{this.zoomout("ListByProduct");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByProduct</span></button></li>}
												{(this.managerPermission())&&<li><button onClick={()=>{this.executeOrderProductView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.managerPermission())&&<li><button onClick={()=>{this.executeOrderProductCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.managerPermission())&&<li><button onClick={()=>{this.executeOrderProductUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.managerPermission())&&<li><button onClick={()=>{this.executeOrderProductUpdateLongDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateLongDescription</span></button></li>}
												{(this.managerPermission())&&<li><button onClick={()=>{this.executeOrderProductDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.managerPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderOrderProductView() ;
		else if (this.state.command==="Create")
			return this.renderOrderProductCreate() ;
		else if (this.state.command==="Update")
			return this.renderOrderProductUpdate() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderOrderProductUpdateLongDescription() ;
		else if (this.state.command==="Delete")
			return this.renderOrderProductDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.orderProductEntityList?.map(orderProductEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={orderProductEntity.orderProductEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(orderProductEntity.orderProductEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderOrderProductView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>View OrderProduct</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>quantityRequest</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.orderProductEntity.quantityRequest}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>quantityDeliver</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.orderProductEntity.quantityDeliver}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>price</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.orderProductEntity.price}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>showOrder</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.orderProductEntity.showOrder}</div>
				</div>
				<p>{this.state.longDescription}</p>
			</div>
		) ;
	}
	renderOrderProductCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create OrderProduct</div>
				<form onSubmit={(event)=>{this.executeOrderProductCreate(event);}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>quantityRequest</label>
					<input type='text' id='OrderProductEntityQuantityRequest' name='quantityRequest' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter quantityRequest...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>quantityDeliver</label>
					<input type='text' id='OrderProductEntityQuantityDeliver' name='quantityDeliver' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter quantityDeliver...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>price</label>
					<input type='text' id='OrderProductEntityPrice' name='price' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter price...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>showOrder</label>
					<input type='text' id='OrderProductEntityShowOrder' name='showOrder' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter showOrder...'/>
				</div>
				<div className="editor_field fields"><Editor id="OrderProductEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeOrderProductCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('quantityRequest',document.getElementById("OrderProductEntityQuantityRequest").value) ;
		form.append('quantityDeliver',document.getElementById("OrderProductEntityQuantityDeliver").value) ;
		form.append('price',document.getElementById("OrderProductEntityPrice").value) ;
		form.append('showOrder',document.getElementById("OrderProductEntityShowOrder").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/orderproduct/create",form).then(response=>{this.zoomin(response.data.orderProductEntityId)}) ;
	}
	renderOrderProductUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeOrderProductUpdate(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>quantityRequest</label>
					<input type='text' id='OrderProductEntityQuantityRequest' name='quantityRequest' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.orderProductEntity.quantityRequest}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>quantityDeliver</label>
					<input type='text' id='OrderProductEntityQuantityDeliver' name='quantityDeliver' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.orderProductEntity.quantityDeliver}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>price</label>
					<input type='text' id='OrderProductEntityPrice' name='price' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.orderProductEntity.price}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>showOrder</label>
					<input type='text' id='OrderProductEntityShowOrder' name='showOrder' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.orderProductEntity.showOrder}/>
				</div>
				<div className="editor_field fields"><Editor id="OrderProductEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeOrderProductUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('orderProductEntityId',this.state.orderProductEntity.orderProductEntityId) ;
		form.append('quantityRequest',document.getElementById("OrderProductEntityQuantityRequest").value) ;
		form.append('quantityDeliver',document.getElementById("OrderProductEntityQuantityDeliver").value) ;
		form.append('price',document.getElementById("OrderProductEntityPrice").value) ;
		form.append('showOrder',document.getElementById("OrderProductEntityShowOrder").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/orderproduct/update",form).then(response=>{this.zoomin(response.data.orderProductEntityId)}) ;
		Axios.post(getPrefix()+"/app/orderproduct/updatelongdescription",form) ;
	}
	renderOrderProductUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeOrderProductUpdateLongDescription(event)}}>
				<div className="editor_field fields"><Editor id="OrderProductEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeOrderProductUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('orderProductEntityId',this.state.orderProductEntity.orderProductEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/orderproduct/updatelongdescription/",form).then(response=>{this.zoomin(response.data.orderProductEntityId)}) ;
	}
	renderOrderProductDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this OrderProduct?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeOrderProductDelete (event)
	{
		Axios.get(getPrefix()+"/app/orderproduct/delete?sessionToken="+getSession().sessionToken+"&orderProductEntityId="+this.state.orderProductEntity.orderProductEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class PageEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			pageEntity:{},
			pageEntityList:[],
			shortDescription:null,
			body:null,
		} ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (pageEntityId)
	{
		if (!pageEntityId) pageEntityId = this.state.pageEntity.pageEntityId ;
		Axios.get(getPrefix()+"/app/page/view?sessionToken="+getSessionToken()+"&pageEntityId="+pageEntityId,null)
			.then(response=>{this.setState({command:"View",pageEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/page/textshortdescription?sessionToken="+getSessionToken()+"&pageEntityId="+pageEntityId,null)
			.then(response=>{this.setState({shortDescription:response.data});}) ;
		Axios.get(getPrefix()+"/app/page/textbody?sessionToken="+getSessionToken()+"&pageEntityId="+pageEntityId,null)
			.then(response=>{this.setState({body:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/page/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",pageEntityList:response.data,pageEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/page/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",pageEntityList:response.data,pageEntity:{}});}) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.pageEntity.pageEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executePageView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executePageCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executePageUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executePageUploadBody();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadBody</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executePageDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>} {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderPageView() ;
		else if (this.state.command==="Create")
			return this.renderPageCreate() ;
		else if (this.state.command==="Update")
			return this.renderPageUpdate() ;
		else if (this.state.command==="UploadBody")
			return this.renderPageUploadBody() ;
		else if (this.state.command==="Delete")
			return this.renderPageDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.pageEntityList?.map(pageEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={pageEntity.pageEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(pageEntity.pageEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderPageView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>{this.state.pageEntity.label}</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>name</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.pageEntity.name}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>language</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.pageEntity.language}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.pageEntity.label}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>plain</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.pageEntity.plain}</div>
				</div>
				<p>{this.state.shortDescription}</p>
				<p>{this.state.body}</p>
			</div>
		) ;
	}
	renderPageCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create Page</div>
				<form onSubmit={(event)=>{this.executePageCreate(event);}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>name</label>
					<input type='text' id='PageEntityName' name='name' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter name...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>language</label>
					<input type='text' id='PageEntityLanguage' name='language' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter language...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='PageEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter label...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>plain</label>
					<input type='text' id='PageEntityPlain' name='plain' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter plain...'/>
				</div>
				<textarea id="PageEntityShortDescription" name="shortDescription" className="text_area fields" placeholder="Enter shortDescription..." rows="4" cols="50"></textarea>
				<textarea id="PageEntityBody" name="body" className="text_area fields" placeholder="Enter body..." rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executePageCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('name',document.getElementById("PageEntityName").value) ;
		form.append('language',document.getElementById("PageEntityLanguage").value) ;
		form.append('label',document.getElementById("PageEntityLabel").value) ;
		form.append('plain',document.getElementById("PageEntityPlain").value) ;
		form.append('shortDescription',document.getElementById("PageEntityShortDescription").value) ;
		form.append('body',document.getElementById("PageEntityBody").value) ;
		Axios.post(getPrefix()+"/app/page/create",form).then(response=>{this.zoomin(response.data.pageEntityId)}) ;
	}
	renderPageUpdate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executePageUpdate(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>name</label>
					<input type='text' id='PageEntityName' name='name' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.pageEntity.name}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>language</label>
					<input type='text' id='PageEntityLanguage' name='language' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.pageEntity.language}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='PageEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.pageEntity.label}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>plain</label>
					<input type='text' id='PageEntityPlain' name='plain' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.pageEntity.plain}/>
				</div>
				<textarea id="PageEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
				<textarea id="PageEntityBody" name="body" className="text_area fields" defaultValue={this.state.body?this.state.body:""} rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executePageUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('pageEntityId',this.state.pageEntity.pageEntityId) ;
		form.append('name',document.getElementById("PageEntityName").value) ;
		form.append('language',document.getElementById("PageEntityLanguage").value) ;
		form.append('label',document.getElementById("PageEntityLabel").value) ;
		form.append('plain',document.getElementById("PageEntityPlain").value) ;
		form.append('shortDescription',document.getElementById("PageEntityShortDescription").value) ;
		form.append('body',document.getElementById("PageEntityBody").value) ;
		Axios.post(getPrefix()+"/app/page/update",form).then(response=>{this.zoomin(response.data.pageEntityId)}) ;
		Axios.post(getPrefix()+"/app/page/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/page/updatebody",form) ;
	}
	renderPageDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Page?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executePageDelete (event)
	{
		Axios.get(getPrefix()+"/app/page/delete?sessionToken="+getSession().sessionToken+"&pageEntityId="+this.state.pageEntity.pageEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class ProductEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			productEntity:{},
			productEntityList:[],
			sessionProductUserEntity:{},
			shortDescription:null,
			longDescription:null,
			specification:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (productEntityId)
	{
		if (!productEntityId) productEntityId = this.state.productEntity.productEntityId ;
		Axios.get(getPrefix()+"/app/product/view?sessionToken="+getSessionToken()+"&productEntityId="+productEntityId,null)
			.then(response=>{this.setState({command:"View",productEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/productuser/view?sessionToken="+getSessionToken()+"&productEntityId="+productEntityId+"&userEntityId="+getSessionUserEntityId(),null)
			.then(response=>{this.setState({ProductUserEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/product/textshortdescription?sessionToken="+getSessionToken()+"&productEntityId="+productEntityId,null)
			.then(response=>{this.setState({shortDescription:response.data});}) ;
		Axios.get(getPrefix()+"/app/product/textlongdescription?sessionToken="+getSessionToken()+"&productEntityId="+productEntityId,null)
			.then(response=>{this.setState({longDescription:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/product/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",productEntityList:response.data,productEntity:{},sessionProductUserEntity:{}});}) ;
		else if (commandList==="ListByLabel")
			Axios.get(getPrefix()+"/app/product/listbylabel?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByLabel",productEntityList:response.data,productEntity:{},sessionProductUserEntity:{}});}) ;
		else if (commandList==="ListByCategory")
			Axios.get(getPrefix()+"/app/product/listbycategory?sessionToken="+getSessionToken()+"&page="+this.page+"&categoryEntityId="+props.categoryEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByCategory",productEntityList:response.data,productEntity:{},sessionProductUserEntity:{}});}) ;
		else if (commandList==="ListByCompany")
			Axios.get(getPrefix()+"/app/product/listbycompany?sessionToken="+getSessionToken()+"&page="+this.page+"&companyEntityId="+props.companyEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByCompany",productEntityList:response.data,productEntity:{},sessionProductUserEntity:{}});}) ;
		else if (commandList==="ListUnapproved")
			Axios.get(getPrefix()+"/app/product/listunapproved?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"ListUnapproved",productEntityList:response.data,productEntity:{},sessionProductUserEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/product/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",productEntityList:response.data,productEntity:{},sessionProductUserEntity:{}});}) ;
	}
	editorPermission ()
	{
		return (false) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.productEntity.productEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{true&&<li><button onClick={()=>{this.zoomout("ListByLabel");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByLabel</span></button></li>}
												{true&&<li><button onClick={()=>{this.zoomout("ListByCategory");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByCategory</span></button></li>}
												{true&&<li><button onClick={()=>{this.zoomout("ListByCompany");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByCompany</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.zoomout("ListUnapproved");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListUnapproved</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeProductView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeProductViewSpecification();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ViewSpecification</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeProductJsonSpecification();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>JsonSpecification</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeProductCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeProductUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeProductUpdateShortDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateShortDescription</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeProductUpdateLongDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateLongDescription</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeProductUpdateImage();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateImage</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeProductUploadImage();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadImage</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeProductUploadSpecification();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadSpecification</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeProductDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
												{(this.editorPermission())&&!this.state.productEntity.approveDate&&<li><button onClick={()=>{this.executeProductApprove();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Approve</span></button></li>}
												{(this.editorPermission())&&this.state.productEntity.approveDate&&<li><button onClick={()=>{this.executeProductUnapprove();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Unapprove</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {<button className="menu-action" onClick={()=>{this.zoomout("ListByLabel")}}>ListByLabel</button>} {(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListUnapproved")}}>ListUnapproved</button>} {(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderProductView() ;
		else if (this.state.command==="ViewSpecification")
			return this.renderProductViewSpecification() ;
		else if (this.state.command==="JsonSpecification")
			return this.renderProductJsonSpecification() ;
		else if (this.state.command==="Create")
			return this.renderProductCreate() ;
		else if (this.state.command==="Update")
			return this.renderProductUpdate() ;
		else if (this.state.command==="UpdateShortDescription")
			return this.renderProductUpdateShortDescription() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderProductUpdateLongDescription() ;
		else if (this.state.command==="UpdateImage")
			return this.renderProductUpdateImage() ;
		else if (this.state.command==="UploadImage")
			return this.renderProductUploadImage() ;
		else if (this.state.command==="UploadSpecification")
			return this.renderProductUploadSpecification() ;
		else if (this.state.command==="Delete")
			return this.renderProductDelete() ;
		else if (this.state.command==="Approve")
			return this.renderProductApprove() ;
		else if (this.state.command==="Unapprove")
			return this.renderProductUnapprove() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.productEntityList?.map(productEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={productEntity.productEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div onClick={()=>{this.zoomin(productEntity.productEntityId);}} className='list-item-image sm:w-[120px] sm:h-[120px] flex items-center justify-center'>
										<img src={getPrefix()+"/app/product/imageimage?productEntityId=${productEntity.productEntityId}"} alt={productEntity.label}/>									</div>
									<div className='list-item-body flex flex-col space-y-2'>
										<span onClick={()=>{this.zoomin(productEntity.productEntityId);}}>{productEntity.label}</span>
									</div>
									<div onClick={()=>{this.zoomin(productEntity.productEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderProductView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>{this.state.productEntity.label}</div>
				<img className="image" alt='{productEntity.label}' src={getPrefix()+`/app/product/imageimage?productEntityId=${this.state.productEntity.productEntityId}`}/>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.productEntity.label}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Approve Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.productEntity.approveDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Reject Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.productEntity.rejectDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Rating Total</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.productEntity.ratingTotal}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Ratiing Count</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.productEntity.ratingCount}</div>
				</div>
				<p>{this.state.shortDescription}</p>
				<p>{this.state.longDescription}</p>
			</div>
		) ;
	}
	renderProductViewSpecification ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>{this.state.productEntity.label}</div>
				<img className="image" alt='{productEntity.label}' src={getPrefix()+`/app/product/imageimage?productEntityId=${this.state.productEntity.productEntityId}`}/>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.productEntity.label}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Approve Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.productEntity.approveDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Reject Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.productEntity.rejectDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Rating Total</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.productEntity.ratingTotal}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Ratiing Count</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.productEntity.ratingCount}</div>
				</div>
				<p>{this.state.shortDescription}</p>
				<p>{this.state.longDescription}</p>
			</div>
		) ;
	}
	renderProductJsonSpecification ()
	{
	}
	executeProductJsonSpecification (event)
	{
		Axios.get(getPrefix()+"/app/product/json?sessionToken="+getSession().sessionToken+"&productEntityId="+this.state.productEntity.productEntityId,null)
			.then(response=>{this.zoomin(this.state.productEntity.productEntityId)}) ;
	}
	renderProductCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create Product</div>
				<form onSubmit={(event)=>{this.executeProductCreate(event);}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='ProductEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter label...'/>
				</div>
				<textarea id="ProductEntityShortDescription" name="shortDescription" className="text_area fields" placeholder="Enter shortDescription..." rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="ProductEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeProductCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('label',document.getElementById("ProductEntityLabel").value) ;
		form.append('shortDescription',document.getElementById("ProductEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/product/create",form).then(response=>{this.zoomin(response.data.productEntityId)}) ;
	}
	renderProductUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeProductUpdate(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='ProductEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.productEntity.label}/>
				</div>
				<textarea id="ProductEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="ProductEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeProductUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('productEntityId',this.state.productEntity.productEntityId) ;
		form.append('label',document.getElementById("ProductEntityLabel").value) ;
		form.append('shortDescription',document.getElementById("ProductEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/product/update",form).then(response=>{this.zoomin(response.data.productEntityId)}) ;
		Axios.post(getPrefix()+"/app/product/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/product/updatelongdescription",form) ;
	}
	renderProductUpdateShortDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeProductUpdateShortDescription(event)}}>
				<textarea id="ProductEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeProductUpdateShortDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('productEntityId',this.state.productEntity.productEntityId) ;
		form.append('shortDescription',document.getElementById("ProductEntityShortDescription").value) ;
		Axios.post(getPrefix()+"/app/product/updateshortdescription/",form).then(response=>{this.zoomin(response.data.productEntityId)}) ;
	}
	renderProductUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeProductUpdateLongDescription(event)}}>
				<div className="editor_field fields"><Editor id="ProductEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeProductUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('productEntityId',this.state.productEntity.productEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/product/updatelongdescription/",form).then(response=>{this.zoomin(response.data.productEntityId)}) ;
	}
	renderProductUpdateImage ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeProductUpdateImage(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Label</label>
					<input type='text' id='ProductEntityImageLabel' name='imageLabel' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.productEntity.imageLabel}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Name</label>
					<input type='text' id='ProductEntityImageName' name='imageName' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.productEntity.imageName}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Type</label>
					<input type='text' id='ProductEntityImageType' name='imageType' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.productEntity.imageType}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Url</label>
					<input type='text' id='ProductEntityImageUrl' name='imageUrl' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.productEntity.imageUrl}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Credit</label>
					<input type='text' id='ProductEntityImageCredit' name='imageCredit' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.productEntity.imageCredit}/>
				</div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeProductUpdateImage (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('productEntityId',this.state.productEntity.productEntityId) ;
		form.append('label',document.getElementById("ProductEntityLabel").value) ;
		form.append('shortDescription',document.getElementById("ProductEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/product/update",form).then(response=>{this.zoomin(response.data.productEntityId)}) ;
		Axios.post(getPrefix()+"/app/product/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/product/updatelongdescription",form) ;
	}
	renderProductUploadImage ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeProductUploadImage(event)}}>
			<input type="file" accept="image/*" id="myFile" name="image" onChange={(event)=>{this.executeProductUploadImage(event)}}/>
			<input className="upload_image_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeProductUploadImage (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('productEntityId',this.state.productEntity.productEntityId) ;
		Axios.post(getPrefix()+"/app/product/uploadimage",form)
			.then(response=>{this.zoomin(this.state.productEntity.productEntityId)}) ;
	}
	renderProductUploadSpecification ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeProductUploadSpecification(event)}}>
			<input type="file" accept="xml/*" id="myFile" name="specification" onChange={(event)=>{this.executeProductUploadSpecification(event)}}/>
			<input className="upload_xml_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeProductUploadSpecification (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('productEntityId',this.state.productEntity.productEntityId) ;
		Axios.post(getPrefix()+"/app/product/uploadspecification",form)
			.then(response=>{this.zoomin(this.state.productEntity.productEntityId)}) ;
	}
	renderProductDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Product?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeProductDelete (event)
	{
		Axios.get(getPrefix()+"/app/product/delete?sessionToken="+getSession().sessionToken+"&productEntityId="+this.state.productEntity.productEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	executeProductApprove (event)
	{
		Axios.get(getPrefix()+"/app/product/approve?sessionToken="+getSession().sessionToken+"&productEntityId="+this.state.productEntity.productEntityId,null)
			.then(response=>{this.zoomin(this.state.productEntity.productEntityId)}) ;
	}
	executeProductUnapprove (event)
	{
		Axios.get(getPrefix()+"/app/product/unapprove?sessionToken="+getSession().sessionToken+"&productEntityId="+this.state.productEntity.productEntityId,null)
			.then(response=>{this.zoomin(this.state.productEntity.productEntityId)}) ;
	}
}

class ProductImageEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			productImageEntity:{},
			productImageEntityList:[],
			shortDescription:null,
		} ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (productImageEntityId)
	{
		if (!productImageEntityId) productImageEntityId = this.state.productImageEntity.productImageEntityId ;
		Axios.get(getPrefix()+"/app/productimage/view?sessionToken="+getSessionToken()+"&productImageEntityId="+productImageEntityId,null)
			.then(response=>{this.setState({command:"View",productImageEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/productimage/textshortdescription?sessionToken="+getSessionToken()+"&productImageEntityId="+productImageEntityId,null)
			.then(response=>{this.setState({shortDescription:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/productimage/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",productImageEntityList:response.data,productImageEntity:{}});}) ;
		else if (commandList==="ListByProduct")
			Axios.get(getPrefix()+"/app/productimage/listbyproduct?sessionToken="+getSessionToken()+"&page="+this.page+"&productEntityId="+props.productEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByProduct",productImageEntityList:response.data,productImageEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/productimage/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",productImageEntityList:response.data,productImageEntity:{}});}) ;
	}
	editorPermission ()
	{
		return (false) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.productImageEntity.productImageEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.zoomout("ListByProduct");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByProduct</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeProductImageView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeProductImageCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeProductImageUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeProductImageUpdateImage();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateImage</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeProductImageUploadImage();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadImage</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeProductImageDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>} {(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderProductImageView() ;
		else if (this.state.command==="Create")
			return this.renderProductImageCreate() ;
		else if (this.state.command==="Update")
			return this.renderProductImageUpdate() ;
		else if (this.state.command==="UpdateImage")
			return this.renderProductImageUpdateImage() ;
		else if (this.state.command==="UploadImage")
			return this.renderProductImageUploadImage() ;
		else if (this.state.command==="Delete")
			return this.renderProductImageDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.productImageEntityList?.map(productImageEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={productImageEntity.productImageEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div onClick={()=>{this.zoomin(productImageEntity.productImageEntityId);}} className='list-item-image sm:w-[120px] sm:h-[120px] flex items-center justify-center'>
										<img src={getPrefix()+"/app/productimage/imageimage?productImageEntityId=${productImageEntity.productImageEntityId}"} alt={productImageEntity.label}/>									</div>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(productImageEntity.productImageEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderProductImageView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>View ProductImage</div>
				<img className="image" alt='{productImageEntity.label}' src={getPrefix()+`/app/productimage/imageimage?productImageEntityId=${this.state.productImageEntity.productImageEntityId}`}/>
				<p>{this.state.shortDescription}</p>
			</div>
		) ;
	}
	renderProductImageCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create ProductImage</div>
				<form onSubmit={(event)=>{this.executeProductImageCreate(event);}}>
				<textarea id="ProductImageEntityShortDescription" name="shortDescription" className="text_area fields" placeholder="Enter shortDescription..." rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeProductImageCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('shortDescription',document.getElementById("ProductImageEntityShortDescription").value) ;
		Axios.post(getPrefix()+"/app/productimage/create",form).then(response=>{this.zoomin(response.data.productImageEntityId)}) ;
	}
	renderProductImageUpdate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeProductImageUpdate(event)}}>
				<textarea id="ProductImageEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeProductImageUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('productImageEntityId',this.state.productImageEntity.productImageEntityId) ;
		form.append('shortDescription',document.getElementById("ProductImageEntityShortDescription").value) ;
		Axios.post(getPrefix()+"/app/productimage/update",form).then(response=>{this.zoomin(response.data.productImageEntityId)}) ;
		Axios.post(getPrefix()+"/app/productimage/updateshortdescription",form) ;
	}
	renderProductImageUpdateImage ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeProductImageUpdateImage(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Label</label>
					<input type='text' id='ProductImageEntityImageLabel' name='imageLabel' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.productImageEntity.imageLabel}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Name</label>
					<input type='text' id='ProductImageEntityImageName' name='imageName' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.productImageEntity.imageName}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Type</label>
					<input type='text' id='ProductImageEntityImageType' name='imageType' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.productImageEntity.imageType}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Url</label>
					<input type='text' id='ProductImageEntityImageUrl' name='imageUrl' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.productImageEntity.imageUrl}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Credit</label>
					<input type='text' id='ProductImageEntityImageCredit' name='imageCredit' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.productImageEntity.imageCredit}/>
				</div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeProductImageUpdateImage (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('productImageEntityId',this.state.productImageEntity.productImageEntityId) ;
		form.append('shortDescription',document.getElementById("ProductImageEntityShortDescription").value) ;
		Axios.post(getPrefix()+"/app/productimage/update",form).then(response=>{this.zoomin(response.data.productImageEntityId)}) ;
		Axios.post(getPrefix()+"/app/productimage/updateshortdescription",form) ;
	}
	renderProductImageUploadImage ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeProductImageUploadImage(event)}}>
			<input type="file" accept="image/*" id="myFile" name="image" onChange={(event)=>{this.executeProductImageUploadImage(event)}}/>
			<input className="upload_image_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeProductImageUploadImage (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('productImageEntityId',this.state.productImageEntity.productImageEntityId) ;
		Axios.post(getPrefix()+"/app/productimage/uploadimage",form)
			.then(response=>{this.zoomin(this.state.productImageEntity.productImageEntityId)}) ;
	}
	renderProductImageDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this ProductImage?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeProductImageDelete (event)
	{
		Axios.get(getPrefix()+"/app/productimage/delete?sessionToken="+getSession().sessionToken+"&productImageEntityId="+this.state.productImageEntity.productImageEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class ProductUserEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			productUserEntity:{},
			productUserEntityList:[],
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (productUserEntityId)
	{
		if (!productUserEntityId) productUserEntityId = this.state.productUserEntity.productUserEntityId ;
		Axios.get(getPrefix()+"/app/productuser/view?sessionToken="+getSessionToken()+"&productUserEntityId="+productUserEntityId,null)
			.then(response=>{this.setState({command:"View",productUserEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/productuser/textlongdescription?sessionToken="+getSessionToken()+"&productUserEntityId="+productUserEntityId,null)
			.then(response=>{this.setState({longDescription:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/productuser/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",productUserEntityList:response.data,productUserEntity:{}});}) ;
		else if (commandList==="ListByProduct")
			Axios.get(getPrefix()+"/app/productuser/listbyproduct?sessionToken="+getSessionToken()+"&page="+this.page+"&productEntityId="+props.productEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByProduct",productUserEntityList:response.data,productUserEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/productuser/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",productUserEntityList:response.data,productUserEntity:{}});}) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.productUserEntity.productUserEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout("ListByProduct");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByProduct</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeProductUserView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeProductUserCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeProductUserUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeProductUserUpdateLongDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateLongDescription</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeProductUserDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>} {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderProductUserView() ;
		else if (this.state.command==="Create")
			return this.renderProductUserCreate() ;
		else if (this.state.command==="Update")
			return this.renderProductUserUpdate() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderProductUserUpdateLongDescription() ;
		else if (this.state.command==="Delete")
			return this.renderProductUserDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.productUserEntityList?.map(productUserEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={productUserEntity.productUserEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(productUserEntity.productUserEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderProductUserView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>View ProductUser</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Subscriber</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.productUserEntity.subscriber}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Rating</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.productUserEntity.rating}</div>
				</div>
				<p>{this.state.longDescription}</p>
			</div>
		) ;
	}
	renderProductUserCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create ProductUser</div>
				<form onSubmit={(event)=>{this.executeProductUserCreate(event);}}>
				<div className="editor_field fields"><Editor id="ProductUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeProductUserCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/productuser/create",form).then(response=>{this.zoomin(response.data.productUserEntityId)}) ;
	}
	renderProductUserUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeProductUserUpdate(event)}}>
				<div className="editor_field fields"><Editor id="ProductUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeProductUserUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('productUserEntityId',this.state.productUserEntity.productUserEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/productuser/update",form).then(response=>{this.zoomin(response.data.productUserEntityId)}) ;
		Axios.post(getPrefix()+"/app/productuser/updatelongdescription",form) ;
	}
	renderProductUserUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeProductUserUpdateLongDescription(event)}}>
				<div className="editor_field fields"><Editor id="ProductUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeProductUserUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('productUserEntityId',this.state.productUserEntity.productUserEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/productuser/updatelongdescription/",form).then(response=>{this.zoomin(response.data.productUserEntityId)}) ;
	}
	renderProductUserDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this ProductUser?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeProductUserDelete (event)
	{
		Axios.get(getPrefix()+"/app/productuser/delete?sessionToken="+getSession().sessionToken+"&productUserEntityId="+this.state.productUserEntity.productUserEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class RecipeEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			recipeEntity:{},
			recipeEntityList:[],
			sessionRecipeUserEntity:{},
			shortDescription:null,
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (recipeEntityId)
	{
		if (!recipeEntityId) recipeEntityId = this.state.recipeEntity.recipeEntityId ;
		Axios.get(getPrefix()+"/app/recipe/view?sessionToken="+getSessionToken()+"&recipeEntityId="+recipeEntityId,null)
			.then(response=>{this.setState({command:"View",recipeEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/recipeuser/view?sessionToken="+getSessionToken()+"&recipeEntityId="+recipeEntityId+"&userEntityId="+getSessionUserEntityId(),null)
			.then(response=>{this.setState({RecipeUserEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/recipe/textshortdescription?sessionToken="+getSessionToken()+"&recipeEntityId="+recipeEntityId,null)
			.then(response=>{this.setState({shortDescription:response.data});}) ;
		Axios.get(getPrefix()+"/app/recipe/textlongdescription?sessionToken="+getSessionToken()+"&recipeEntityId="+recipeEntityId,null)
			.then(response=>{this.setState({longDescription:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/recipe/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",recipeEntityList:response.data,recipeEntity:{},sessionRecipeUserEntity:{}});}) ;
		else if (commandList==="ListByLabel")
			Axios.get(getPrefix()+"/app/recipe/listbylabel?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByLabel",recipeEntityList:response.data,recipeEntity:{},sessionRecipeUserEntity:{}});}) ;
		else if (commandList==="ListByCategry")
			Axios.get(getPrefix()+"/app/recipe/listbycategry?sessionToken="+getSessionToken()+"&page="+this.page+"&categoryEntityId="+props.categoryEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByCategry",recipeEntityList:response.data,recipeEntity:{},sessionRecipeUserEntity:{}});}) ;
		else if (commandList==="ListByCompany")
			Axios.get(getPrefix()+"/app/recipe/listbycompany?sessionToken="+getSessionToken()+"&page="+this.page+"&companyEntityId="+props.companyEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByCompany",recipeEntityList:response.data,recipeEntity:{},sessionRecipeUserEntity:{}});}) ;
		else if (commandList==="ListUnapproved")
			Axios.get(getPrefix()+"/app/recipe/listunapproved?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"ListUnapproved",recipeEntityList:response.data,recipeEntity:{},sessionRecipeUserEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/recipe/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",recipeEntityList:response.data,recipeEntity:{},sessionRecipeUserEntity:{}});}) ;
	}
	editorPermission ()
	{
		return (false) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.recipeEntity.recipeEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{true&&<li><button onClick={()=>{this.zoomout("ListByLabel");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByLabel</span></button></li>}
												{true&&<li><button onClick={()=>{this.zoomout("ListByCategry");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByCategry</span></button></li>}
												{true&&<li><button onClick={()=>{this.zoomout("ListByCompany");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByCompany</span></button></li>}
												{true&&<li><button onClick={()=>{this.zoomout("ListUnapproved");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListUnapproved</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeRecipeView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeRecipeCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeRecipeUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeRecipeUpdateShortDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateShortDescription</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeRecipeUpdateLongDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateLongDescription</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeRecipeUpdateImage();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateImage</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeRecipeUploadImage();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadImage</span></button></li>}
												{(this.editorPermission())&&<li><button onClick={()=>{this.executeRecipeDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
												{(this.editorPermission())&&!this.state.recipeEntity.approveDate&&<li><button onClick={()=>{this.executeRecipeApprove();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Approve</span></button></li>}
												{(this.editorPermission())&&this.state.recipeEntity.approveDate&&<li><button onClick={()=>{this.executeRecipeUnapprove();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Unapprove</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {<button className="menu-action" onClick={()=>{this.zoomout("ListByLabel")}}>ListByLabel</button>} {<button className="menu-action" onClick={()=>{this.zoomout("ListUnapproved")}}>ListUnapproved</button>} {(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderRecipeView() ;
		else if (this.state.command==="Create")
			return this.renderRecipeCreate() ;
		else if (this.state.command==="Update")
			return this.renderRecipeUpdate() ;
		else if (this.state.command==="UpdateShortDescription")
			return this.renderRecipeUpdateShortDescription() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderRecipeUpdateLongDescription() ;
		else if (this.state.command==="UpdateImage")
			return this.renderRecipeUpdateImage() ;
		else if (this.state.command==="UploadImage")
			return this.renderRecipeUploadImage() ;
		else if (this.state.command==="Delete")
			return this.renderRecipeDelete() ;
		else if (this.state.command==="Approve")
			return this.renderRecipeApprove() ;
		else if (this.state.command==="Unapprove")
			return this.renderRecipeUnapprove() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.recipeEntityList?.map(recipeEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={recipeEntity.recipeEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div onClick={()=>{this.zoomin(recipeEntity.recipeEntityId);}} className='list-item-image sm:w-[120px] sm:h-[120px] flex items-center justify-center'>
										<img src={getPrefix()+"/app/recipe/imageimage?recipeEntityId=${recipeEntity.recipeEntityId}"} alt={recipeEntity.label}/>									</div>
									<div className='list-item-body flex flex-col space-y-2'>
										<span onClick={()=>{this.zoomin(recipeEntity.recipeEntityId);}}>{recipeEntity.label}</span>
									</div>
									<div onClick={()=>{this.zoomin(recipeEntity.recipeEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderRecipeView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>{this.state.recipeEntity.label}</div>
				<img className="image" alt='{recipeEntity.label}' src={getPrefix()+`/app/recipe/imageimage?recipeEntityId=${this.state.recipeEntity.recipeEntityId}`}/>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.recipeEntity.label}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Approve Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.recipeEntity.approveDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Reject Date</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.recipeEntity.rejectDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Rating Total</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.recipeEntity.ratingTotal}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Ratiing Count</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.recipeEntity.ratingCount}</div>
				</div>
				<p>{this.state.shortDescription}</p>
				<p>{this.state.longDescription}</p>
			</div>
		) ;
	}
	renderRecipeCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create Recipe</div>
				<form onSubmit={(event)=>{this.executeRecipeCreate(event);}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='RecipeEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter label...'/>
				</div>
				<textarea id="RecipeEntityShortDescription" name="shortDescription" className="text_area fields" placeholder="Enter shortDescription..." rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="RecipeEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeRecipeCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('label',document.getElementById("RecipeEntityLabel").value) ;
		form.append('shortDescription',document.getElementById("RecipeEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/recipe/create",form).then(response=>{this.zoomin(response.data.recipeEntityId)}) ;
	}
	renderRecipeUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeRecipeUpdate(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>label</label>
					<input type='text' id='RecipeEntityLabel' name='label' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.recipeEntity.label}/>
				</div>
				<textarea id="RecipeEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="RecipeEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeRecipeUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('recipeEntityId',this.state.recipeEntity.recipeEntityId) ;
		form.append('label',document.getElementById("RecipeEntityLabel").value) ;
		form.append('shortDescription',document.getElementById("RecipeEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/recipe/update",form).then(response=>{this.zoomin(response.data.recipeEntityId)}) ;
		Axios.post(getPrefix()+"/app/recipe/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/recipe/updatelongdescription",form) ;
	}
	renderRecipeUpdateShortDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeRecipeUpdateShortDescription(event)}}>
				<textarea id="RecipeEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeRecipeUpdateShortDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('recipeEntityId',this.state.recipeEntity.recipeEntityId) ;
		form.append('shortDescription',document.getElementById("RecipeEntityShortDescription").value) ;
		Axios.post(getPrefix()+"/app/recipe/updateshortdescription/",form).then(response=>{this.zoomin(response.data.recipeEntityId)}) ;
	}
	renderRecipeUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeRecipeUpdateLongDescription(event)}}>
				<div className="editor_field fields"><Editor id="RecipeEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeRecipeUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('recipeEntityId',this.state.recipeEntity.recipeEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/recipe/updatelongdescription/",form).then(response=>{this.zoomin(response.data.recipeEntityId)}) ;
	}
	renderRecipeUpdateImage ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeRecipeUpdateImage(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Label</label>
					<input type='text' id='RecipeEntityImageLabel' name='imageLabel' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.recipeEntity.imageLabel}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Name</label>
					<input type='text' id='RecipeEntityImageName' name='imageName' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.recipeEntity.imageName}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Type</label>
					<input type='text' id='RecipeEntityImageType' name='imageType' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.recipeEntity.imageType}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Url</label>
					<input type='text' id='RecipeEntityImageUrl' name='imageUrl' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.recipeEntity.imageUrl}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Credit</label>
					<input type='text' id='RecipeEntityImageCredit' name='imageCredit' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.recipeEntity.imageCredit}/>
				</div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeRecipeUpdateImage (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('recipeEntityId',this.state.recipeEntity.recipeEntityId) ;
		form.append('label',document.getElementById("RecipeEntityLabel").value) ;
		form.append('shortDescription',document.getElementById("RecipeEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/recipe/update",form).then(response=>{this.zoomin(response.data.recipeEntityId)}) ;
		Axios.post(getPrefix()+"/app/recipe/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/recipe/updatelongdescription",form) ;
	}
	renderRecipeUploadImage ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeRecipeUploadImage(event)}}>
			<input type="file" accept="image/*" id="myFile" name="image" onChange={(event)=>{this.executeRecipeUploadImage(event)}}/>
			<input className="upload_image_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeRecipeUploadImage (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('recipeEntityId',this.state.recipeEntity.recipeEntityId) ;
		Axios.post(getPrefix()+"/app/recipe/uploadimage",form)
			.then(response=>{this.zoomin(this.state.recipeEntity.recipeEntityId)}) ;
	}
	renderRecipeDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Recipe?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeRecipeDelete (event)
	{
		Axios.get(getPrefix()+"/app/recipe/delete?sessionToken="+getSession().sessionToken+"&recipeEntityId="+this.state.recipeEntity.recipeEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	executeRecipeApprove (event)
	{
		Axios.get(getPrefix()+"/app/recipe/approve?sessionToken="+getSession().sessionToken+"&recipeEntityId="+this.state.recipeEntity.recipeEntityId,null)
			.then(response=>{this.zoomin(this.state.recipeEntity.recipeEntityId)}) ;
	}
	executeRecipeUnapprove (event)
	{
		Axios.get(getPrefix()+"/app/recipe/unapprove?sessionToken="+getSession().sessionToken+"&recipeEntityId="+this.state.recipeEntity.recipeEntityId,null)
			.then(response=>{this.zoomin(this.state.recipeEntity.recipeEntityId)}) ;
	}
}

class RecipeUserEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			recipeUserEntity:{},
			recipeUserEntityList:[],
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (recipeUserEntityId)
	{
		if (!recipeUserEntityId) recipeUserEntityId = this.state.recipeUserEntity.recipeUserEntityId ;
		Axios.get(getPrefix()+"/app/recipeuser/view?sessionToken="+getSessionToken()+"&recipeUserEntityId="+recipeUserEntityId,null)
			.then(response=>{this.setState({command:"View",recipeUserEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/recipeuser/textlongdescription?sessionToken="+getSessionToken()+"&recipeUserEntityId="+recipeUserEntityId,null)
			.then(response=>{this.setState({longDescription:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/recipeuser/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",recipeUserEntityList:response.data,recipeUserEntity:{}});}) ;
		else if (commandList==="ListByRecipe")
			Axios.get(getPrefix()+"/app/recipeuser/listbyrecipe?sessionToken="+getSessionToken()+"&page="+this.page+"&recipeEntityId="+props.recipeEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByRecipe",recipeUserEntityList:response.data,recipeUserEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/recipeuser/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",recipeUserEntityList:response.data,recipeUserEntity:{}});}) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.recipeUserEntity.recipeUserEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout("ListByRecipe");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByRecipe</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeRecipeUserView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeRecipeUserCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeRecipeUserUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeRecipeUserUpdateLongDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateLongDescription</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeRecipeUserDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
												{true&&!this.state.recipeUserEntity.subscribeDate&&<li><button onClick={()=>{this.executeRecipeUserSubscribe();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Subscribe</span></button></li>}
												{true&&this.state.recipeUserEntity.subscribeDate&&<li><button onClick={()=>{this.executeRecipeUserUnsubscribe();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Unsubscribe</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeRecipeUserRate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Rate</span></button></li>}
												{true&&<li><button onClick={()=>{this.executeRecipeUserComment();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Comment</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>} {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderRecipeUserView() ;
		else if (this.state.command==="Create")
			return this.renderRecipeUserCreate() ;
		else if (this.state.command==="Update")
			return this.renderRecipeUserUpdate() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderRecipeUserUpdateLongDescription() ;
		else if (this.state.command==="Delete")
			return this.renderRecipeUserDelete() ;
		else if (this.state.command==="Subscribe")
			return this.renderRecipeUserSubscribe() ;
		else if (this.state.command==="Unsubscribe")
			return this.renderRecipeUserUnsubscribe() ;
		else if (this.state.command==="Rate")
			return this.renderRecipeUserRate() ;
		else if (this.state.command==="Comment")
			return this.renderRecipeUserComment() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.recipeUserEntityList?.map(recipeUserEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={recipeUserEntity.recipeUserEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(recipeUserEntity.recipeUserEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderRecipeUserView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>View RecipeUser</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Subscriber</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.recipeUserEntity.subscriber}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'> Rating</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.recipeUserEntity.rating}</div>
				</div>
				<p>{this.state.longDescription}</p>
			</div>
		) ;
	}
	renderRecipeUserCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create RecipeUser</div>
				<form onSubmit={(event)=>{this.executeRecipeUserCreate(event);}}>
				<div className="editor_field fields"><Editor id="RecipeUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeRecipeUserCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/recipeuser/create",form).then(response=>{this.zoomin(response.data.recipeUserEntityId)}) ;
	}
	renderRecipeUserUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeRecipeUserUpdate(event)}}>
				<div className="editor_field fields"><Editor id="RecipeUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeRecipeUserUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('recipeUserEntityId',this.state.recipeUserEntity.recipeUserEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/recipeuser/update",form).then(response=>{this.zoomin(response.data.recipeUserEntityId)}) ;
		Axios.post(getPrefix()+"/app/recipeuser/updatelongdescription",form) ;
	}
	renderRecipeUserUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeRecipeUserUpdateLongDescription(event)}}>
				<div className="editor_field fields"><Editor id="RecipeUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeRecipeUserUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('recipeUserEntityId',this.state.recipeUserEntity.recipeUserEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/recipeuser/updatelongdescription/",form).then(response=>{this.zoomin(response.data.recipeUserEntityId)}) ;
	}
	renderRecipeUserDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this RecipeUser?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeRecipeUserDelete (event)
	{
		Axios.get(getPrefix()+"/app/recipeuser/delete?sessionToken="+getSession().sessionToken+"&recipeUserEntityId="+this.state.recipeUserEntity.recipeUserEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	executeRecipeUserSubscribe (event)
	{
		Axios.get(getPrefix()+"/app/recipeuser/subscribe?sessionToken="+getSession().sessionToken+"&recipeUserEntityId="+this.state.recipeUserEntity.recipeUserEntityId,null)
			.then(response=>{this.zoomin(this.state.recipeUserEntity.recipeUserEntityId)}) ;
	}
	executeRecipeUserUnsubscribe (event)
	{
		Axios.get(getPrefix()+"/app/recipeuser/unsubscribe?sessionToken="+getSession().sessionToken+"&recipeUserEntityId="+this.state.recipeUserEntity.recipeUserEntityId,null)
			.then(response=>{this.zoomin(this.state.recipeUserEntity.recipeUserEntityId)}) ;
	}
	renderRecipeUserRate ()
	{
		//Rate
	}
	executeRecipeUserRate (event)
	{
		Axios.get(getPrefix()+"/app/recipeuser/rate?sessionToken="+getSession().sessionToken+"&recipeUserEntityId="+this.state.recipeUserEntity.recipeUserEntityId,null)
			.then(response=>{this.zoomin(this.state.recipeUserEntity.recipeUserEntityId)}) ;
	}
	renderRecipeUserComment ()
	{
		//Comment
	}
	executeRecipeUserComment (event)
	{
		Axios.get(getPrefix()+"/app/recipeuser/comment?sessionToken="+getSession().sessionToken+"&recipeUserEntityId="+this.state.recipeUserEntity.recipeUserEntityId,null)
			.then(response=>{this.zoomin(this.state.recipeUserEntity.recipeUserEntityId)}) ;
	}
}

class ScriptEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			scriptEntity:{},
			scriptEntityList:[],
			body:null,
		} ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (scriptEntityId)
	{
		if (!scriptEntityId) scriptEntityId = this.state.scriptEntity.scriptEntityId ;
		Axios.get(getPrefix()+"/app/script/view?sessionToken="+getSessionToken()+"&scriptEntityId="+scriptEntityId,null)
			.then(response=>{this.setState({command:"View",scriptEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/script/textbody?sessionToken="+getSessionToken()+"&scriptEntityId="+scriptEntityId,null)
			.then(response=>{this.setState({body:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/script/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",scriptEntityList:response.data,scriptEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/script/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",scriptEntityList:response.data,scriptEntity:{}});}) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.scriptEntity.scriptEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeScriptView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeScriptCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeScriptUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeScriptUploadBody();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadBody</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeScriptDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>} {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderScriptView() ;
		else if (this.state.command==="Create")
			return this.renderScriptCreate() ;
		else if (this.state.command==="Update")
			return this.renderScriptUpdate() ;
		else if (this.state.command==="UploadBody")
			return this.renderScriptUploadBody() ;
		else if (this.state.command==="Delete")
			return this.renderScriptDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.scriptEntityList?.map(scriptEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={scriptEntity.scriptEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(scriptEntity.scriptEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderScriptView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>View Script</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>name</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.scriptEntity.name}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>url</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.scriptEntity.url}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>showOrder</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.scriptEntity.showOrder}</div>
				</div>
				<p>{this.state.body}</p>
			</div>
		) ;
	}
	renderScriptCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create Script</div>
				<form onSubmit={(event)=>{this.executeScriptCreate(event);}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>name</label>
					<input type='text' id='ScriptEntityName' name='name' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter name...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>url</label>
					<input type='text' id='ScriptEntityUrl' name='url' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter url...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>showOrder</label>
					<input type='text' id='ScriptEntityShowOrder' name='showOrder' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter showOrder...'/>
				</div>
				<textarea id="ScriptEntityBody" name="body" className="text_area fields" placeholder="Enter body..." rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeScriptCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('name',document.getElementById("ScriptEntityName").value) ;
		form.append('url',document.getElementById("ScriptEntityUrl").value) ;
		form.append('showOrder',document.getElementById("ScriptEntityShowOrder").value) ;
		form.append('body',document.getElementById("ScriptEntityBody").value) ;
		Axios.post(getPrefix()+"/app/script/create",form).then(response=>{this.zoomin(response.data.scriptEntityId)}) ;
	}
	renderScriptUpdate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeScriptUpdate(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>name</label>
					<input type='text' id='ScriptEntityName' name='name' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.scriptEntity.name}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>url</label>
					<input type='text' id='ScriptEntityUrl' name='url' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.scriptEntity.url}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>showOrder</label>
					<input type='text' id='ScriptEntityShowOrder' name='showOrder' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.scriptEntity.showOrder}/>
				</div>
				<textarea id="ScriptEntityBody" name="body" className="text_area fields" defaultValue={this.state.body?this.state.body:""} rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeScriptUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('scriptEntityId',this.state.scriptEntity.scriptEntityId) ;
		form.append('name',document.getElementById("ScriptEntityName").value) ;
		form.append('url',document.getElementById("ScriptEntityUrl").value) ;
		form.append('showOrder',document.getElementById("ScriptEntityShowOrder").value) ;
		form.append('body',document.getElementById("ScriptEntityBody").value) ;
		Axios.post(getPrefix()+"/app/script/update",form).then(response=>{this.zoomin(response.data.scriptEntityId)}) ;
		Axios.post(getPrefix()+"/app/script/updatebody",form) ;
	}
	renderScriptDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Script?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeScriptDelete (event)
	{
		Axios.get(getPrefix()+"/app/script/delete?sessionToken="+getSession().sessionToken+"&scriptEntityId="+this.state.scriptEntity.scriptEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class StyleEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			styleEntity:{},
			styleEntityList:[],
			body:null,
		} ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (styleEntityId)
	{
		if (!styleEntityId) styleEntityId = this.state.styleEntity.styleEntityId ;
		Axios.get(getPrefix()+"/app/style/view?sessionToken="+getSessionToken()+"&styleEntityId="+styleEntityId,null)
			.then(response=>{this.setState({command:"View",styleEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/style/textbody?sessionToken="+getSessionToken()+"&styleEntityId="+styleEntityId,null)
			.then(response=>{this.setState({body:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/style/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",styleEntityList:response.data,styleEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/style/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",styleEntityList:response.data,styleEntity:{}});}) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.styleEntity.styleEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeStyleView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeStyleCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeStyleUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeStyleUploadBody();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadBody</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeStyleDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>} {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderStyleView() ;
		else if (this.state.command==="Create")
			return this.renderStyleCreate() ;
		else if (this.state.command==="Update")
			return this.renderStyleUpdate() ;
		else if (this.state.command==="UploadBody")
			return this.renderStyleUploadBody() ;
		else if (this.state.command==="Delete")
			return this.renderStyleDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.styleEntityList?.map(styleEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={styleEntity.styleEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(styleEntity.styleEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderStyleView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>View Style</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>name</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.styleEntity.name}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>url</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.styleEntity.url}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>showOrder</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.styleEntity.showOrder}</div>
				</div>
				<p>{this.state.body}</p>
			</div>
		) ;
	}
	renderStyleCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create Style</div>
				<form onSubmit={(event)=>{this.executeStyleCreate(event);}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>name</label>
					<input type='text' id='StyleEntityName' name='name' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter name...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>url</label>
					<input type='text' id='StyleEntityUrl' name='url' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter url...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>showOrder</label>
					<input type='text' id='StyleEntityShowOrder' name='showOrder' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter showOrder...'/>
				</div>
				<textarea id="StyleEntityBody" name="body" className="text_area fields" placeholder="Enter body..." rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeStyleCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('name',document.getElementById("StyleEntityName").value) ;
		form.append('url',document.getElementById("StyleEntityUrl").value) ;
		form.append('showOrder',document.getElementById("StyleEntityShowOrder").value) ;
		form.append('body',document.getElementById("StyleEntityBody").value) ;
		Axios.post(getPrefix()+"/app/style/create",form).then(response=>{this.zoomin(response.data.styleEntityId)}) ;
	}
	renderStyleUpdate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeStyleUpdate(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>name</label>
					<input type='text' id='StyleEntityName' name='name' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.styleEntity.name}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>url</label>
					<input type='text' id='StyleEntityUrl' name='url' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.styleEntity.url}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>showOrder</label>
					<input type='text' id='StyleEntityShowOrder' name='showOrder' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.styleEntity.showOrder}/>
				</div>
				<textarea id="StyleEntityBody" name="body" className="text_area fields" defaultValue={this.state.body?this.state.body:""} rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeStyleUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('styleEntityId',this.state.styleEntity.styleEntityId) ;
		form.append('name',document.getElementById("StyleEntityName").value) ;
		form.append('url',document.getElementById("StyleEntityUrl").value) ;
		form.append('showOrder',document.getElementById("StyleEntityShowOrder").value) ;
		form.append('body',document.getElementById("StyleEntityBody").value) ;
		Axios.post(getPrefix()+"/app/style/update",form).then(response=>{this.zoomin(response.data.styleEntityId)}) ;
		Axios.post(getPrefix()+"/app/style/updatebody",form) ;
	}
	renderStyleDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Style?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeStyleDelete (event)
	{
		Axios.get(getPrefix()+"/app/style/delete?sessionToken="+getSession().sessionToken+"&styleEntityId="+this.state.styleEntity.styleEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class UserEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			userEntity:{},
			userEntityList:[],
			shortDescription:null,
			longDescription:null,
			notifications:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (userEntityId)
	{
		if (!userEntityId) userEntityId = this.state.userEntity.userEntityId ;
		Axios.get(getPrefix()+"/app/user/view?sessionToken="+getSessionToken()+"&userEntityId="+userEntityId,null)
			.then(response=>{this.setState({command:"View",userEntity:response.data});}) ;
		Axios.get(getPrefix()+"/app/user/textshortdescription?sessionToken="+getSessionToken()+"&userEntityId="+userEntityId,null)
			.then(response=>{this.setState({shortDescription:response.data});}) ;
		Axios.get(getPrefix()+"/app/user/textlongdescription?sessionToken="+getSessionToken()+"&userEntityId="+userEntityId,null)
			.then(response=>{this.setState({longDescription:response.data});}) ;
		Axios.get(getPrefix()+"/app/user/textnotifications?sessionToken="+getSessionToken()+"&userEntityId="+userEntityId,null)
			.then(response=>{this.setState({notifications:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/user/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",userEntityList:response.data,userEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/user/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",userEntityList:response.data,userEntity:{}});}) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.userEntity.userEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeUserViewAdmin();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ViewAdmin</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeUserUpdate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Update</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeUserUpdateShortDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateShortDescription</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeUserUpdateLongDescription();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateLongDescription</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeUserUpdateImage();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdateImage</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeUserUploadImage();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UploadImage</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeUserDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.command("UpdatePassword");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>UpdatePassword</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeUserView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.command("ListCompany");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListCompany</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="ViewAdmin")
			return this.renderUserViewAdmin() ;
		else if (this.state.command==="Update")
			return this.renderUserUpdate() ;
		else if (this.state.command==="UpdateShortDescription")
			return this.renderUserUpdateShortDescription() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderUserUpdateLongDescription() ;
		else if (this.state.command==="UpdateImage")
			return this.renderUserUpdateImage() ;
		else if (this.state.command==="UploadImage")
			return this.renderUserUploadImage() ;
		else if (this.state.command==="Delete")
			return this.renderUserDelete() ;
		else if (this.state.command==="View")
			return this.renderUserView() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.userEntityList?.map(userEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={userEntity.userEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div onClick={()=>{this.zoomin(userEntity.userEntityId);}} className='list-item-image sm:w-[120px] sm:h-[120px] flex items-center justify-center'>
										<img src={getPrefix()+"/app/user/imageimage?userEntityId=${userEntity.userEntityId}"} alt={userEntity.label}/>									</div>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(userEntity.userEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderUserViewAdmin ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>View User</div>
				<img className="image" alt='{userEntity.label}' src={getPrefix()+`/app/user/imageimage?userEntityId=${this.state.userEntity.userEntityId}`}/>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>passcode</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.passcode}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>origin</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.origin}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>firstName</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.firstName}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>lastName</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.lastName}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>phone</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.phone}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>url</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.url}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>timezone</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.timezone}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>useHtml</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.useHtml}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>notificationFrequency</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.notificationFrequency}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>linkedinUserId</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.linkedinUserId}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>facebookUserId</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.facebookUserId}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>gmailUserId</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.gmailUserId}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>skypeUserId</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.skypeUserId}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>title</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.title}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>showOrder</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.showOrder}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>administrator</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.administrator}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>editor</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.editor}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>manager</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.manager}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>quitDate</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.quitDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>reminders</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.reminders}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Address</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.address1}</div>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.address2}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>City</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.city}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>State</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.state}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Postal</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.postal}</div>
				</div>
				<p>{this.state.shortDescription}</p>
				<p>{this.state.longDescription}</p>
				<p>{this.state.notifications}</p>
			</div>
		) ;
	}
	renderUserUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUserUpdate(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>passcode</label>
					<input type='text' id='UserEntityPasscode' name='passcode' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.passcode}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>origin</label>
					<input type='text' id='UserEntityOrigin' name='origin' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.origin}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>firstName</label>
					<input type='text' id='UserEntityFirstName' name='firstName' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.firstName}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>lastName</label>
					<input type='text' id='UserEntityLastName' name='lastName' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.lastName}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>phone</label>
					<input type='text' id='UserEntityPhone' name='phone' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.phone}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>url</label>
					<input type='text' id='UserEntityUrl' name='url' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.url}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>timezone</label>
					<input type='text' id='UserEntityTimezone' name='timezone' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.timezone}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>useHtml</label>
					<input type='text' id='UserEntityUseHtml' name='useHtml' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.useHtml}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>notificationFrequency</label>
					<input type='text' id='UserEntityNotificationFrequency' name='notificationFrequency' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.notificationFrequency}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>linkedinUserId</label>
					<input type='text' id='UserEntityLinkedinUserId' name='linkedinUserId' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.linkedinUserId}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>facebookUserId</label>
					<input type='text' id='UserEntityFacebookUserId' name='facebookUserId' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.facebookUserId}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>gmailUserId</label>
					<input type='text' id='UserEntityGmailUserId' name='gmailUserId' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.gmailUserId}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>skypeUserId</label>
					<input type='text' id='UserEntitySkypeUserId' name='skypeUserId' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.skypeUserId}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>title</label>
					<input type='text' id='UserEntityTitle' name='title' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.title}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>showOrder</label>
					<input type='text' id='UserEntityShowOrder' name='showOrder' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.showOrder}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>administrator</label>
					<input type='text' id='UserEntityAdministrator' name='administrator' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.administrator}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>editor</label>
					<input type='text' id='UserEntityEditor' name='editor' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.editor}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>manager</label>
					<input type='text' id='UserEntityManager' name='manager' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.manager}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>quitDate</label>
					<input type='text' id='UserEntityQuitDate' name='quitDate' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.quitDate}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>reminders</label>
					<input type='text' id='UserEntityReminders' name='reminders' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.reminders}/>
				</div>
				<textarea id="UserEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="UserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<textarea id="UserEntityNotifications" name="notifications" className="text_area fields" defaultValue={this.state.notifications?this.state.notifications:""} rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeUserUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('userEntityId',this.state.userEntity.userEntityId) ;
		form.append('passcode',document.getElementById("UserEntityPasscode").value) ;
		form.append('origin',document.getElementById("UserEntityOrigin").value) ;
		form.append('firstName',document.getElementById("UserEntityFirstName").value) ;
		form.append('lastName',document.getElementById("UserEntityLastName").value) ;
		form.append('phone',document.getElementById("UserEntityPhone").value) ;
		form.append('url',document.getElementById("UserEntityUrl").value) ;
		form.append('timezone',document.getElementById("UserEntityTimezone").value) ;
		form.append('useHtml',document.getElementById("UserEntityUseHtml").value) ;
		form.append('notificationFrequency',document.getElementById("UserEntityNotificationFrequency").value) ;
		form.append('linkedinUserId',document.getElementById("UserEntityLinkedinUserId").value) ;
		form.append('facebookUserId',document.getElementById("UserEntityFacebookUserId").value) ;
		form.append('gmailUserId',document.getElementById("UserEntityGmailUserId").value) ;
		form.append('skypeUserId',document.getElementById("UserEntitySkypeUserId").value) ;
		form.append('title',document.getElementById("UserEntityTitle").value) ;
		form.append('showOrder',document.getElementById("UserEntityShowOrder").value) ;
		form.append('administrator',document.getElementById("UserEntityAdministrator").value) ;
		form.append('editor',document.getElementById("UserEntityEditor").value) ;
		form.append('manager',document.getElementById("UserEntityManager").value) ;
		form.append('quitDate',document.getElementById("UserEntityQuitDate").value) ;
		form.append('reminders',document.getElementById("UserEntityReminders").value) ;
		form.append('shortDescription',document.getElementById("UserEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		form.append('notifications',document.getElementById("UserEntityNotifications").value) ;
		Axios.post(getPrefix()+"/app/user/update",form).then(response=>{this.zoomin(response.data.userEntityId)}) ;
		Axios.post(getPrefix()+"/app/user/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/user/updatelongdescription",form) ;
		Axios.post(getPrefix()+"/app/user/updatenotifications",form) ;
	}
	renderUserUpdateShortDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUserUpdateShortDescription(event)}}>
				<textarea id="UserEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeUserUpdateShortDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('userEntityId',this.state.userEntity.userEntityId) ;
		form.append('shortDescription',document.getElementById("UserEntityShortDescription").value) ;
		Axios.post(getPrefix()+"/app/user/updateshortdescription/",form).then(response=>{this.zoomin(response.data.userEntityId)}) ;
	}
	renderUserUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUserUpdateLongDescription(event)}}>
				<div className="editor_field fields"><Editor id="UserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeUserUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('userEntityId',this.state.userEntity.userEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/user/updatelongdescription/",form).then(response=>{this.zoomin(response.data.userEntityId)}) ;
	}
	renderUserUpdateImage ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUserUpdateImage(event)}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Label</label>
					<input type='text' id='UserEntityImageLabel' name='imageLabel' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.imageLabel}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Name</label>
					<input type='text' id='UserEntityImageName' name='imageName' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.imageName}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Type</label>
					<input type='text' id='UserEntityImageType' name='imageType' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.imageType}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Url</label>
					<input type='text' id='UserEntityImageUrl' name='imageUrl' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.imageUrl}/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Credit</label>
					<input type='text' id='UserEntityImageCredit' name='imageCredit' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' defaultValue={this.state.userEntity.imageCredit}/>
				</div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeUserUpdateImage (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('userEntityId',this.state.userEntity.userEntityId) ;
		form.append('passcode',document.getElementById("UserEntityPasscode").value) ;
		form.append('origin',document.getElementById("UserEntityOrigin").value) ;
		form.append('firstName',document.getElementById("UserEntityFirstName").value) ;
		form.append('lastName',document.getElementById("UserEntityLastName").value) ;
		form.append('phone',document.getElementById("UserEntityPhone").value) ;
		form.append('url',document.getElementById("UserEntityUrl").value) ;
		form.append('timezone',document.getElementById("UserEntityTimezone").value) ;
		form.append('useHtml',document.getElementById("UserEntityUseHtml").value) ;
		form.append('notificationFrequency',document.getElementById("UserEntityNotificationFrequency").value) ;
		form.append('linkedinUserId',document.getElementById("UserEntityLinkedinUserId").value) ;
		form.append('facebookUserId',document.getElementById("UserEntityFacebookUserId").value) ;
		form.append('gmailUserId',document.getElementById("UserEntityGmailUserId").value) ;
		form.append('skypeUserId',document.getElementById("UserEntitySkypeUserId").value) ;
		form.append('title',document.getElementById("UserEntityTitle").value) ;
		form.append('showOrder',document.getElementById("UserEntityShowOrder").value) ;
		form.append('administrator',document.getElementById("UserEntityAdministrator").value) ;
		form.append('editor',document.getElementById("UserEntityEditor").value) ;
		form.append('manager',document.getElementById("UserEntityManager").value) ;
		form.append('quitDate',document.getElementById("UserEntityQuitDate").value) ;
		form.append('reminders',document.getElementById("UserEntityReminders").value) ;
		form.append('shortDescription',document.getElementById("UserEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		form.append('notifications',document.getElementById("UserEntityNotifications").value) ;
		Axios.post(getPrefix()+"/app/user/update",form).then(response=>{this.zoomin(response.data.userEntityId)}) ;
		Axios.post(getPrefix()+"/app/user/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/user/updatelongdescription",form) ;
		Axios.post(getPrefix()+"/app/user/updatenotifications",form) ;
	}
	renderUserUploadImage ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeUserUploadImage(event)}}>
			<input type="file" accept="image/*" id="myFile" name="image" onChange={(event)=>{this.executeUserUploadImage(event)}}/>
			<input className="upload_image_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeUserUploadImage (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('userEntityId',this.state.userEntity.userEntityId) ;
		Axios.post(getPrefix()+"/app/user/uploadimage",form)
			.then(response=>{this.zoomin(this.state.userEntity.userEntityId)}) ;
	}
	renderUserDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this User?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeUserDelete (event)
	{
		Axios.get(getPrefix()+"/app/user/delete?sessionToken="+getSession().sessionToken+"&userEntityId="+this.state.userEntity.userEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	renderUserUpdatePassword ()
	{
	}
	executeUserUpdatePassword (event)
	{
		Axios.get(getPrefix()+"/app/user/updatepassword?sessionToken="+getSession().sessionToken,null) ;
	}
	renderUserView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>View User</div>
				<img className="image" alt='{userEntity.label}' src={getPrefix()+`/app/user/imageimage?userEntityId=${this.state.userEntity.userEntityId}`}/>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>passcode</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.passcode}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>origin</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.origin}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>firstName</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.firstName}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>lastName</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.lastName}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>phone</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.phone}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>url</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.url}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>timezone</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.timezone}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>useHtml</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.useHtml}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>notificationFrequency</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.notificationFrequency}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>linkedinUserId</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.linkedinUserId}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>facebookUserId</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.facebookUserId}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>gmailUserId</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.gmailUserId}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>skypeUserId</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.skypeUserId}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>title</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.title}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>showOrder</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.showOrder}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>administrator</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.administrator}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>editor</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.editor}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>manager</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.manager}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>quitDate</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.quitDate}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>reminders</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.reminders}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Address</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.address1}</div>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.address2}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>City</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.city}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>State</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.state}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>Postal</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEntity.postal}</div>
				</div>
				<p>{this.state.shortDescription}</p>
				<p>{this.state.longDescription}</p>
				<p>{this.state.notifications}</p>
			</div>
		) ;
	}
	renderUserListCompany ()
	{
	}
	executeUserListCompany (event)
	{
		Axios.get(getPrefix()+"/app/user/listcompany?sessionToken="+getSession().sessionToken,null) ;
	}
}

class UserEmailEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			userEmailEntity:{},
			userEmailEntityList:[],
		} ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (userEmailEntityId)
	{
		if (!userEmailEntityId) userEmailEntityId = this.state.userEmailEntity.userEmailEntityId ;
		Axios.get(getPrefix()+"/app/useremail/view?sessionToken="+getSessionToken()+"&userEmailEntityId="+userEmailEntityId,null)
			.then(response=>{this.setState({command:"View",userEmailEntity:response.data});}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/useremail/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",userEmailEntityList:response.data,userEmailEntity:{}});}) ;
		else if (commandList==="ListAllAlpha")
			Axios.get(getPrefix()+"/app/useremail/listallalpha?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"ListAllAlpha",userEmailEntityList:response.data,userEmailEntity:{}});}) ;
		else if (commandList==="ListByUserAlpha")
			Axios.get(getPrefix()+"/app/useremail/listbyuseralpha?sessionToken="+getSessionToken()+"&page="+this.page+"&userEntityId="+props.userEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"ListByUserAlpha",userEmailEntityList:response.data,userEmailEntity:{}});}) ;
		else
			Axios.get(getPrefix()+"/app/useremail/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",userEmailEntityList:response.data,userEmailEntity:{}});}) ;
	}
	adminPermission ()
	{
		return (false) ;
	}
	menu ()
	{
		if (this.state.userEmailEntity.userEmailEntityId)
			return (
				<div className='black-btn w-[161px] h-[40px] flex justify-center items-center cursor-pointer'>
					<div className='dropdown-menu flex space-x-2 items-center'>
						<ul className='dropdown-menu flex xl:space-x-10 space-x-5'>
							<li className='relative'>
								<span className='flex items-center text-sm text-qwhitetext font-600 cursor-pointer'>
									<span>Actions</span>
									<span className='ml-1.5'>&#9660;</span>
								</span>
								<div className='dropdown-menu-sub-menu w-[220px] absolute left-0 top-[60px]'>
									<div className='w-full bg-white flex justify-between items-center'>
										<div className='w-full h-full p-5'>
											<ul className='flex flex-col space-y-2'>
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout(null);}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>List</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout("ListAllAlpha");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListAllAlpha</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.zoomout("ListByUserAlpha");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>ListByUserAlpha</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeUserEmailView();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>View</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeUserEmailCreate();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Create</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.executeUserEmailDelete();}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Delete</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.command("Search");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Search</span></button></li>}
												{true&&<li><button onClick={()=>{this.command("Validate");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Validate</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.command("Resend");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Resend</span></button></li>}
												{(this.adminPermission())&&<li><button onClick={()=>{this.command("Primary");}} className='menu-action'><span className='text-qgray text-sm font-400 border-b border-transparent hover:border-black hover:text-black'>Primary</span></button></li>}
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			) ;
		else
			return (
				<div className='menu-action'>
					<div>
					 {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>} {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListAllAlpha")}}>ListAllAlpha</button>} {(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.executeCreate()}}>Create</button>}
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderUserEmailView() ;
		else if (this.state.command==="Create")
			return this.renderUserEmailCreate() ;
		else if (this.state.command==="Delete")
			return this.renderUserEmailDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='list-wrapper w-full' id={this.id+"list"}>
				{this.menu()}
				<ul className='list-wrapper'>
					{this.state.userEmailEntityList?.map(userEmailEntity=>
						(
							<li className='list-item sm:flex justify-between items-center w-full py-[30px] border-b border-light-purple' key={userEmailEntity.userEmailEntityId}>
								<div className='list-item-main flex space-x-5 items-top mb-3 sm:mb-0'>
									<div className='list-item-body flex flex-col space-y-2'>
									</div>
									<div onClick={()=>{this.zoomin(userEmailEntity.userEmailEntityId);}} className='list-item-action'>
										<span>View</span>
									</div>
								</div>
							</li>
						))}
				</ul>
			</div>
		) ;
	}
	renderUserEmailView ()
	{
		return(
			<div className='view-wrapper' id={this.id+"view"}>
				{this.menu()}
				<div className='view-title'>View UserEmail</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>email</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEmailEntity.email}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>validationCode</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEmailEntity.validationCode}</div>
				</div>
				<div className='view-block w-full h-full'>
					<label className='view-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>validationDate</label>
					<div className='view-field-wrapper w-full h-full overflow-hidden relative'>{this.state.userEmailEntity.validationDate}</div>
				</div>
			</div>
		) ;
	}
	renderUserEmailCreate ()
	{
		return(
			<div className='update-wrapper'>
				{this.menu()}
				<div className='update-title'>Create UserEmail</div>
				<form onSubmit={(event)=>{this.executeUserEmailCreate(event);}}>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>email</label>
					<input type='text' id='UserEmailEntityEmail' name='email' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter email...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>validationCode</label>
					<input type='text' id='UserEmailEntityValidationCode' name='validationCode' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter validationCode...'/>
				</div>
				<div className='update-block w-full h-full'>
					<label className='update-field-label capitalize block mb-2 text-qgray text-[13px] font-normal'>validationDate</label>
					<input type='text' id='UserEmailEntityValidationDate' name='validationDate' className='update-field placeholder:text-sm text-sm px-6 text-dark-gray w-full h-full font-normal bg-white focus:ring-0 focus:outline-none' placeholder='Enter validationDate...'/>
				</div>
					<div className='action-area flex space-x-4 items-center'>
						<button onClick={(event)=>{this.command(null);}} className='text-sm text-qred font-semibold'>Cancel</button>
						<button className='w-[164px] h-[50px] bg-qblack text-white text-sm'>Save</button>
					</div>
				</form>
			</div>
		) ;
	}
	executeUserEmailCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSession().sessionToken) ;
		form.append('email',document.getElementById("UserEmailEntityEmail").value) ;
		form.append('validationCode',document.getElementById("UserEmailEntityValidationCode").value) ;
		form.append('validationDate',document.getElementById("UserEmailEntityValidationDate").value) ;
		Axios.post(getPrefix()+"/app/useremail/create",form).then(response=>{this.zoomin(response.data.userEmailEntityId)}) ;
	}
	renderUserEmailDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this UserEmail?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeUserEmailDelete (event)
	{
		Axios.get(getPrefix()+"/app/useremail/delete?sessionToken="+getSession().sessionToken+"&userEmailEntityId="+this.state.userEmailEntity.userEmailEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	renderUserEmailSearch ()
	{
	}
	executeUserEmailSearch (event)
	{
		Axios.get(getPrefix()+"/app/useremail/search?sessionToken="+getSession().sessionToken,null) ;
	}
	renderUserEmailValidate ()
	{
	}
	executeUserEmailValidate (event)
	{
		Axios.get(getPrefix()+"/app/useremail/validate?sessionToken="+getSession().sessionToken,null) ;
	}
	renderUserEmailResend ()
	{
	}
	executeUserEmailResend (event)
	{
		Axios.get(getPrefix()+"/app/useremail/resend?sessionToken="+getSession().sessionToken,null) ;
	}
	renderUserEmailPrimary ()
	{
	}
	executeUserEmailPrimary (event)
	{
		Axios.get(getPrefix()+"/app/useremail/primary?sessionToken="+getSession().sessionToken,null) ;
	}
}

class SearchComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
	}
	componentDidMount () {this.zoomout() ;}
	menu ()
	{
			return (
				<div className='menu-action'>
					<div>
					
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderSearchSearch ()
	{
	}
	executeSearchSearch (event)
	{
		Axios.get(getPrefix()+"/app/search/search?sessionToken="+getSession().sessionToken,null) ;
	}
}

class SessionComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
	}
	componentDidMount () {this.zoomout() ;}
	menu ()
	{
			return (
				<div className='menu-action'>
					<div>
					
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="Update")
			return this.renderSessionUpdate() ;
		else if (this.state.command==="UpdateShortDescription")
			return this.renderSessionUpdateShortDescription() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderSessionUpdateLongDescription() ;
		else if (this.state.command==="UpdateImage")
			return this.renderSessionUpdateImage() ;
		else if (this.state.command==="UploadImage")
			return this.renderSessionUploadImage() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderSessionUser ()
	{
	}
	executeSessionUser (event)
	{
		Axios.get(getPrefix()+"/app/session/user?sessionToken="+getSession().sessionToken,null) ;
	}
	renderSessionConfirm ()
	{
	}
	executeSessionConfirm (event)
	{
		Axios.get(getPrefix()+"/app/session/confirm?sessionToken="+getSession().sessionToken,null) ;
	}
	renderSessionSignin ()
	{
	}
	executeSessionSignin (event)
	{
		Axios.get(getPrefix()+"/app/session/signin?sessionToken="+getSession().sessionToken,null) ;
	}
	renderSessionSignout ()
	{
	}
	executeSessionSignout (event)
	{
		Axios.get(getPrefix()+"/app/session/signout?sessionToken="+getSession().sessionToken,null) ;
	}
	renderSessionUpdatePassword ()
	{
	}
	executeSessionUpdatePassword (event)
	{
		Axios.get(getPrefix()+"/app/session/updatepassword?sessionToken="+getSession().sessionToken,null) ;
	}
	renderSessionJoin ()
	{
	}
	executeSessionJoin (event)
	{
		Axios.get(getPrefix()+"/app/session/join?sessionToken="+getSession().sessionToken,null) ;
	}
	renderSessionQuit ()
	{
	}
	executeSessionQuit (event)
	{
		Axios.get(getPrefix()+"/app/session/quit?sessionToken="+getSession().sessionToken,null) ;
	}
	renderSessionUnquit ()
	{
	}
	executeSessionUnquit (event)
	{
		Axios.get(getPrefix()+"/app/session/unquit?sessionToken="+getSession().sessionToken,null) ;
	}
	renderSessionUpdate ()
	{
	}
	executeSessionUpdate (event)
	{
	}
	renderSessionUpdateShortDescription ()
	{
	}
	executeSessionUpdateShortDescription (event)
	{
	}
	renderSessionUpdateLongDescription ()
	{
	}
	executeSessionUpdateLongDescription (event)
	{
	}
	renderSessionUpdateImage ()
	{
	}
	executeSessionUpdateImage (event)
	{
	}
	renderSessionUploadImage ()
	{
	}
	executeSessionUploadImage (event)
	{
	}
	renderSessionViewUserEmail ()
	{
	}
	executeSessionViewUserEmail (event)
	{
		Axios.get(getPrefix()+"/app/session/viewuseremail?sessionToken="+getSession().sessionToken,null) ;
	}
	renderSessionCreateUserEmail ()
	{
	}
	executeSessionCreateUserEmail (event)
	{
		Axios.get(getPrefix()+"/app/session/createuseremail?sessionToken="+getSession().sessionToken,null) ;
	}
	renderSessionDeleteUserEmail ()
	{
	}
	executeSessionDeleteUserEmail (event)
	{
		Axios.get(getPrefix()+"/app/session/deleteuseremail?sessionToken="+getSession().sessionToken,null) ;
	}
	renderSessionValidateUserEmail ()
	{
	}
	executeSessionValidateUserEmail (event)
	{
		Axios.get(getPrefix()+"/app/session/validateuseremail?sessionToken="+getSession().sessionToken,null) ;
	}
	renderSessionResendUserEmail ()
	{
	}
	executeSessionResendUserEmail (event)
	{
		Axios.get(getPrefix()+"/app/session/resenduseremail?sessionToken="+getSession().sessionToken,null) ;
	}
	renderSessionPrimaryUserEmail ()
	{
	}
	executeSessionPrimaryUserEmail (event)
	{
		Axios.get(getPrefix()+"/app/session/primaryuseremail?sessionToken="+getSession().sessionToken,null) ;
	}
}

class AdminComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
	}
	componentDidMount () {this.zoomout() ;}
	adminPermission ()
	{
		return (false) ;
	}
	editorPermission ()
	{
		return (false) ;
	}
	menu ()
	{
			return (
				<div className='menu-action'>
					<div>
					
					</div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderAdminTerms ()
	{
	}
	executeAdminTerms (event)
	{
		Axios.get(getPrefix()+"/app/admin/terms?sessionToken="+getSession().sessionToken,null) ;
	}
	renderAdminPrivacy ()
	{
	}
	executeAdminPrivacy (event)
	{
		Axios.get(getPrefix()+"/app/admin/privacy?sessionToken="+getSession().sessionToken,null) ;
	}
	renderAdminReindex ()
	{
	}
	executeAdminReindex (event)
	{
		Axios.get(getPrefix()+"/app/admin/reindex?sessionToken="+getSession().sessionToken,null) ;
	}
	renderAdminRecompute ()
	{
	}
	executeAdminRecompute (event)
	{
		Axios.get(getPrefix()+"/app/admin/recompute?sessionToken="+getSession().sessionToken,null) ;
	}
}

export {AnnouncementEntityComponent,CategoryEntityComponent,CategoryUserEntityComponent,ContactEntityComponent,CompanyEntityComponent,CompanyImageEntityComponent,CompanyUserEntityComponent,FontEntityComponent,ImageEntityComponent,MainEntityComponent,OrderEntityComponent,OrderProductEntityComponent,PageEntityComponent,ProductEntityComponent,ProductImageEntityComponent,ProductUserEntityComponent,RecipeEntityComponent,RecipeUserEntityComponent,ScriptEntityComponent,StyleEntityComponent,UserEntityComponent,UserEmailEntityComponent,SearchComponent,SessionComponent,AdminComponent,} ;
