import React from "react" ;
import ReactDOM from "react-dom/client" ;
import Axios from "axios" ;
import draftToHtml from "draftjs-to-html" ;
import {Editor} from "react-draft-wysiwyg" ;
import {EditorState, ContentState, convertFromHTML, convertToRaw} from "draft-js" ;
import {BandungComponent, getPrefix, getSession, getSessionToken} from "./Bandung" ;
import "../lib/react-draft-wysiwyg.css" ;
import "./Bandung.css" ;

//Copyright IpserLab LLC. All rights reserved. Confidential and proprietary.
//WARNING: This file is generated by Bandung. Do not modify.
///Users/ipser/Data/IpserLabStartup3/Workspace/UncoverGemServer/src/main/java/uncovergem/command/UncoverGemCommandModel.xml

class AnnouncementEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			announcementEntity:{},
			announcementEntityList:[],
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (announcementEntityId)
	{
		if (!announcementEntityId) announcementEntityId = this.state.announcementEntity.announcementEntityId ;
		Axios.get(getPrefix()+"/app/announcement/view?sessionToken="+getSessionToken()+"&announcementEntityId="+announcementEntityId,null)
			.then(response=>{this.setState({command:"View",announcementEntity:response.data})}) ;
		Axios.get(getPrefix()+"/app/announcement/textlongdescription?sessionToken="+getSessionToken()+"&announcementEntityId="+announcementEntityId,null)
			.then(response=>{this.setState({longDescription:response.data})}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/announcement/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",announcementEntityList:response.data,announcementEntity:{}})}) ;
		else
			Axios.get(getPrefix()+"/app/announcement/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",announcementEntityList:response.data,announcementEntity:{}})}) ;
	}
	menu ()
	{
		if (this.state.announcementEntity.announcementEntityId)
			return (
				<div className="menu">
					<div>
						{<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{<button className="menu-action" onClick={()=>{this.command("View")}}>View</button>}
						{<button className="menu-action" onClick={()=>{this.command("TextLongDescription")}}>TextLongDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Update")}}>Update</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateLongDescription")}}>UpdateLongDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Delete")}}>Delete</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Send")}}>Send</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
		else
			return (
				<div className="menu">
					<div>
						{<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderView() ;
		else if (this.state.command==="Create")
			return this.renderCreate() ;
		else if (this.state.command==="Update")
			return this.renderUpdate() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderUpdateLongDescription() ;
		else if (this.state.command==="Delete")
			return this.renderDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='entityListDiv' id={this.id+"list"}>
				{this.menu()}
				<div className='signinDiv' id={this.id}>
					{getSession()?'User:'+ ' ' + getSession().label:'loading...'}
				</div>
				{this.state.announcementEntityList?.map(announcementEntity=>
					(
						<div className="list-card" key={announcementEntity.announcementEntityId} onClick={()=>{this.zoomin(announcementEntity.announcementEntityId)}} style={{cursor:'pointer'}}>
							<p>{announcementEntity.label}</p>
							<p>[shortDescription goes here]</p>
						</div>
					))}
			</div>
		) ;
	}
	renderView ()
	{
		return(
			<div className='entityViewDiv' id={this.id+"view"}>
				{this.menu()}
				<div className="list-card" >
					<p>{this.state.announcementEntity?this.state.announcementEntity.label:null}</p>
				</div>
				<p>Label: {this.state.label?this.state.label:''}</p>
				<p>SendDate: {this.state.sendDate?this.state.sendDate:''}</p>
				<p>{this.state.longDescription?this.state.longDescription:''}</p>
			</div>
		) ;
	}
	renderCreate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCreate(event)}}>
				<p><input id="AnnouncementEntityLabel" name="label" className="input_field fields" type="text" placeholder="Enter label..."/></p>
				<p><input id="AnnouncementEntitySendDate" name="sendDate" className="input_field fields" type="text" placeholder="Enter sendDate..."/></p>
				<div className="editor_field fields"><Editor id="AnnouncementEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="create_button" type="submit">Create</button></div>
				</form>
			</div>
		) ;
	}
	executeCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('label',document.getElementById("AnnouncementEntityLabel").value) ;
		form.append('sendDate',document.getElementById("AnnouncementEntitySendDate").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/announcement/create",form).then(response=>{this.zoomin(response.data.announcementEntityId)}) ;
	}
	renderUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="AnnouncementEntityLabel" name="label" className="input_field fields" type="text" defaultValue={this.state.announcementEntity.label?this.state.announcementEntity.label:""}/></p>
				<p><input id="AnnouncementEntitySendDate" name="sendDate" className="input_field fields" type="text" defaultValue={this.state.announcementEntity.sendDate?this.state.announcementEntity.sendDate:""}/></p>
				<div className="editor_field fields"><Editor id="AnnouncementEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('announcementEntityId',this.state.announcementEntity.announcementEntityId) ;
		form.append('label',document.getElementById("AnnouncementEntityLabel").value) ;
		form.append('sendDate',document.getElementById("AnnouncementEntitySendDate").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/announcement/update",form).then(response=>{this.zoomin(response.data.announcementEntityId)}) ;
		Axios.post(getPrefix()+"/app/announcement/updatelongdescription",form) ;
	}
	renderUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<div className="editor_field fields"><Editor id="AnnouncementEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('announcementEntityId',this.state.announcementEntity.announcementEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/announcement/updatelongdescription/",form).then(response=>{this.zoomin(response.data.announcementEntityId)}) ;
	}
	renderDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Announcement?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeDelete (event)
	{
		Axios.get(getPrefix()+"/app/announcement/delete?sessionToken="+getSessionToken()+"&announcementEntityId="+this.state.announcementEntity.announcementEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	renderSend ()
	{
	}
	executeSend (event)
	{
		Axios.get(getPrefix()+"/app/announcement/send?sessionToken="+getSessionToken(),null) ;
	}
}

class CategoryEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			categoryEntity:{},
			categoryEntityList:[],
			shortDescription:null,
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (categoryEntityId)
	{
		if (!categoryEntityId) categoryEntityId = this.state.categoryEntity.categoryEntityId ;
		Axios.get(getPrefix()+"/app/category/view?sessionToken="+getSessionToken()+"&categoryEntityId="+categoryEntityId,null)
			.then(response=>{this.setState({command:"View",categoryEntity:response.data})}) ;
		Axios.get(getPrefix()+"/app/category/textshortdescription?sessionToken="+getSessionToken()+"&categoryEntityId="+categoryEntityId,null)
			.then(response=>{this.setState({shortDescription:response.data})}) ;
		Axios.get(getPrefix()+"/app/category/textlongdescription?sessionToken="+getSessionToken()+"&categoryEntityId="+categoryEntityId,null)
			.then(response=>{this.setState({longDescription:response.data})}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/category/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",categoryEntityList:response.data,categoryEntity:{}})}) ;
		else if (commandList==="ListByParent")
			Axios.get(getPrefix()+"/app/category/listbyparent?sessionToken="+getSessionToken()+"&page="+this.page+"&parentCategoryEntityId="+props.parentCategoryEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"List",categoryEntityList:response.data,categoryEntity:{}})}) ;
		else if (commandList==="ListUnpublished")
			Axios.get(getPrefix()+"/app/category/listunpublished?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",categoryEntityList:response.data,categoryEntity:{}})}) ;
		else
			Axios.get(getPrefix()+"/app/category/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",categoryEntityList:response.data,categoryEntity:{}})}) ;
	}
	adminPermission ()
	{
		return (true||(getSession()&&getSession().administrator)) ;
	}
	menu ()
	{
		if (this.state.categoryEntity.categoryEntityId)
			return (
				<div className="menu">
					<div>
						{<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{<button className="menu-action" onClick={()=>{this.zoomout("ListByParent",{parentCategoryEntityId:this.state.categoryEntity.categoryEntityId})}}>List Subcategories</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListUnpublished")}}>List Unpublished</button>}
						{(this.adminPermission()||this.state.categoryEntity.publishDate)&&<button className="menu-action" onClick={()=>{this.command("View")}}>View</button>}
						{(this.adminPermission()||this.state.categoryEntity.publishDate)&&<button className="menu-action" onClick={()=>{this.command("TextShortDescription")}}>TextShortDescription</button>}
						{(this.adminPermission()||this.state.categoryEntity.publishDate)&&<button className="menu-action" onClick={()=>{this.command("TextLongDescription")}}>TextLongDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Update")}}>Update</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateShortDescription")}}>UpdateShortDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateLongDescription")}}>UpdateLongDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateImage")}}>UpdateImage</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadImage")}}>UploadImage</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Delete")}}>Delete</button>}
						{(this.adminPermission())&&!this.state.categoryEntity.publishDate&&<button className="menu-action" onClick={()=>{this.executePublish()}}>Publish</button>}
						{(this.adminPermission())&&this.state.categoryEntity.publishDate&&<button className="menu-action" onClick={()=>{this.executeUnpublish()}}>Unpublish</button>}
						{!this.state.categoryEntity.subscribeDate&&<button className="menu-action" onClick={()=>{this.executeSubscribe()}}>Subscribe</button>}
						{this.state.categoryEntity.subscribeDate&&<button className="menu-action" onClick={()=>{this.executeUnsubscribe()}}>Unsubscribe</button>}
						{<button className="menu-action" onClick={()=>{this.command("Rate")}}>Rate</button>}
						{<button className="menu-action" onClick={()=>{this.command("Comment")}}>Comment</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
		else
			return (
				<div className="menu">
					<div>
						{<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListUnpublished")}}>List Unpublished</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderView() ;
		else if (this.state.command==="Create")
			return this.renderCreate() ;
		else if (this.state.command==="Update")
			return this.renderUpdate() ;
		else if (this.state.command==="UpdateShortDescription")
			return this.renderUpdateShortDescription() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderUpdateLongDescription() ;
		else if (this.state.command==="UpdateImage")
			return this.renderUpdateImage() ;
		else if (this.state.command==="UploadImage")
			return this.renderUploadImage() ;
		else if (this.state.command==="Delete")
			return this.renderDelete() ;
		else if (this.state.command==="Publish")
			return this.renderPublish() ;
		else if (this.state.command==="Unpublish")
			return this.renderUnpublish() ;
		else if (this.state.command==="Subscribe")
			return this.renderSubscribe() ;
		else if (this.state.command==="Unsubscribe")
			return this.renderUnsubscribe() ;
		else if (this.state.command==="Rate")
			return this.renderRate() ;
		else if (this.state.command==="Comment")
			return this.renderComment() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='entityListDiv' id={this.id+"list"}>
				{this.menu()}
				<div className='signinDiv' id={this.id}>
					{getSession()?'User:'+ ' ' + getSession().label:'loading...'}
				</div>
				{this.state.categoryEntityList?.map(categoryEntity=>
					(
						<div className="list-card" key={categoryEntity.categoryEntityId} onClick={()=>{this.zoomin(categoryEntity.categoryEntityId)}} style={{cursor:'pointer'}}>
							<p>{categoryEntity.label}</p>
							<p><img className="image" alt='{categoryEntity.label}' src={getPrefix()+`/app/category/imageimage?categoryEntityId=${categoryEntity.categoryEntityId}`}/></p>
							<p>[shortDescription goes here]</p>
						</div>
					))}
			</div>
		) ;
	}
	renderView ()
	{
		return(
			<div className='entityViewDiv' id={this.id+"view"}>
				{this.menu()}
				<div className="list-card" >
					<p>{this.state.categoryEntity?this.state.categoryEntity.label:null}</p>
					<img className="image" alt='{categoryEntity.label}' src={getPrefix()+`/app/category/imageimage?categoryEntityId=${this.state.categoryEntity.categoryEntityId}`}/>
				</div>
				<p>Label: {this.state.label?this.state.label:''}</p>
				<p>{this.state.shortDescription?this.state.shortDescription:''}</p>
				<p>{this.state.longDescription?this.state.longDescription:''}</p>
			</div>
		) ;
	}
	renderCreate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCreate(event)}}>
				<p><input id="CategoryEntityLabel" name="label" className="input_field fields" type="text" placeholder="Enter label..."/></p>
				<textarea id="CategoryEntityShortDescription" name="shortDescription" className="text_area fields" placeholder="Enter shortDescription..." rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="CategoryEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="create_button" type="submit">Create</button></div>
				</form>
			</div>
		) ;
	}
	executeCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		if (this.state.categoryEntity.parentCategoryEntityId)
			form.append('parentCategoryEntityId',this.state.categoryEntity.parentCategoryEntityId) ;
		form.append('label',document.getElementById("CategoryEntityLabel").value) ;
		form.append('shortDescription',document.getElementById("CategoryEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/category/create",form).then(response=>{this.zoomin(response.data.categoryEntityId)}) ;
	}
	renderUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="CategoryEntityLabel" name="label" className="input_field fields" type="text" defaultValue={this.state.categoryEntity.label?this.state.categoryEntity.label:""}/></p>
				<textarea id="CategoryEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="CategoryEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('categoryEntityId',this.state.categoryEntity.categoryEntityId) ;
		form.append('label',document.getElementById("CategoryEntityLabel").value) ;
		form.append('shortDescription',document.getElementById("CategoryEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/category/update",form).then(response=>{this.zoomin(response.data.categoryEntityId)}) ;
		Axios.post(getPrefix()+"/app/category/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/category/updatelongdescription",form) ;
	}
	renderUpdateShortDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<textarea id="CategoryEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateShortDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('categoryEntityId',this.state.categoryEntity.categoryEntityId) ;
		form.append('shortDescription',document.getElementById("CategoryEntityShortDescription").value) ;
		Axios.post(getPrefix()+"/app/category/updateshortdescription/",form).then(response=>{this.zoomin(response.data.categoryEntityId)}) ;
	}
	renderUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<div className="editor_field fields"><Editor id="CategoryEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('categoryEntityId',this.state.categoryEntity.categoryEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/category/updatelongdescription/",form).then(response=>{this.zoomin(response.data.categoryEntityId)}) ;
	}
	renderUpdateImage ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="CategoryEntityImageLabel" name="imageLabel" className="input_field fields" type="text" defaultValue={this.state.categoryEntity.imageLabel?this.state.categoryEntity.imageLabel:""}/></p>
				<p><input id="CategoryEntityImageName" name="imageName" className="input_field fields" type="text" defaultValue={this.state.categoryEntity.imageName?this.state.categoryEntity.imageName:""}/></p>
				<p><input id="CategoryEntityImageType" name="imageType" className="input_field fields" type="text" defaultValue={this.state.categoryEntity.imageType?this.state.categoryEntity.imageType:""}/></p>
				<p><input id="CategoryEntityImageUrl" name="imageUrl" className="input_field fields" type="text" defaultValue={this.state.categoryEntity.imageUrl?this.state.categoryEntity.imageUrl:""}/></p>
				<p><input id="CategoryEntityImageCredit" name="imageCredit" className="input_field fields" type="text" defaultValue={this.state.categoryEntity.imageCredit?this.state.categoryEntity.imageCredit:""}/></p>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateImage (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('categoryEntityId',this.state.categoryEntity.categoryEntityId) ;
		form.append('label',document.getElementById("CategoryEntityLabel").value) ;
		form.append('shortDescription',document.getElementById("CategoryEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/category/update",form).then(response=>{this.zoomin(response.data.categoryEntityId)}) ;
		Axios.post(getPrefix()+"/app/category/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/category/updatelongdescription",form) ;
	}
	renderUploadImage ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeUploadImage(event)}}>
			<input type="file" accept="image/*" id="myFile" name="image" onChange={(event)=>{this.executeUploadImage(event)}}/>
			<input className="upload_image_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeUploadImage (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('categoryEntityId',this.state.categoryEntity.categoryEntityId) ;
		Axios.post(getPrefix()+"/app/category/uploadimage",form)
			.then(response=>{this.zoomin(this.state.categoryEntity.categoryEntityId)}) ;
	}
	renderDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Category?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeDelete (event)
	{
		Axios.get(getPrefix()+"/app/category/delete?sessionToken="+getSessionToken()+"&categoryEntityId="+this.state.categoryEntity.categoryEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	renderPublish ()
	{
	}
	executePublish (event)
	{
		Axios.get(getPrefix()+"/app/category/publish?sessionToken="+getSessionToken()+"&categoryEntityId="+this.state.categoryEntity.categoryEntityId,null)
			.then(response=>{this.zoomin(this.state.categoryEntity.categoryEntityId)}) ;
	}
	renderUnpublish ()
	{
	}
	executeUnpublish (event)
	{
		Axios.get(getPrefix()+"/app/category/unpublish?sessionToken="+getSessionToken()+"&categoryEntityId="+this.state.categoryEntity.categoryEntityId,null)
			.then(response=>{this.zoomin(this.state.categoryEntity.categoryEntityId)}) ;
	}
	renderSubscribe ()
	{
	}
	executeSubscribe (event)
	{
		Axios.get(getPrefix()+"/app/category/subscribe?sessionToken="+getSessionToken()+"&categoryEntityId="+this.state.categoryEntity.categoryEntityId,null)
			.then(response=>{this.zoomin(this.state.categoryEntity.categoryEntityId)}) ;
	}
	renderUnsubscribe ()
	{
	}
	executeUnsubscribe (event)
	{
		Axios.get(getPrefix()+"/app/category/unsubscribe?sessionToken="+getSessionToken()+"&categoryEntityId="+this.state.categoryEntity.categoryEntityId,null)
			.then(response=>{this.zoomin(this.state.categoryEntity.categoryEntityId)}) ;
	}
	renderRate ()
	{
	}
	executeRate (event)
	{
		Axios.get(getPrefix()+"/app/category/rate?sessionToken="+getSessionToken()+"&categoryEntityId="+this.state.categoryEntity.categoryEntityId,null)
			.then(response=>{this.zoomin(this.state.categoryEntity.categoryEntityId)}) ;
	}
	renderComment ()
	{
	}
	executeComment (event)
	{
		Axios.get(getPrefix()+"/app/category/comment?sessionToken="+getSessionToken()+"&categoryEntityId="+this.state.categoryEntity.categoryEntityId,null)
			.then(response=>{this.zoomin(this.state.categoryEntity.categoryEntityId)}) ;
	}
}

class CategoryUserEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			categoryUserEntity:{},
			categoryUserEntityList:[],
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (categoryUserEntityId)
	{
		if (!categoryUserEntityId) categoryUserEntityId = this.state.categoryUserEntity.categoryUserEntityId ;
		Axios.get(getPrefix()+"/app/categoryuser/view?sessionToken="+getSessionToken()+"&categoryUserEntityId="+categoryUserEntityId,null)
			.then(response=>{this.setState({command:"View",categoryUserEntity:response.data})}) ;
		Axios.get(getPrefix()+"/app/categoryuser/textlongdescription?sessionToken="+getSessionToken()+"&categoryUserEntityId="+categoryUserEntityId,null)
			.then(response=>{this.setState({longDescription:response.data})}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/categoryuser/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",categoryUserEntityList:response.data,categoryUserEntity:{}})}) ;
		else if (commandList==="ListByCategory")
			Axios.get(getPrefix()+"/app/categoryuser/listbycategory?sessionToken="+getSessionToken()+"&page="+this.page+"&categoryEntityId="+props.categoryEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"List",categoryUserEntityList:response.data,categoryUserEntity:{}})}) ;
		else
			Axios.get(getPrefix()+"/app/categoryuser/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",categoryUserEntityList:response.data,categoryUserEntity:{}})}) ;
	}
	adminPermission ()
	{
		return (true) ;
	}
	menu ()
	{
		if (this.state.categoryUserEntity.categoryUserEntityId)
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{<button className="menu-action" onClick={()=>{this.zoomout("ListByCategory")}}>ListByCategory</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("View")}}>View</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("TextLongDescription")}}>TextLongDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Update")}}>Update</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateLongDescription")}}>UpdateLongDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Delete")}}>Delete</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
		else
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{<button className="menu-action" onClick={()=>{this.zoomout("ListByCategory")}}>ListByCategory</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderView() ;
		else if (this.state.command==="Create")
			return this.renderCreate() ;
		else if (this.state.command==="Update")
			return this.renderUpdate() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderUpdateLongDescription() ;
		else if (this.state.command==="Delete")
			return this.renderDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='entityListDiv' id={this.id+"list"}>
				{this.menu()}
				<div className='signinDiv' id={this.id}>
					{getSession()?'User:'+ ' ' + getSession().label:'loading...'}
				</div>
				{this.state.categoryUserEntityList?.map(categoryUserEntity=>
					(
						<div className="list-card" key={categoryUserEntity.categoryUserEntityId} onClick={()=>{this.zoomin(categoryUserEntity.categoryUserEntityId)}} style={{cursor:'pointer'}}>
							<p>{categoryUserEntity.label}</p>
							<p>[shortDescription goes here]</p>
						</div>
					))}
			</div>
		) ;
	}
	renderView ()
	{
		return(
			<div className='entityViewDiv' id={this.id+"view"}>
				{this.menu()}
				<div className="list-card" >
				</div>
				<p>{this.state.longDescription?this.state.longDescription:''}</p>
			</div>
		) ;
	}
	renderCreate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCreate(event)}}>
				<div className="editor_field fields"><Editor id="CategoryUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="create_button" type="submit">Create</button></div>
				</form>
			</div>
		) ;
	}
	executeCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/categoryuser/create",form).then(response=>{this.zoomin(response.data.categoryUserEntityId)}) ;
	}
	renderUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<div className="editor_field fields"><Editor id="CategoryUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('categoryUserEntityId',this.state.categoryUserEntity.categoryUserEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/categoryuser/update",form).then(response=>{this.zoomin(response.data.categoryUserEntityId)}) ;
		Axios.post(getPrefix()+"/app/categoryuser/updatelongdescription",form) ;
	}
	renderUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<div className="editor_field fields"><Editor id="CategoryUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('categoryUserEntityId',this.state.categoryUserEntity.categoryUserEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/categoryuser/updatelongdescription/",form).then(response=>{this.zoomin(response.data.categoryUserEntityId)}) ;
	}
	renderDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this CategoryUser?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeDelete (event)
	{
		Axios.get(getPrefix()+"/app/categoryuser/delete?sessionToken="+getSessionToken()+"&categoryUserEntityId="+this.state.categoryUserEntity.categoryUserEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class ContactEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			contactEntity:{},
			contactEntityList:[],
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (contactEntityId)
	{
		if (!contactEntityId) contactEntityId = this.state.contactEntity.contactEntityId ;
		Axios.get(getPrefix()+"/app/contact/view?sessionToken="+getSessionToken()+"&contactEntityId="+contactEntityId,null)
			.then(response=>{this.setState({command:"View",contactEntity:response.data})}) ;
		Axios.get(getPrefix()+"/app/contact/textlongdescription?sessionToken="+getSessionToken()+"&contactEntityId="+contactEntityId,null)
			.then(response=>{this.setState({longDescription:response.data})}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/contact/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",contactEntityList:response.data,contactEntity:{}})}) ;
		else if (commandList==="ListByUser")
			Axios.get(getPrefix()+"/app/contact/listbyuser?sessionToken="+getSessionToken()+"&page="+this.page+"&userEntityId="+props.userEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"List",contactEntityList:response.data,contactEntity:{}})}) ;
		else
			Axios.get(getPrefix()+"/app/contact/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",contactEntityList:response.data,contactEntity:{}})}) ;
	}
	menu ()
	{
		if (this.state.contactEntity.contactEntityId)
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListByUser")}}>ListByUser</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("View")}}>View</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("TextLongDescription")}}>TextLongDescription</button>}
						{<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Update")}}>Update</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateLongDescription")}}>UpdateLongDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Delete")}}>Delete</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
		else
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListByUser")}}>ListByUser</button>}
						{<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderView() ;
		else if (this.state.command==="Create")
			return this.renderCreate() ;
		else if (this.state.command==="Update")
			return this.renderUpdate() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderUpdateLongDescription() ;
		else if (this.state.command==="Delete")
			return this.renderDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='entityListDiv' id={this.id+"list"}>
				{this.menu()}
				<div className='signinDiv' id={this.id}>
					{getSession()?'User:'+ ' ' + getSession().label:'loading...'}
				</div>
				{this.state.contactEntityList?.map(contactEntity=>
					(
						<div className="list-card" key={contactEntity.contactEntityId} onClick={()=>{this.zoomin(contactEntity.contactEntityId)}} style={{cursor:'pointer'}}>
							<p>{contactEntity.label}</p>
							<p>[shortDescription goes here]</p>
						</div>
					))}
			</div>
		) ;
	}
	renderView ()
	{
		return(
			<div className='entityViewDiv' id={this.id+"view"}>
				{this.menu()}
				<div className="list-card" >
				</div>
				<p>FirstName: {this.state.firstName?this.state.firstName:''}</p>
				<p>LastName: {this.state.lastName?this.state.lastName:''}</p>
				<p>Email: {this.state.email?this.state.email:''}</p>
				<p>Phone: {this.state.phone?this.state.phone:''}</p>
				<p>Request: {this.state.request?this.state.request:''}</p>
				<p>Status: {this.state.status?this.state.status:''}</p>
				<p>{this.state.longDescription?this.state.longDescription:''}</p>
			</div>
		) ;
	}
	renderCreate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCreate(event)}}>
				<p><input id="ContactEntityFirstName" name="firstName" className="input_field fields" type="text" placeholder="Enter firstName..."/></p>
				<p><input id="ContactEntityLastName" name="lastName" className="input_field fields" type="text" placeholder="Enter lastName..."/></p>
				<p><input id="ContactEntityEmail" name="email" className="input_field fields" type="text" placeholder="Enter email..."/></p>
				<p><input id="ContactEntityPhone" name="phone" className="input_field fields" type="text" placeholder="Enter phone..."/></p>
				<p><input id="ContactEntityRequest" name="request" className="input_field fields" type="text" placeholder="Enter request..."/></p>
				<p><input id="ContactEntityStatus" name="status" className="input_field fields" type="text" placeholder="Enter status..."/></p>
				<div className="editor_field fields"><Editor id="ContactEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="create_button" type="submit">Create</button></div>
				</form>
			</div>
		) ;
	}
	executeCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('firstName',document.getElementById("ContactEntityFirstName").value) ;
		form.append('lastName',document.getElementById("ContactEntityLastName").value) ;
		form.append('email',document.getElementById("ContactEntityEmail").value) ;
		form.append('phone',document.getElementById("ContactEntityPhone").value) ;
		form.append('request',document.getElementById("ContactEntityRequest").value) ;
		form.append('status',document.getElementById("ContactEntityStatus").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/contact/create",form).then(response=>{this.zoomin(response.data.contactEntityId)}) ;
	}
	renderUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="ContactEntityFirstName" name="firstName" className="input_field fields" type="text" defaultValue={this.state.contactEntity.firstName?this.state.contactEntity.firstName:""}/></p>
				<p><input id="ContactEntityLastName" name="lastName" className="input_field fields" type="text" defaultValue={this.state.contactEntity.lastName?this.state.contactEntity.lastName:""}/></p>
				<p><input id="ContactEntityEmail" name="email" className="input_field fields" type="text" defaultValue={this.state.contactEntity.email?this.state.contactEntity.email:""}/></p>
				<p><input id="ContactEntityPhone" name="phone" className="input_field fields" type="text" defaultValue={this.state.contactEntity.phone?this.state.contactEntity.phone:""}/></p>
				<p><input id="ContactEntityRequest" name="request" className="input_field fields" type="text" defaultValue={this.state.contactEntity.request?this.state.contactEntity.request:""}/></p>
				<p><input id="ContactEntityStatus" name="status" className="input_field fields" type="text" defaultValue={this.state.contactEntity.status?this.state.contactEntity.status:""}/></p>
				<div className="editor_field fields"><Editor id="ContactEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('contactEntityId',this.state.contactEntity.contactEntityId) ;
		form.append('firstName',document.getElementById("ContactEntityFirstName").value) ;
		form.append('lastName',document.getElementById("ContactEntityLastName").value) ;
		form.append('email',document.getElementById("ContactEntityEmail").value) ;
		form.append('phone',document.getElementById("ContactEntityPhone").value) ;
		form.append('request',document.getElementById("ContactEntityRequest").value) ;
		form.append('status',document.getElementById("ContactEntityStatus").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/contact/update",form).then(response=>{this.zoomin(response.data.contactEntityId)}) ;
		Axios.post(getPrefix()+"/app/contact/updatelongdescription",form) ;
	}
	renderUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<div className="editor_field fields"><Editor id="ContactEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('contactEntityId',this.state.contactEntity.contactEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/contact/updatelongdescription/",form).then(response=>{this.zoomin(response.data.contactEntityId)}) ;
	}
	renderDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Contact?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeDelete (event)
	{
		Axios.get(getPrefix()+"/app/contact/delete?sessionToken="+getSessionToken()+"&contactEntityId="+this.state.contactEntity.contactEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class CompanyEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			companyEntity:{},
			companyEntityList:[],
			shortDescription:null,
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (companyEntityId)
	{
		if (!companyEntityId) companyEntityId = this.state.companyEntity.companyEntityId ;
		Axios.get(getPrefix()+"/app/company/view?sessionToken="+getSessionToken()+"&companyEntityId="+companyEntityId,null)
			.then(response=>{this.setState({command:"View",companyEntity:response.data})}) ;
		Axios.get(getPrefix()+"/app/company/textshortdescription?sessionToken="+getSessionToken()+"&companyEntityId="+companyEntityId,null)
			.then(response=>{this.setState({shortDescription:response.data})}) ;
		Axios.get(getPrefix()+"/app/company/textlongdescription?sessionToken="+getSessionToken()+"&companyEntityId="+companyEntityId,null)
			.then(response=>{this.setState({longDescription:response.data})}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/company/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",companyEntityList:response.data,companyEntity:{}})}) ;
		else if (commandList==="List")
			Axios.get(getPrefix()+"/app/company/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",companyEntityList:response.data,companyEntity:{}})}) ;
		else if (commandList==="ListUnapproved")
			Axios.get(getPrefix()+"/app/company/listunapproved?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",companyEntityList:response.data,companyEntity:{}})}) ;
		else if (commandList==="ListByUser")
			Axios.get(getPrefix()+"/app/company/listbyuser?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",companyEntityList:response.data,companyEntity:{}})}) ;
		else
			Axios.get(getPrefix()+"/app/company/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",companyEntityList:response.data,companyEntity:{}})}) ;
	}
	editorPermission ()
	{
		return (true) ;
	}
	adminPermission ()
	{
		return (true) ;
	}
	menu ()
	{
		if (this.state.companyEntity.companyEntityId)
			return (
				<div className="menu">
					<div>
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("List")}}>List</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListUnapproved")}}>ListUnapproved</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListByUser")}}>ListByUser</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.command("View")}}>View</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.command("TextShortDescription")}}>TextShortDescription</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.command("TextLongDescription")}}>TextLongDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Update")}}>Update</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateShortDescription")}}>UpdateShortDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateLongDescription")}}>UpdateLongDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateImage")}}>UpdateImage</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadImage")}}>UploadImage</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Delete")}}>Delete</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Approve")}}>Approve</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Unapprove")}}>Unapprove</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Reject")}}>Reject</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Unreject")}}>Unreject</button>}
						{<button className="menu-action" onClick={()=>{this.executeSubscribe()}}>Subscribe</button>}
						{<button className="menu-action" onClick={()=>{this.executeUnsubscribe()}}>Unsubscribe</button>}
						{<button className="menu-action" onClick={()=>{this.command("Rate")}}>Rate</button>}
						{<button className="menu-action" onClick={()=>{this.command("Comment")}}>Comment</button>}
						{<button className="menu-action" onClick={()=>{this.command("Accept")}}>Accept</button>}
						{<button className="menu-action" onClick={()=>{this.command("Decline")}}>Decline</button>}
						{<button className="menu-action" onClick={()=>{this.command("Quit")}}>Quit</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
		else
			return (
				<div className="menu">
					<div>
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("List")}}>List</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListUnapproved")}}>ListUnapproved</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListByUser")}}>ListByUser</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderView() ;
		else if (this.state.command==="Create")
			return this.renderCreate() ;
		else if (this.state.command==="Update")
			return this.renderUpdate() ;
		else if (this.state.command==="UpdateShortDescription")
			return this.renderUpdateShortDescription() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderUpdateLongDescription() ;
		else if (this.state.command==="UpdateImage")
			return this.renderUpdateImage() ;
		else if (this.state.command==="UploadImage")
			return this.renderUploadImage() ;
		else if (this.state.command==="Delete")
			return this.renderDelete() ;
		else if (this.state.command==="Approve")
			return this.renderApprove() ;
		else if (this.state.command==="Unapprove")
			return this.renderUnapprove() ;
		else if (this.state.command==="Reject")
			return this.renderReject() ;
		else if (this.state.command==="Unreject")
			return this.renderUnreject() ;
		else if (this.state.command==="Subscribe")
			return this.renderSubscribe() ;
		else if (this.state.command==="Unsubscribe")
			return this.renderUnsubscribe() ;
		else if (this.state.command==="Rate")
			return this.renderRate() ;
		else if (this.state.command==="Comment")
			return this.renderComment() ;
		else if (this.state.command==="Accept")
			return this.renderAccept() ;
		else if (this.state.command==="Decline")
			return this.renderDecline() ;
		else if (this.state.command==="Quit")
			return this.renderQuit() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='entityListDiv' id={this.id+"list"}>
				{this.menu()}
				<div className='signinDiv' id={this.id}>
					{getSession()?'User:'+ ' ' + getSession().label:'loading...'}
				</div>
				{this.state.companyEntityList?.map(companyEntity=>
					(
						<div className="list-card" key={companyEntity.companyEntityId} onClick={()=>{this.zoomin(companyEntity.companyEntityId)}} style={{cursor:'pointer'}}>
							<p>{companyEntity.label}</p>
							<p><img className="image" alt='{companyEntity.label}' src={getPrefix()+`/app/company/imageimage?companyEntityId=${companyEntity.companyEntityId}`}/></p>
							<p>[shortDescription goes here]</p>
						</div>
					))}
			</div>
		) ;
	}
	renderView ()
	{
		return(
			<div className='entityViewDiv' id={this.id+"view"}>
				{this.menu()}
				<div className="list-card" >
					<p>{this.state.companyEntity?this.state.companyEntity.label:null}</p>
					<img className="image" alt='{companyEntity.label}' src={getPrefix()+`/app/company/imageimage?companyEntityId=${this.state.companyEntity.companyEntityId}`}/>
				</div>
				<p>Label: {this.state.label?this.state.label:''}</p>
				<p>Url: {this.state.url?this.state.url:''}</p>
				<p>Phone: {this.state.phone?this.state.phone:''}</p>
				<p>{this.state.shortDescription?this.state.shortDescription:''}</p>
				<p>{this.state.longDescription?this.state.longDescription:''}</p>
			</div>
		) ;
	}
	renderCreate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCreate(event)}}>
				<p><input id="CompanyEntityLabel" name="label" className="input_field fields" type="text" placeholder="Enter label..."/></p>
				<p><input id="CompanyEntityUrl" name="url" className="input_field fields" type="text" placeholder="Enter url..."/></p>
				<p><input id="CompanyEntityPhone" name="phone" className="input_field fields" type="text" placeholder="Enter phone..."/></p>
				<textarea id="CompanyEntityShortDescription" name="shortDescription" className="text_area fields" placeholder="Enter shortDescription..." rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="CompanyEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="create_button" type="submit">Create</button></div>
				</form>
			</div>
		) ;
	}
	executeCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('label',document.getElementById("CompanyEntityLabel").value) ;
		form.append('url',document.getElementById("CompanyEntityUrl").value) ;
		form.append('phone',document.getElementById("CompanyEntityPhone").value) ;
		form.append('shortDescription',document.getElementById("CompanyEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/company/create",form).then(response=>{this.zoomin(response.data.companyEntityId)}) ;
	}
	renderUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="CompanyEntityLabel" name="label" className="input_field fields" type="text" defaultValue={this.state.companyEntity.label?this.state.companyEntity.label:""}/></p>
				<p><input id="CompanyEntityUrl" name="url" className="input_field fields" type="text" defaultValue={this.state.companyEntity.url?this.state.companyEntity.url:""}/></p>
				<p><input id="CompanyEntityPhone" name="phone" className="input_field fields" type="text" defaultValue={this.state.companyEntity.phone?this.state.companyEntity.phone:""}/></p>
				<textarea id="CompanyEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="CompanyEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('companyEntityId',this.state.companyEntity.companyEntityId) ;
		form.append('label',document.getElementById("CompanyEntityLabel").value) ;
		form.append('url',document.getElementById("CompanyEntityUrl").value) ;
		form.append('phone',document.getElementById("CompanyEntityPhone").value) ;
		form.append('shortDescription',document.getElementById("CompanyEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/company/update",form).then(response=>{this.zoomin(response.data.companyEntityId)}) ;
		Axios.post(getPrefix()+"/app/company/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/company/updatelongdescription",form) ;
	}
	renderUpdateShortDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<textarea id="CompanyEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateShortDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('companyEntityId',this.state.companyEntity.companyEntityId) ;
		form.append('shortDescription',document.getElementById("CompanyEntityShortDescription").value) ;
		Axios.post(getPrefix()+"/app/company/updateshortdescription/",form).then(response=>{this.zoomin(response.data.companyEntityId)}) ;
	}
	renderUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<div className="editor_field fields"><Editor id="CompanyEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('companyEntityId',this.state.companyEntity.companyEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/company/updatelongdescription/",form).then(response=>{this.zoomin(response.data.companyEntityId)}) ;
	}
	renderUpdateImage ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="CompanyEntityImageLabel" name="imageLabel" className="input_field fields" type="text" defaultValue={this.state.companyEntity.imageLabel?this.state.companyEntity.imageLabel:""}/></p>
				<p><input id="CompanyEntityImageName" name="imageName" className="input_field fields" type="text" defaultValue={this.state.companyEntity.imageName?this.state.companyEntity.imageName:""}/></p>
				<p><input id="CompanyEntityImageType" name="imageType" className="input_field fields" type="text" defaultValue={this.state.companyEntity.imageType?this.state.companyEntity.imageType:""}/></p>
				<p><input id="CompanyEntityImageUrl" name="imageUrl" className="input_field fields" type="text" defaultValue={this.state.companyEntity.imageUrl?this.state.companyEntity.imageUrl:""}/></p>
				<p><input id="CompanyEntityImageCredit" name="imageCredit" className="input_field fields" type="text" defaultValue={this.state.companyEntity.imageCredit?this.state.companyEntity.imageCredit:""}/></p>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateImage (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('companyEntityId',this.state.companyEntity.companyEntityId) ;
		form.append('label',document.getElementById("CompanyEntityLabel").value) ;
		form.append('url',document.getElementById("CompanyEntityUrl").value) ;
		form.append('phone',document.getElementById("CompanyEntityPhone").value) ;
		form.append('shortDescription',document.getElementById("CompanyEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/company/update",form).then(response=>{this.zoomin(response.data.companyEntityId)}) ;
		Axios.post(getPrefix()+"/app/company/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/company/updatelongdescription",form) ;
	}
	renderUploadImage ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeUploadImage(event)}}>
			<input type="file" accept="image/*" id="myFile" name="image" onChange={(event)=>{this.executeUploadImage(event)}}/>
			<input className="upload_image_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeUploadImage (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('companyEntityId',this.state.companyEntity.companyEntityId) ;
		Axios.post(getPrefix()+"/app/company/uploadimage",form)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
	renderDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Company?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeDelete (event)
	{
		Axios.get(getPrefix()+"/app/company/delete?sessionToken="+getSessionToken()+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	renderApprove ()
	{
	}
	executeApprove (event)
	{
		Axios.get(getPrefix()+"/app/company/approve?sessionToken="+getSessionToken()+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
	renderUnapprove ()
	{
	}
	executeUnapprove (event)
	{
		Axios.get(getPrefix()+"/app/company/unapprove?sessionToken="+getSessionToken()+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
	renderReject ()
	{
	}
	executeReject (event)
	{
		Axios.get(getPrefix()+"/app/company/reject?sessionToken="+getSessionToken()+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
	renderUnreject ()
	{
	}
	executeUnreject (event)
	{
		Axios.get(getPrefix()+"/app/company/unreject?sessionToken="+getSessionToken()+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
	renderSubscribe ()
	{
	}
	executeSubscribe (event)
	{
		Axios.get(getPrefix()+"/app/company/subscribe?sessionToken="+getSessionToken()+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
	renderUnsubscribe ()
	{
	}
	executeUnsubscribe (event)
	{
		Axios.get(getPrefix()+"/app/company/unsubscribe?sessionToken="+getSessionToken()+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
	renderRate ()
	{
	}
	executeRate (event)
	{
		Axios.get(getPrefix()+"/app/company/rate?sessionToken="+getSessionToken()+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
	renderComment ()
	{
	}
	executeComment (event)
	{
		Axios.get(getPrefix()+"/app/company/comment?sessionToken="+getSessionToken()+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
	renderAccept ()
	{
	}
	executeAccept (event)
	{
		Axios.get(getPrefix()+"/app/company/accept?sessionToken="+getSessionToken()+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
	renderDecline ()
	{
	}
	executeDecline (event)
	{
		Axios.get(getPrefix()+"/app/company/decline?sessionToken="+getSessionToken()+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
	renderQuit ()
	{
	}
	executeQuit (event)
	{
		Axios.get(getPrefix()+"/app/company/quit?sessionToken="+getSessionToken()+"&companyEntityId="+this.state.companyEntity.companyEntityId,null)
			.then(response=>{this.zoomin(this.state.companyEntity.companyEntityId)}) ;
	}
}

class CompanyUserEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			companyUserEntity:{},
			companyUserEntityList:[],
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (companyUserEntityId)
	{
		if (!companyUserEntityId) companyUserEntityId = this.state.companyUserEntity.companyUserEntityId ;
		Axios.get(getPrefix()+"/app/companyuser/view?sessionToken="+getSessionToken()+"&companyUserEntityId="+companyUserEntityId,null)
			.then(response=>{this.setState({command:"View",companyUserEntity:response.data})}) ;
		Axios.get(getPrefix()+"/app/companyuser/textlongdescription?sessionToken="+getSessionToken()+"&companyUserEntityId="+companyUserEntityId,null)
			.then(response=>{this.setState({longDescription:response.data})}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/companyuser/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",companyUserEntityList:response.data,companyUserEntity:{}})}) ;
		else if (commandList==="ListByCompany")
			Axios.get(getPrefix()+"/app/companyuser/listbycompany?sessionToken="+getSessionToken()+"&page="+this.page+"&companyEntityId="+props.companyEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"List",companyUserEntityList:response.data,companyUserEntity:{}})}) ;
		else if (commandList==="ListByLongDescription")
			Axios.get(getPrefix()+"/app/companyuser/listbylongdescription?sessionToken="+getSessionToken()+"&page="+this.page+"&companyEntityId="+props.companyEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"List",companyUserEntityList:response.data,companyUserEntity:{}})}) ;
		else
			Axios.get(getPrefix()+"/app/companyuser/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",companyUserEntityList:response.data,companyUserEntity:{}})}) ;
	}
	adminPermission ()
	{
		return (true) ;
	}
	menu ()
	{
		if (this.state.companyUserEntity.companyUserEntityId)
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListByCompany")}}>ListByCompany</button>}
						{<button className="menu-action" onClick={()=>{this.zoomout("ListByLongDescription")}}>ListByLongDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("View")}}>View</button>}
						{<button className="menu-action" onClick={()=>{this.command("TextLongDescription")}}>TextLongDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Update")}}>Update</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Delete")}}>Delete</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Approve")}}>Approve</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Unapprove")}}>Unapprove</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Reject")}}>Reject</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Unreject")}}>Unreject</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
		else
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListByCompany")}}>ListByCompany</button>}
						{<button className="menu-action" onClick={()=>{this.zoomout("ListByLongDescription")}}>ListByLongDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderView() ;
		else if (this.state.command==="Create")
			return this.renderCreate() ;
		else if (this.state.command==="Update")
			return this.renderUpdate() ;
		else if (this.state.command==="Delete")
			return this.renderDelete() ;
		else if (this.state.command==="Approve")
			return this.renderApprove() ;
		else if (this.state.command==="Unapprove")
			return this.renderUnapprove() ;
		else if (this.state.command==="Reject")
			return this.renderReject() ;
		else if (this.state.command==="Unreject")
			return this.renderUnreject() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='entityListDiv' id={this.id+"list"}>
				{this.menu()}
				<div className='signinDiv' id={this.id}>
					{getSession()?'User:'+ ' ' + getSession().label:'loading...'}
				</div>
				{this.state.companyUserEntityList?.map(companyUserEntity=>
					(
						<div className="list-card" key={companyUserEntity.companyUserEntityId} onClick={()=>{this.zoomin(companyUserEntity.companyUserEntityId)}} style={{cursor:'pointer'}}>
							<p>{companyUserEntity.label}</p>
							<p>[shortDescription goes here]</p>
						</div>
					))}
			</div>
		) ;
	}
	renderView ()
	{
		return(
			<div className='entityViewDiv' id={this.id+"view"}>
				{this.menu()}
				<div className="list-card" >
				</div>
				<p>{this.state.longDescription?this.state.longDescription:''}</p>
			</div>
		) ;
	}
	renderCreate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCreate(event)}}>
				<div className="editor_field fields"><Editor id="CompanyUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="create_button" type="submit">Create</button></div>
				</form>
			</div>
		) ;
	}
	executeCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/companyuser/create",form).then(response=>{this.zoomin(response.data.companyUserEntityId)}) ;
	}
	renderUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<div className="editor_field fields"><Editor id="CompanyUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('companyUserEntityId',this.state.companyUserEntity.companyUserEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/companyuser/update",form).then(response=>{this.zoomin(response.data.companyUserEntityId)}) ;
		Axios.post(getPrefix()+"/app/companyuser/updatelongdescription",form) ;
	}
	renderDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this CompanyUser?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeDelete (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/delete?sessionToken="+getSessionToken()+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	renderApprove ()
	{
	}
	executeApprove (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/approve?sessionToken="+getSessionToken()+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
	renderUnapprove ()
	{
	}
	executeUnapprove (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/unapprove?sessionToken="+getSessionToken()+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
	renderReject ()
	{
	}
	executeReject (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/reject?sessionToken="+getSessionToken()+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
	renderUnreject ()
	{
	}
	executeUnreject (event)
	{
		Axios.get(getPrefix()+"/app/companyuser/unreject?sessionToken="+getSessionToken()+"&companyUserEntityId="+this.state.companyUserEntity.companyUserEntityId,null)
			.then(response=>{this.zoomin(this.state.companyUserEntity.companyUserEntityId)}) ;
	}
}

class FontEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			fontEntity:{},
			fontEntityList:[],
		} ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (fontEntityId)
	{
		if (!fontEntityId) fontEntityId = this.state.fontEntity.fontEntityId ;
		Axios.get(getPrefix()+"/app/font/view?sessionToken="+getSessionToken()+"&fontEntityId="+fontEntityId,null)
			.then(response=>{this.setState({command:"View",fontEntity:response.data})}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/font/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",fontEntityList:response.data,fontEntity:{}})}) ;
		else
			Axios.get(getPrefix()+"/app/font/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",fontEntityList:response.data,fontEntity:{}})}) ;
	}
	menu ()
	{
		if (this.state.fontEntity.fontEntityId)
			return (
				<div className="menu">
					<div>
						{<button className="menu-action" onClick={()=>{this.command("FileEot")}}>FileEot</button>}
						{<button className="menu-action" onClick={()=>{this.command("FileSvg")}}>FileSvg</button>}
						{<button className="menu-action" onClick={()=>{this.command("FileTtf")}}>FileTtf</button>}
						{<button className="menu-action" onClick={()=>{this.command("FileWoff")}}>FileWoff</button>}
						{<button className="menu-action" onClick={()=>{this.command("FileWoff2")}}>FileWoff2</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Update")}}>Update</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateEot")}}>UpdateEot</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadEot")}}>UploadEot</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateSvg")}}>UpdateSvg</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadSvg")}}>UploadSvg</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateTtf")}}>UpdateTtf</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadTtf")}}>UploadTtf</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateWoff")}}>UpdateWoff</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadWoff")}}>UploadWoff</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateWoff2")}}>UpdateWoff2</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadWoff2")}}>UploadWoff2</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Delete")}}>Delete</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
		else
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="FileEot")
			return this.renderFileEot() ;
		else if (this.state.command==="FileSvg")
			return this.renderFileSvg() ;
		else if (this.state.command==="FileTtf")
			return this.renderFileTtf() ;
		else if (this.state.command==="FileWoff")
			return this.renderFileWoff() ;
		else if (this.state.command==="FileWoff2")
			return this.renderFileWoff2() ;
		else if (this.state.command==="Create")
			return this.renderCreate() ;
		else if (this.state.command==="Update")
			return this.renderUpdate() ;
		else if (this.state.command==="UpdateEot")
			return this.renderUpdateEot() ;
		else if (this.state.command==="UploadEot")
			return this.renderUploadEot() ;
		else if (this.state.command==="UpdateSvg")
			return this.renderUpdateSvg() ;
		else if (this.state.command==="UploadSvg")
			return this.renderUploadSvg() ;
		else if (this.state.command==="UpdateTtf")
			return this.renderUpdateTtf() ;
		else if (this.state.command==="UploadTtf")
			return this.renderUploadTtf() ;
		else if (this.state.command==="UpdateWoff")
			return this.renderUpdateWoff() ;
		else if (this.state.command==="UploadWoff")
			return this.renderUploadWoff() ;
		else if (this.state.command==="UpdateWoff2")
			return this.renderUpdateWoff2() ;
		else if (this.state.command==="UploadWoff2")
			return this.renderUploadWoff2() ;
		else if (this.state.command==="Delete")
			return this.renderDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='entityListDiv' id={this.id+"list"}>
				{this.menu()}
				<div className='signinDiv' id={this.id}>
					{getSession()?'User:'+ ' ' + getSession().label:'loading...'}
				</div>
				{this.state.fontEntityList?.map(fontEntity=>
					(
						<div className="list-card" key={fontEntity.fontEntityId} onClick={()=>{this.zoomin(fontEntity.fontEntityId)}} style={{cursor:'pointer'}}>
							<p>{fontEntity.label}</p>
							<p>[shortDescription goes here]</p>
						</div>
					))}
			</div>
		) ;
	}
	renderCreate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCreate(event)}}>
				<p><input id="FontEntityName" name="name" className="input_field fields" type="text" placeholder="Enter name..."/></p>
				<p><input id="FontEntityLabel" name="label" className="input_field fields" type="text" placeholder="Enter label..."/></p>
				<div className="button"><button className="create_button" type="submit">Create</button></div>
				</form>
			</div>
		) ;
	}
	executeCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('name',document.getElementById("FontEntityName").value) ;
		form.append('label',document.getElementById("FontEntityLabel").value) ;
		Axios.post(getPrefix()+"/app/font/create",form).then(response=>{this.zoomin(response.data.fontEntityId)}) ;
	}
	renderUpdate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="FontEntityName" name="name" className="input_field fields" type="text" defaultValue={this.state.fontEntity.name?this.state.fontEntity.name:""}/></p>
				<p><input id="FontEntityLabel" name="label" className="input_field fields" type="text" defaultValue={this.state.fontEntity.label?this.state.fontEntity.label:""}/></p>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		form.append('name',document.getElementById("FontEntityName").value) ;
		form.append('label',document.getElementById("FontEntityLabel").value) ;
		Axios.post(getPrefix()+"/app/font/update",form).then(response=>{this.zoomin(response.data.fontEntityId)}) ;
	}
	renderUpdateEot ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="FontEntityName" name="name" className="input_field fields" type="text" defaultValue={this.state.fontEntity.name?this.state.fontEntity.name:""}/></p>
				<p><input id="FontEntityLabel" name="label" className="input_field fields" type="text" defaultValue={this.state.fontEntity.label?this.state.fontEntity.label:""}/></p>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateEot (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		form.append('name',document.getElementById("FontEntityName").value) ;
		form.append('label',document.getElementById("FontEntityLabel").value) ;
		Axios.post(getPrefix()+"/app/font/update",form).then(response=>{this.zoomin(response.data.fontEntityId)}) ;
	}
	renderUpdateSvg ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="FontEntityName" name="name" className="input_field fields" type="text" defaultValue={this.state.fontEntity.name?this.state.fontEntity.name:""}/></p>
				<p><input id="FontEntityLabel" name="label" className="input_field fields" type="text" defaultValue={this.state.fontEntity.label?this.state.fontEntity.label:""}/></p>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateSvg (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		form.append('name',document.getElementById("FontEntityName").value) ;
		form.append('label',document.getElementById("FontEntityLabel").value) ;
		Axios.post(getPrefix()+"/app/font/update",form).then(response=>{this.zoomin(response.data.fontEntityId)}) ;
	}
	renderUpdateTtf ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="FontEntityName" name="name" className="input_field fields" type="text" defaultValue={this.state.fontEntity.name?this.state.fontEntity.name:""}/></p>
				<p><input id="FontEntityLabel" name="label" className="input_field fields" type="text" defaultValue={this.state.fontEntity.label?this.state.fontEntity.label:""}/></p>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateTtf (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		form.append('name',document.getElementById("FontEntityName").value) ;
		form.append('label',document.getElementById("FontEntityLabel").value) ;
		Axios.post(getPrefix()+"/app/font/update",form).then(response=>{this.zoomin(response.data.fontEntityId)}) ;
	}
	renderUpdateWoff ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="FontEntityName" name="name" className="input_field fields" type="text" defaultValue={this.state.fontEntity.name?this.state.fontEntity.name:""}/></p>
				<p><input id="FontEntityLabel" name="label" className="input_field fields" type="text" defaultValue={this.state.fontEntity.label?this.state.fontEntity.label:""}/></p>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateWoff (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		form.append('name',document.getElementById("FontEntityName").value) ;
		form.append('label',document.getElementById("FontEntityLabel").value) ;
		Axios.post(getPrefix()+"/app/font/update",form).then(response=>{this.zoomin(response.data.fontEntityId)}) ;
	}
	renderUpdateWoff2 ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="FontEntityName" name="name" className="input_field fields" type="text" defaultValue={this.state.fontEntity.name?this.state.fontEntity.name:""}/></p>
				<p><input id="FontEntityLabel" name="label" className="input_field fields" type="text" defaultValue={this.state.fontEntity.label?this.state.fontEntity.label:""}/></p>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateWoff2 (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('fontEntityId',this.state.fontEntity.fontEntityId) ;
		form.append('name',document.getElementById("FontEntityName").value) ;
		form.append('label',document.getElementById("FontEntityLabel").value) ;
		Axios.post(getPrefix()+"/app/font/update",form).then(response=>{this.zoomin(response.data.fontEntityId)}) ;
	}
	renderDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Font?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeDelete (event)
	{
		Axios.get(getPrefix()+"/app/font/delete?sessionToken="+getSessionToken()+"&fontEntityId="+this.state.fontEntity.fontEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class ImageEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			imageEntity:{},
			imageEntityList:[],
		} ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (imageEntityId)
	{
		if (!imageEntityId) imageEntityId = this.state.imageEntity.imageEntityId ;
		Axios.get(getPrefix()+"/app/image/view?sessionToken="+getSessionToken()+"&imageEntityId="+imageEntityId,null)
			.then(response=>{this.setState({command:"View",imageEntity:response.data})}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/image/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",imageEntityList:response.data,imageEntity:{}})}) ;
		else
			Axios.get(getPrefix()+"/app/image/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",imageEntityList:response.data,imageEntity:{}})}) ;
	}
	menu ()
	{
		if (this.state.imageEntity.imageEntityId)
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("View")}}>View</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Update")}}>Update</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateImage")}}>UpdateImage</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadImage")}}>UploadImage</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Delete")}}>Delete</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
		else
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderView() ;
		else if (this.state.command==="Create")
			return this.renderCreate() ;
		else if (this.state.command==="Update")
			return this.renderUpdate() ;
		else if (this.state.command==="UpdateImage")
			return this.renderUpdateImage() ;
		else if (this.state.command==="UploadImage")
			return this.renderUploadImage() ;
		else if (this.state.command==="Delete")
			return this.renderDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='entityListDiv' id={this.id+"list"}>
				{this.menu()}
				<div className='signinDiv' id={this.id}>
					{getSession()?'User:'+ ' ' + getSession().label:'loading...'}
				</div>
				{this.state.imageEntityList?.map(imageEntity=>
					(
						<div className="list-card" key={imageEntity.imageEntityId} onClick={()=>{this.zoomin(imageEntity.imageEntityId)}} style={{cursor:'pointer'}}>
							<p>{imageEntity.label}</p>
							<p>[shortDescription goes here]</p>
						</div>
					))}
			</div>
		) ;
	}
	renderView ()
	{
		return(
			<div className='entityViewDiv' id={this.id+"view"}>
				{this.menu()}
				<div className="list-card" >
					<img className="image" alt='{imageEntity.label}' src={getPrefix()+`/app/image/imageimage?imageEntityId=${this.state.imageEntity.imageEntityId}`}/>
				</div>
			</div>
		) ;
	}
	renderCreate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCreate(event)}}>
				<div className="button"><button className="create_button" type="submit">Create</button></div>
				</form>
			</div>
		) ;
	}
	executeCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		Axios.post(getPrefix()+"/app/image/create",form).then(response=>{this.zoomin(response.data.imageEntityId)}) ;
	}
	renderUpdate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('imageEntityId',this.state.imageEntity.imageEntityId) ;
		Axios.post(getPrefix()+"/app/image/update",form).then(response=>{this.zoomin(response.data.imageEntityId)}) ;
	}
	renderUpdateImage ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="ImageEntityImageLabel" name="imageLabel" className="input_field fields" type="text" defaultValue={this.state.imageEntity.imageLabel?this.state.imageEntity.imageLabel:""}/></p>
				<p><input id="ImageEntityImageName" name="imageName" className="input_field fields" type="text" defaultValue={this.state.imageEntity.imageName?this.state.imageEntity.imageName:""}/></p>
				<p><input id="ImageEntityImageType" name="imageType" className="input_field fields" type="text" defaultValue={this.state.imageEntity.imageType?this.state.imageEntity.imageType:""}/></p>
				<p><input id="ImageEntityImageUrl" name="imageUrl" className="input_field fields" type="text" defaultValue={this.state.imageEntity.imageUrl?this.state.imageEntity.imageUrl:""}/></p>
				<p><input id="ImageEntityImageCredit" name="imageCredit" className="input_field fields" type="text" defaultValue={this.state.imageEntity.imageCredit?this.state.imageEntity.imageCredit:""}/></p>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateImage (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('imageEntityId',this.state.imageEntity.imageEntityId) ;
		Axios.post(getPrefix()+"/app/image/update",form).then(response=>{this.zoomin(response.data.imageEntityId)}) ;
	}
	renderUploadImage ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeUploadImage(event)}}>
			<input type="file" accept="image/*" id="myFile" name="image" onChange={(event)=>{this.executeUploadImage(event)}}/>
			<input className="upload_image_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeUploadImage (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('imageEntityId',this.state.imageEntity.imageEntityId) ;
		Axios.post(getPrefix()+"/app/image/uploadimage",form)
			.then(response=>{this.zoomin(this.state.imageEntity.imageEntityId)}) ;
	}
	renderDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Image?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeDelete (event)
	{
		Axios.get(getPrefix()+"/app/image/delete?sessionToken="+getSessionToken()+"&imageEntityId="+this.state.imageEntity.imageEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class MainEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			mainEntity:{},
			mainEntityList:[],
			plainSignature:null,
			htmlSignature:null,
			header:null,
			footer:null,
		} ;
		this.htmlSignatureEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (mainEntityId)
	{
		if (!mainEntityId) mainEntityId = this.state.mainEntity.mainEntityId ;
		Axios.get(getPrefix()+"/app/main/view?sessionToken="+getSessionToken()+"&mainEntityId="+mainEntityId,null)
			.then(response=>{this.setState({command:"View",mainEntity:response.data})}) ;
		Axios.get(getPrefix()+"/app/main/textplainsignature?sessionToken="+getSessionToken()+"&mainEntityId="+mainEntityId,null)
			.then(response=>{this.setState({plainSignature:response.data})}) ;
		Axios.get(getPrefix()+"/app/main/texthtmlsignature?sessionToken="+getSessionToken()+"&mainEntityId="+mainEntityId,null)
			.then(response=>{this.setState({htmlSignature:response.data})}) ;
		Axios.get(getPrefix()+"/app/main/textheader?sessionToken="+getSessionToken()+"&mainEntityId="+mainEntityId,null)
			.then(response=>{this.setState({header:response.data})}) ;
		Axios.get(getPrefix()+"/app/main/textfooter?sessionToken="+getSessionToken()+"&mainEntityId="+mainEntityId,null)
			.then(response=>{this.setState({footer:response.data})}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/main/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",mainEntityList:response.data,mainEntity:{}})}) ;
		else
			Axios.get(getPrefix()+"/app/main/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",mainEntityList:response.data,mainEntity:{}})}) ;
	}
	menu ()
	{
		if (this.state.mainEntity.mainEntityId)
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("View")}}>View</button>}
						{<button className="menu-action" onClick={()=>{this.command("TextHeader")}}>TextHeader</button>}
						{<button className="menu-action" onClick={()=>{this.command("TextFooter")}}>TextFooter</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Update")}}>Update</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadPlainSignature")}}>UploadPlainSignature</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadHtmlSignature")}}>UploadHtmlSignature</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadHeader")}}>UploadHeader</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadFooter")}}>UploadFooter</button>}
						{<button className="menu-action" onClick={()=>{this.command("FileReact")}}>FileReact</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateReact")}}>UpdateReact</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadReact")}}>UploadReact</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Delete")}}>Delete</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
		else
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderView() ;
		else if (this.state.command==="Create")
			return this.renderCreate() ;
		else if (this.state.command==="Update")
			return this.renderUpdate() ;
		else if (this.state.command==="UploadPlainSignature")
			return this.renderUploadPlainSignature() ;
		else if (this.state.command==="UploadHtmlSignature")
			return this.renderUploadHtmlSignature() ;
		else if (this.state.command==="UploadHeader")
			return this.renderUploadHeader() ;
		else if (this.state.command==="UploadFooter")
			return this.renderUploadFooter() ;
		else if (this.state.command==="FileReact")
			return this.renderFileReact() ;
		else if (this.state.command==="UpdateReact")
			return this.renderUpdateReact() ;
		else if (this.state.command==="UploadReact")
			return this.renderUploadReact() ;
		else if (this.state.command==="Delete")
			return this.renderDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='entityListDiv' id={this.id+"list"}>
				{this.menu()}
				<div className='signinDiv' id={this.id}>
					{getSession()?'User:'+ ' ' + getSession().label:'loading...'}
				</div>
				{this.state.mainEntityList?.map(mainEntity=>
					(
						<div className="list-card" key={mainEntity.mainEntityId} onClick={()=>{this.zoomin(mainEntity.mainEntityId)}} style={{cursor:'pointer'}}>
							<p>{mainEntity.label}</p>
							<p>[shortDescription goes here]</p>
						</div>
					))}
			</div>
		) ;
	}
	renderView ()
	{
		return(
			<div className='entityViewDiv' id={this.id+"view"}>
				{this.menu()}
				<div className="list-card" >
					<p>{this.state.mainEntity?this.state.mainEntity.label:null}</p>
				</div>
				<p>Label: {this.state.label?this.state.label:''}</p>
				<p>Language: {this.state.language?this.state.language:''}</p>
				<p>Tagline: {this.state.tagline?this.state.tagline:''}</p>
				<p>Keywords: {this.state.keywords?this.state.keywords:''}</p>
				<p>Logo: {this.state.logo?this.state.logo:''}</p>
				<p>UseReact: {this.state.useReact?this.state.useReact:''}</p>
				<p>{this.state.plainSignature?this.state.plainSignature:''}</p>
				<p>{this.state.htmlSignature?this.state.htmlSignature:''}</p>
				<p>{this.state.header?this.state.header:''}</p>
				<p>{this.state.footer?this.state.footer:''}</p>
			</div>
		) ;
	}
	renderCreate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCreate(event)}}>
				<p><input id="MainEntityLabel" name="label" className="input_field fields" type="text" placeholder="Enter label..."/></p>
				<p><input id="MainEntityLanguage" name="language" className="input_field fields" type="text" placeholder="Enter language..."/></p>
				<p><input id="MainEntityTagline" name="tagline" className="input_field fields" type="text" placeholder="Enter tagline..."/></p>
				<p><input id="MainEntityKeywords" name="keywords" className="input_field fields" type="text" placeholder="Enter keywords..."/></p>
				<p><input id="MainEntityLogo" name="logo" className="input_field fields" type="text" placeholder="Enter logo..."/></p>
				<p><input id="MainEntityUseReact" name="useReact" className="input_field fields" type="text" placeholder="Enter useReact..."/></p>
				<textarea id="MainEntityPlainSignature" name="plainSignature" className="text_area fields" placeholder="Enter plainSignature..." rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="MainEntityHtmlSignature" name="htmlSignature" onEditorStateChange={(editorState)=>{this.htmlSignatureEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter htmlSignature..."/></div>
				<textarea id="MainEntityHeader" name="header" className="text_area fields" placeholder="Enter header..." rows="4" cols="50"></textarea>
				<textarea id="MainEntityFooter" name="footer" className="text_area fields" placeholder="Enter footer..." rows="4" cols="50"></textarea>
				<div className="button"><button className="create_button" type="submit">Create</button></div>
				</form>
			</div>
		) ;
	}
	executeCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('label',document.getElementById("MainEntityLabel").value) ;
		form.append('language',document.getElementById("MainEntityLanguage").value) ;
		form.append('tagline',document.getElementById("MainEntityTagline").value) ;
		form.append('keywords',document.getElementById("MainEntityKeywords").value) ;
		form.append('logo',document.getElementById("MainEntityLogo").value) ;
		form.append('useReact',document.getElementById("MainEntityUseReact").value) ;
		form.append('plainSignature',document.getElementById("MainEntityPlainSignature").value) ;
		form.append('htmlSignature',draftToHtml(convertToRaw(this.htmlSignatureEditorState.getCurrentContent()))) ;
		form.append('header',document.getElementById("MainEntityHeader").value) ;
		form.append('footer',document.getElementById("MainEntityFooter").value) ;
		Axios.post(getPrefix()+"/app/main/create",form).then(response=>{this.zoomin(response.data.mainEntityId)}) ;
	}
	renderUpdate ()
	{
		this.htmlSignatureEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="MainEntityLabel" name="label" className="input_field fields" type="text" defaultValue={this.state.mainEntity.label?this.state.mainEntity.label:""}/></p>
				<p><input id="MainEntityLanguage" name="language" className="input_field fields" type="text" defaultValue={this.state.mainEntity.language?this.state.mainEntity.language:""}/></p>
				<p><input id="MainEntityTagline" name="tagline" className="input_field fields" type="text" defaultValue={this.state.mainEntity.tagline?this.state.mainEntity.tagline:""}/></p>
				<p><input id="MainEntityKeywords" name="keywords" className="input_field fields" type="text" defaultValue={this.state.mainEntity.keywords?this.state.mainEntity.keywords:""}/></p>
				<p><input id="MainEntityLogo" name="logo" className="input_field fields" type="text" defaultValue={this.state.mainEntity.logo?this.state.mainEntity.logo:""}/></p>
				<p><input id="MainEntityUseReact" name="useReact" className="input_field fields" type="text" defaultValue={this.state.mainEntity.useReact?this.state.mainEntity.useReact:""}/></p>
				<textarea id="MainEntityPlainSignature" name="plainSignature" className="text_area fields" defaultValue={this.state.plainSignature?this.state.plainSignature:""} rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="MainEntityHtmlSignature" name="htmlSignature" onEditorStateChange={(editorState)=>{this.htmlSignatureEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter htmlSignature..."/></div>
				<textarea id="MainEntityHeader" name="header" className="text_area fields" defaultValue={this.state.header?this.state.header:""} rows="4" cols="50"></textarea>
				<textarea id="MainEntityFooter" name="footer" className="text_area fields" defaultValue={this.state.footer?this.state.footer:""} rows="4" cols="50"></textarea>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('mainEntityId',this.state.mainEntity.mainEntityId) ;
		form.append('label',document.getElementById("MainEntityLabel").value) ;
		form.append('language',document.getElementById("MainEntityLanguage").value) ;
		form.append('tagline',document.getElementById("MainEntityTagline").value) ;
		form.append('keywords',document.getElementById("MainEntityKeywords").value) ;
		form.append('logo',document.getElementById("MainEntityLogo").value) ;
		form.append('useReact',document.getElementById("MainEntityUseReact").value) ;
		form.append('plainSignature',document.getElementById("MainEntityPlainSignature").value) ;
		form.append('htmlSignature',draftToHtml(convertToRaw(this.htmlSignatureEditorState.getCurrentContent()))) ;
		form.append('header',document.getElementById("MainEntityHeader").value) ;
		form.append('footer',document.getElementById("MainEntityFooter").value) ;
		Axios.post(getPrefix()+"/app/main/update",form).then(response=>{this.zoomin(response.data.mainEntityId)}) ;
		Axios.post(getPrefix()+"/app/main/updateplainsignature",form) ;
		Axios.post(getPrefix()+"/app/main/updatehtmlsignature",form) ;
		Axios.post(getPrefix()+"/app/main/updateheader",form) ;
		Axios.post(getPrefix()+"/app/main/updatefooter",form) ;
	}
	renderUpdateReact ()
	{
		this.htmlSignatureEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="MainEntityLabel" name="label" className="input_field fields" type="text" defaultValue={this.state.mainEntity.label?this.state.mainEntity.label:""}/></p>
				<p><input id="MainEntityLanguage" name="language" className="input_field fields" type="text" defaultValue={this.state.mainEntity.language?this.state.mainEntity.language:""}/></p>
				<p><input id="MainEntityTagline" name="tagline" className="input_field fields" type="text" defaultValue={this.state.mainEntity.tagline?this.state.mainEntity.tagline:""}/></p>
				<p><input id="MainEntityKeywords" name="keywords" className="input_field fields" type="text" defaultValue={this.state.mainEntity.keywords?this.state.mainEntity.keywords:""}/></p>
				<p><input id="MainEntityLogo" name="logo" className="input_field fields" type="text" defaultValue={this.state.mainEntity.logo?this.state.mainEntity.logo:""}/></p>
				<p><input id="MainEntityUseReact" name="useReact" className="input_field fields" type="text" defaultValue={this.state.mainEntity.useReact?this.state.mainEntity.useReact:""}/></p>
				<textarea id="MainEntityPlainSignature" name="plainSignature" className="text_area fields" defaultValue={this.state.plainSignature?this.state.plainSignature:""} rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="MainEntityHtmlSignature" name="htmlSignature" onEditorStateChange={(editorState)=>{this.htmlSignatureEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter htmlSignature..."/></div>
				<textarea id="MainEntityHeader" name="header" className="text_area fields" defaultValue={this.state.header?this.state.header:""} rows="4" cols="50"></textarea>
				<textarea id="MainEntityFooter" name="footer" className="text_area fields" defaultValue={this.state.footer?this.state.footer:""} rows="4" cols="50"></textarea>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateReact (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('mainEntityId',this.state.mainEntity.mainEntityId) ;
		form.append('label',document.getElementById("MainEntityLabel").value) ;
		form.append('language',document.getElementById("MainEntityLanguage").value) ;
		form.append('tagline',document.getElementById("MainEntityTagline").value) ;
		form.append('keywords',document.getElementById("MainEntityKeywords").value) ;
		form.append('logo',document.getElementById("MainEntityLogo").value) ;
		form.append('useReact',document.getElementById("MainEntityUseReact").value) ;
		form.append('plainSignature',document.getElementById("MainEntityPlainSignature").value) ;
		form.append('htmlSignature',draftToHtml(convertToRaw(this.htmlSignatureEditorState.getCurrentContent()))) ;
		form.append('header',document.getElementById("MainEntityHeader").value) ;
		form.append('footer',document.getElementById("MainEntityFooter").value) ;
		Axios.post(getPrefix()+"/app/main/update",form).then(response=>{this.zoomin(response.data.mainEntityId)}) ;
		Axios.post(getPrefix()+"/app/main/updateplainsignature",form) ;
		Axios.post(getPrefix()+"/app/main/updatehtmlsignature",form) ;
		Axios.post(getPrefix()+"/app/main/updateheader",form) ;
		Axios.post(getPrefix()+"/app/main/updatefooter",form) ;
	}
	renderDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Main?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeDelete (event)
	{
		Axios.get(getPrefix()+"/app/main/delete?sessionToken="+getSessionToken()+"&mainEntityId="+this.state.mainEntity.mainEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class PageEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			pageEntity:{},
			pageEntityList:[],
			shortDescription:null,
			body:null,
		} ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (pageEntityId)
	{
		if (!pageEntityId) pageEntityId = this.state.pageEntity.pageEntityId ;
		Axios.get(getPrefix()+"/app/page/view?sessionToken="+getSessionToken()+"&pageEntityId="+pageEntityId,null)
			.then(response=>{this.setState({command:"View",pageEntity:response.data})}) ;
		Axios.get(getPrefix()+"/app/page/textshortdescription?sessionToken="+getSessionToken()+"&pageEntityId="+pageEntityId,null)
			.then(response=>{this.setState({shortDescription:response.data})}) ;
		Axios.get(getPrefix()+"/app/page/textbody?sessionToken="+getSessionToken()+"&pageEntityId="+pageEntityId,null)
			.then(response=>{this.setState({body:response.data})}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/page/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",pageEntityList:response.data,pageEntity:{}})}) ;
		else
			Axios.get(getPrefix()+"/app/page/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",pageEntityList:response.data,pageEntity:{}})}) ;
	}
	menu ()
	{
		if (this.state.pageEntity.pageEntityId)
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("View")}}>View</button>}
						{<button className="menu-action" onClick={()=>{this.command("TextBody")}}>TextBody</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Update")}}>Update</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadBody")}}>UploadBody</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Delete")}}>Delete</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
		else
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderView() ;
		else if (this.state.command==="Create")
			return this.renderCreate() ;
		else if (this.state.command==="Update")
			return this.renderUpdate() ;
		else if (this.state.command==="UploadBody")
			return this.renderUploadBody() ;
		else if (this.state.command==="Delete")
			return this.renderDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='entityListDiv' id={this.id+"list"}>
				{this.menu()}
				<div className='signinDiv' id={this.id}>
					{getSession()?'User:'+ ' ' + getSession().label:'loading...'}
				</div>
				{this.state.pageEntityList?.map(pageEntity=>
					(
						<div className="list-card" key={pageEntity.pageEntityId} onClick={()=>{this.zoomin(pageEntity.pageEntityId)}} style={{cursor:'pointer'}}>
							<p>{pageEntity.label}</p>
							<p>[shortDescription goes here]</p>
						</div>
					))}
			</div>
		) ;
	}
	renderView ()
	{
		return(
			<div className='entityViewDiv' id={this.id+"view"}>
				{this.menu()}
				<div className="list-card" >
					<p>{this.state.pageEntity?this.state.pageEntity.label:null}</p>
				</div>
				<p>Name: {this.state.name?this.state.name:''}</p>
				<p>Language: {this.state.language?this.state.language:''}</p>
				<p>Label: {this.state.label?this.state.label:''}</p>
				<p>Plain: {this.state.plain?this.state.plain:''}</p>
				<p>{this.state.shortDescription?this.state.shortDescription:''}</p>
				<p>{this.state.body?this.state.body:''}</p>
			</div>
		) ;
	}
	renderCreate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCreate(event)}}>
				<p><input id="PageEntityName" name="name" className="input_field fields" type="text" placeholder="Enter name..."/></p>
				<p><input id="PageEntityLanguage" name="language" className="input_field fields" type="text" placeholder="Enter language..."/></p>
				<p><input id="PageEntityLabel" name="label" className="input_field fields" type="text" placeholder="Enter label..."/></p>
				<p><input id="PageEntityPlain" name="plain" className="input_field fields" type="text" placeholder="Enter plain..."/></p>
				<textarea id="PageEntityShortDescription" name="shortDescription" className="text_area fields" placeholder="Enter shortDescription..." rows="4" cols="50"></textarea>
				<textarea id="PageEntityBody" name="body" className="text_area fields" placeholder="Enter body..." rows="4" cols="50"></textarea>
				<div className="button"><button className="create_button" type="submit">Create</button></div>
				</form>
			</div>
		) ;
	}
	executeCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('name',document.getElementById("PageEntityName").value) ;
		form.append('language',document.getElementById("PageEntityLanguage").value) ;
		form.append('label',document.getElementById("PageEntityLabel").value) ;
		form.append('plain',document.getElementById("PageEntityPlain").value) ;
		form.append('shortDescription',document.getElementById("PageEntityShortDescription").value) ;
		form.append('body',document.getElementById("PageEntityBody").value) ;
		Axios.post(getPrefix()+"/app/page/create",form).then(response=>{this.zoomin(response.data.pageEntityId)}) ;
	}
	renderUpdate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="PageEntityName" name="name" className="input_field fields" type="text" defaultValue={this.state.pageEntity.name?this.state.pageEntity.name:""}/></p>
				<p><input id="PageEntityLanguage" name="language" className="input_field fields" type="text" defaultValue={this.state.pageEntity.language?this.state.pageEntity.language:""}/></p>
				<p><input id="PageEntityLabel" name="label" className="input_field fields" type="text" defaultValue={this.state.pageEntity.label?this.state.pageEntity.label:""}/></p>
				<p><input id="PageEntityPlain" name="plain" className="input_field fields" type="text" defaultValue={this.state.pageEntity.plain?this.state.pageEntity.plain:""}/></p>
				<textarea id="PageEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
				<textarea id="PageEntityBody" name="body" className="text_area fields" defaultValue={this.state.body?this.state.body:""} rows="4" cols="50"></textarea>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('pageEntityId',this.state.pageEntity.pageEntityId) ;
		form.append('name',document.getElementById("PageEntityName").value) ;
		form.append('language',document.getElementById("PageEntityLanguage").value) ;
		form.append('label',document.getElementById("PageEntityLabel").value) ;
		form.append('plain',document.getElementById("PageEntityPlain").value) ;
		form.append('shortDescription',document.getElementById("PageEntityShortDescription").value) ;
		form.append('body',document.getElementById("PageEntityBody").value) ;
		Axios.post(getPrefix()+"/app/page/update",form).then(response=>{this.zoomin(response.data.pageEntityId)}) ;
		Axios.post(getPrefix()+"/app/page/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/page/updatebody",form) ;
	}
	renderDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Page?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeDelete (event)
	{
		Axios.get(getPrefix()+"/app/page/delete?sessionToken="+getSessionToken()+"&pageEntityId="+this.state.pageEntity.pageEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class QuizEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			quizEntity:{},
			quizEntityList:[],
			shortDescription:null,
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (quizEntityId)
	{
		if (!quizEntityId) quizEntityId = this.state.quizEntity.quizEntityId ;
		Axios.get(getPrefix()+"/app/quiz/view?sessionToken="+getSessionToken()+"&quizEntityId="+quizEntityId,null)
			.then(response=>{this.setState({command:"View",quizEntity:response.data})}) ;
		Axios.get(getPrefix()+"/app/quiz/textshortdescription?sessionToken="+getSessionToken()+"&quizEntityId="+quizEntityId,null)
			.then(response=>{this.setState({shortDescription:response.data})}) ;
		Axios.get(getPrefix()+"/app/quiz/textlongdescription?sessionToken="+getSessionToken()+"&quizEntityId="+quizEntityId,null)
			.then(response=>{this.setState({longDescription:response.data})}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/quiz/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",quizEntityList:response.data,quizEntity:{}})}) ;
		else if (commandList==="ListByLabel")
			Axios.get(getPrefix()+"/app/quiz/listbylabel?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",quizEntityList:response.data,quizEntity:{}})}) ;
		else if (commandList==="ListByCategory")
			Axios.get(getPrefix()+"/app/quiz/listbycategory?sessionToken="+getSessionToken()+"&page="+this.page+"&categoryEntityId="+props.categoryEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"List",quizEntityList:response.data,quizEntity:{}})}) ;
		else if (commandList==="ListByCompany")
			Axios.get(getPrefix()+"/app/quiz/listbycompany?sessionToken="+getSessionToken()+"&page="+this.page+"&companyEntityId="+props.companyEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"List",quizEntityList:response.data,quizEntity:{}})}) ;
		else if (commandList==="ListUnpublished")
			Axios.get(getPrefix()+"/app/quiz/listunpublished?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",quizEntityList:response.data,quizEntity:{}})}) ;
		else
			Axios.get(getPrefix()+"/app/quiz/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",quizEntityList:response.data,quizEntity:{}})}) ;
	}
	editorPermission ()
	{
		return (true) ;
	}
	adminPermission ()
	{
		return (true) ;
	}
	menu ()
	{
		if (this.state.quizEntity.quizEntityId)
			return (
				<div className="menu">
					<div>
						{<button className="menu-action" onClick={()=>{this.zoomout("ListByLabel")}}>ListByLabel</button>}
						{<button className="menu-action" onClick={()=>{this.zoomout("ListByCategory")}}>ListByCategory</button>}
						{<button className="menu-action" onClick={()=>{this.zoomout("ListByCompany")}}>ListByCompany</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListUnpublished")}}>ListUnpublished</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.command("View")}}>View</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.command("TextShortDescription")}}>TextShortDescription</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.command("TextLongDescription")}}>TextLongDescription</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.command("Update")}}>Update</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateShortDescription")}}>UpdateShortDescription</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateLongDescription")}}>UpdateLongDescription</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateImage")}}>UpdateImage</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadImage")}}>UploadImage</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Delete")}}>Delete</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.executePublish()}}>Publish</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.executeUnpublish()}}>Unpublish</button>}
						{<button className="menu-action" onClick={()=>{this.executeSubscribe()}}>Subscribe</button>}
						{<button className="menu-action" onClick={()=>{this.executeUnsubscribe()}}>Unsubscribe</button>}
						{<button className="menu-action" onClick={()=>{this.command("Rate")}}>Rate</button>}
						{<button className="menu-action" onClick={()=>{this.command("Comment")}}>Comment</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
		else
			return (
				<div className="menu">
					<div>
						{<button className="menu-action" onClick={()=>{this.zoomout("ListByLabel")}}>ListByLabel</button>}
						{<button className="menu-action" onClick={()=>{this.zoomout("ListByCategory")}}>ListByCategory</button>}
						{<button className="menu-action" onClick={()=>{this.zoomout("ListByCompany")}}>ListByCompany</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListUnpublished")}}>ListUnpublished</button>}
						{(this.editorPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderView() ;
		else if (this.state.command==="Create")
			return this.renderCreate() ;
		else if (this.state.command==="Update")
			return this.renderUpdate() ;
		else if (this.state.command==="UpdateShortDescription")
			return this.renderUpdateShortDescription() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderUpdateLongDescription() ;
		else if (this.state.command==="UpdateImage")
			return this.renderUpdateImage() ;
		else if (this.state.command==="UploadImage")
			return this.renderUploadImage() ;
		else if (this.state.command==="Delete")
			return this.renderDelete() ;
		else if (this.state.command==="Publish")
			return this.renderPublish() ;
		else if (this.state.command==="Unpublish")
			return this.renderUnpublish() ;
		else if (this.state.command==="Subscribe")
			return this.renderSubscribe() ;
		else if (this.state.command==="Unsubscribe")
			return this.renderUnsubscribe() ;
		else if (this.state.command==="Rate")
			return this.renderRate() ;
		else if (this.state.command==="Comment")
			return this.renderComment() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='entityListDiv' id={this.id+"list"}>
				{this.menu()}
				<div className='signinDiv' id={this.id}>
					{getSession()?'User:'+ ' ' + getSession().label:'loading...'}
				</div>
				{this.state.quizEntityList?.map(quizEntity=>
					(
						<div className="list-card" key={quizEntity.quizEntityId} onClick={()=>{this.zoomin(quizEntity.quizEntityId)}} style={{cursor:'pointer'}}>
							<p>{quizEntity.label}</p>
							<p><img className="image" alt='{quizEntity.label}' src={getPrefix()+`/app/quiz/imageimage?quizEntityId=${quizEntity.quizEntityId}`}/></p>
							<p>[shortDescription goes here]</p>
						</div>
					))}
			</div>
		) ;
	}
	renderView ()
	{
		return(
			<div className='entityViewDiv' id={this.id+"view"}>
				{this.menu()}
				<div className="list-card" >
					<p>{this.state.quizEntity?this.state.quizEntity.label:null}</p>
					<img className="image" alt='{quizEntity.label}' src={getPrefix()+`/app/quiz/imageimage?quizEntityId=${this.state.quizEntity.quizEntityId}`}/>
				</div>
				<p>Label: {this.state.label?this.state.label:''}</p>
				<p>Name: {this.state.name?this.state.name:''}</p>
				<p>ShowOrder: {this.state.showOrder?this.state.showOrder:''}</p>
				<p>Count: {this.state.count?this.state.count:''}</p>
				<p>{this.state.shortDescription?this.state.shortDescription:''}</p>
				<p>{this.state.longDescription?this.state.longDescription:''}</p>
			</div>
		) ;
	}
	renderCreate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCreate(event)}}>
				<p><input id="QuizEntityLabel" name="label" className="input_field fields" type="text" placeholder="Enter label..."/></p>
				<p><input id="QuizEntityName" name="name" className="input_field fields" type="text" placeholder="Enter name..."/></p>
				<p><input id="QuizEntityShowOrder" name="showOrder" className="input_field fields" type="text" placeholder="Enter showOrder..."/></p>
				<p><input id="QuizEntityCount" name="count" className="input_field fields" type="text" placeholder="Enter count..."/></p>
				<textarea id="QuizEntityShortDescription" name="shortDescription" className="text_area fields" placeholder="Enter shortDescription..." rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="QuizEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="create_button" type="submit">Create</button></div>
				</form>
			</div>
		) ;
	}
	executeCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('label',document.getElementById("QuizEntityLabel").value) ;
		form.append('name',document.getElementById("QuizEntityName").value) ;
		form.append('showOrder',document.getElementById("QuizEntityShowOrder").value) ;
		form.append('count',document.getElementById("QuizEntityCount").value) ;
		form.append('shortDescription',document.getElementById("QuizEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/quiz/create",form).then(response=>{this.zoomin(response.data.quizEntityId)}) ;
	}
	renderUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="QuizEntityLabel" name="label" className="input_field fields" type="text" defaultValue={this.state.quizEntity.label?this.state.quizEntity.label:""}/></p>
				<p><input id="QuizEntityName" name="name" className="input_field fields" type="text" defaultValue={this.state.quizEntity.name?this.state.quizEntity.name:""}/></p>
				<p><input id="QuizEntityShowOrder" name="showOrder" className="input_field fields" type="text" defaultValue={this.state.quizEntity.showOrder?this.state.quizEntity.showOrder:""}/></p>
				<p><input id="QuizEntityCount" name="count" className="input_field fields" type="text" defaultValue={this.state.quizEntity.count?this.state.quizEntity.count:""}/></p>
				<textarea id="QuizEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="QuizEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('quizEntityId',this.state.quizEntity.quizEntityId) ;
		form.append('label',document.getElementById("QuizEntityLabel").value) ;
		form.append('name',document.getElementById("QuizEntityName").value) ;
		form.append('showOrder',document.getElementById("QuizEntityShowOrder").value) ;
		form.append('count',document.getElementById("QuizEntityCount").value) ;
		form.append('shortDescription',document.getElementById("QuizEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/quiz/update",form).then(response=>{this.zoomin(response.data.quizEntityId)}) ;
		Axios.post(getPrefix()+"/app/quiz/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/quiz/updatelongdescription",form) ;
	}
	renderUpdateShortDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<textarea id="QuizEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateShortDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('quizEntityId',this.state.quizEntity.quizEntityId) ;
		form.append('shortDescription',document.getElementById("QuizEntityShortDescription").value) ;
		Axios.post(getPrefix()+"/app/quiz/updateshortdescription/",form).then(response=>{this.zoomin(response.data.quizEntityId)}) ;
	}
	renderUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<div className="editor_field fields"><Editor id="QuizEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('quizEntityId',this.state.quizEntity.quizEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/quiz/updatelongdescription/",form).then(response=>{this.zoomin(response.data.quizEntityId)}) ;
	}
	renderUpdateImage ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="QuizEntityImageLabel" name="imageLabel" className="input_field fields" type="text" defaultValue={this.state.quizEntity.imageLabel?this.state.quizEntity.imageLabel:""}/></p>
				<p><input id="QuizEntityImageName" name="imageName" className="input_field fields" type="text" defaultValue={this.state.quizEntity.imageName?this.state.quizEntity.imageName:""}/></p>
				<p><input id="QuizEntityImageType" name="imageType" className="input_field fields" type="text" defaultValue={this.state.quizEntity.imageType?this.state.quizEntity.imageType:""}/></p>
				<p><input id="QuizEntityImageUrl" name="imageUrl" className="input_field fields" type="text" defaultValue={this.state.quizEntity.imageUrl?this.state.quizEntity.imageUrl:""}/></p>
				<p><input id="QuizEntityImageCredit" name="imageCredit" className="input_field fields" type="text" defaultValue={this.state.quizEntity.imageCredit?this.state.quizEntity.imageCredit:""}/></p>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateImage (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('quizEntityId',this.state.quizEntity.quizEntityId) ;
		form.append('label',document.getElementById("QuizEntityLabel").value) ;
		form.append('name',document.getElementById("QuizEntityName").value) ;
		form.append('showOrder',document.getElementById("QuizEntityShowOrder").value) ;
		form.append('count',document.getElementById("QuizEntityCount").value) ;
		form.append('shortDescription',document.getElementById("QuizEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/quiz/update",form).then(response=>{this.zoomin(response.data.quizEntityId)}) ;
		Axios.post(getPrefix()+"/app/quiz/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/quiz/updatelongdescription",form) ;
	}
	renderUploadImage ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeUploadImage(event)}}>
			<input type="file" accept="image/*" id="myFile" name="image" onChange={(event)=>{this.executeUploadImage(event)}}/>
			<input className="upload_image_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeUploadImage (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('quizEntityId',this.state.quizEntity.quizEntityId) ;
		Axios.post(getPrefix()+"/app/quiz/uploadimage",form)
			.then(response=>{this.zoomin(this.state.quizEntity.quizEntityId)}) ;
	}
	renderDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Quiz?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeDelete (event)
	{
		Axios.get(getPrefix()+"/app/quiz/delete?sessionToken="+getSessionToken()+"&quizEntityId="+this.state.quizEntity.quizEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	renderPublish ()
	{
	}
	executePublish (event)
	{
		Axios.get(getPrefix()+"/app/quiz/publish?sessionToken="+getSessionToken()+"&quizEntityId="+this.state.quizEntity.quizEntityId,null)
			.then(response=>{this.zoomin(this.state.quizEntity.quizEntityId)}) ;
	}
	renderUnpublish ()
	{
	}
	executeUnpublish (event)
	{
		Axios.get(getPrefix()+"/app/quiz/unpublish?sessionToken="+getSessionToken()+"&quizEntityId="+this.state.quizEntity.quizEntityId,null)
			.then(response=>{this.zoomin(this.state.quizEntity.quizEntityId)}) ;
	}
	renderSubscribe ()
	{
	}
	executeSubscribe (event)
	{
		Axios.get(getPrefix()+"/app/quiz/subscribe?sessionToken="+getSessionToken()+"&quizEntityId="+this.state.quizEntity.quizEntityId,null)
			.then(response=>{this.zoomin(this.state.quizEntity.quizEntityId)}) ;
	}
	renderUnsubscribe ()
	{
	}
	executeUnsubscribe (event)
	{
		Axios.get(getPrefix()+"/app/quiz/unsubscribe?sessionToken="+getSessionToken()+"&quizEntityId="+this.state.quizEntity.quizEntityId,null)
			.then(response=>{this.zoomin(this.state.quizEntity.quizEntityId)}) ;
	}
	renderRate ()
	{
	}
	executeRate (event)
	{
		Axios.get(getPrefix()+"/app/quiz/rate?sessionToken="+getSessionToken()+"&quizEntityId="+this.state.quizEntity.quizEntityId,null)
			.then(response=>{this.zoomin(this.state.quizEntity.quizEntityId)}) ;
	}
	renderComment ()
	{
	}
	executeComment (event)
	{
		Axios.get(getPrefix()+"/app/quiz/comment?sessionToken="+getSessionToken()+"&quizEntityId="+this.state.quizEntity.quizEntityId,null)
			.then(response=>{this.zoomin(this.state.quizEntity.quizEntityId)}) ;
	}
}

class QuizUserEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			quizUserEntity:{},
			quizUserEntityList:[],
			longDescription:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (quizUserEntityId)
	{
		if (!quizUserEntityId) quizUserEntityId = this.state.quizUserEntity.quizUserEntityId ;
		Axios.get(getPrefix()+"/app/quizuser/view?sessionToken="+getSessionToken()+"&quizUserEntityId="+quizUserEntityId,null)
			.then(response=>{this.setState({command:"View",quizUserEntity:response.data})}) ;
		Axios.get(getPrefix()+"/app/quizuser/textlongdescription?sessionToken="+getSessionToken()+"&quizUserEntityId="+quizUserEntityId,null)
			.then(response=>{this.setState({longDescription:response.data})}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/quizuser/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",quizUserEntityList:response.data,quizUserEntity:{}})}) ;
		else if (commandList==="ListByQuiz")
			Axios.get(getPrefix()+"/app/quizuser/listbyquiz?sessionToken="+getSessionToken()+"&page="+this.page+"&quizEntityId="+props.quizEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"List",quizUserEntityList:response.data,quizUserEntity:{}})}) ;
		else
			Axios.get(getPrefix()+"/app/quizuser/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",quizUserEntityList:response.data,quizUserEntity:{}})}) ;
	}
	adminPermission ()
	{
		return (true) ;
	}
	menu ()
	{
		if (this.state.quizUserEntity.quizUserEntityId)
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListByQuiz")}}>ListByQuiz</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("View")}}>View</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("TextLongDescription")}}>TextLongDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Update")}}>Update</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateLongDescription")}}>UpdateLongDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Delete")}}>Delete</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
		else
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListByQuiz")}}>ListByQuiz</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderView() ;
		else if (this.state.command==="Create")
			return this.renderCreate() ;
		else if (this.state.command==="Update")
			return this.renderUpdate() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderUpdateLongDescription() ;
		else if (this.state.command==="Delete")
			return this.renderDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='entityListDiv' id={this.id+"list"}>
				{this.menu()}
				<div className='signinDiv' id={this.id}>
					{getSession()?'User:'+ ' ' + getSession().label:'loading...'}
				</div>
				{this.state.quizUserEntityList?.map(quizUserEntity=>
					(
						<div className="list-card" key={quizUserEntity.quizUserEntityId} onClick={()=>{this.zoomin(quizUserEntity.quizUserEntityId)}} style={{cursor:'pointer'}}>
							<p>{quizUserEntity.label}</p>
							<p>[shortDescription goes here]</p>
						</div>
					))}
			</div>
		) ;
	}
	renderView ()
	{
		return(
			<div className='entityViewDiv' id={this.id+"view"}>
				{this.menu()}
				<div className="list-card" >
				</div>
				<p>{this.state.longDescription?this.state.longDescription:''}</p>
			</div>
		) ;
	}
	renderCreate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCreate(event)}}>
				<div className="editor_field fields"><Editor id="QuizUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="create_button" type="submit">Create</button></div>
				</form>
			</div>
		) ;
	}
	executeCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/quizuser/create",form).then(response=>{this.zoomin(response.data.quizUserEntityId)}) ;
	}
	renderUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<div className="editor_field fields"><Editor id="QuizUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('quizUserEntityId',this.state.quizUserEntity.quizUserEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/quizuser/update",form).then(response=>{this.zoomin(response.data.quizUserEntityId)}) ;
		Axios.post(getPrefix()+"/app/quizuser/updatelongdescription",form) ;
	}
	renderUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<div className="editor_field fields"><Editor id="QuizUserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('quizUserEntityId',this.state.quizUserEntity.quizUserEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/quizuser/updatelongdescription/",form).then(response=>{this.zoomin(response.data.quizUserEntityId)}) ;
	}
	renderDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this QuizUser?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeDelete (event)
	{
		Axios.get(getPrefix()+"/app/quizuser/delete?sessionToken="+getSessionToken()+"&quizUserEntityId="+this.state.quizUserEntity.quizUserEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class ScriptEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			scriptEntity:{},
			scriptEntityList:[],
			body:null,
		} ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (scriptEntityId)
	{
		if (!scriptEntityId) scriptEntityId = this.state.scriptEntity.scriptEntityId ;
		Axios.get(getPrefix()+"/app/script/view?sessionToken="+getSessionToken()+"&scriptEntityId="+scriptEntityId,null)
			.then(response=>{this.setState({command:"View",scriptEntity:response.data})}) ;
		Axios.get(getPrefix()+"/app/script/textbody?sessionToken="+getSessionToken()+"&scriptEntityId="+scriptEntityId,null)
			.then(response=>{this.setState({body:response.data})}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/script/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",scriptEntityList:response.data,scriptEntity:{}})}) ;
		else
			Axios.get(getPrefix()+"/app/script/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",scriptEntityList:response.data,scriptEntity:{}})}) ;
	}
	menu ()
	{
		if (this.state.scriptEntity.scriptEntityId)
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("View")}}>View</button>}
						{<button className="menu-action" onClick={()=>{this.command("TextBody")}}>TextBody</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Update")}}>Update</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadBody")}}>UploadBody</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Delete")}}>Delete</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
		else
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderView() ;
		else if (this.state.command==="Create")
			return this.renderCreate() ;
		else if (this.state.command==="Update")
			return this.renderUpdate() ;
		else if (this.state.command==="UploadBody")
			return this.renderUploadBody() ;
		else if (this.state.command==="Delete")
			return this.renderDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='entityListDiv' id={this.id+"list"}>
				{this.menu()}
				<div className='signinDiv' id={this.id}>
					{getSession()?'User:'+ ' ' + getSession().label:'loading...'}
				</div>
				{this.state.scriptEntityList?.map(scriptEntity=>
					(
						<div className="list-card" key={scriptEntity.scriptEntityId} onClick={()=>{this.zoomin(scriptEntity.scriptEntityId)}} style={{cursor:'pointer'}}>
							<p>{scriptEntity.label}</p>
							<p>[shortDescription goes here]</p>
						</div>
					))}
			</div>
		) ;
	}
	renderView ()
	{
		return(
			<div className='entityViewDiv' id={this.id+"view"}>
				{this.menu()}
				<div className="list-card" >
				</div>
				<p>Name: {this.state.name?this.state.name:''}</p>
				<p>Url: {this.state.url?this.state.url:''}</p>
				<p>ShowOrder: {this.state.showOrder?this.state.showOrder:''}</p>
				<p>{this.state.body?this.state.body:''}</p>
			</div>
		) ;
	}
	renderCreate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCreate(event)}}>
				<p><input id="ScriptEntityName" name="name" className="input_field fields" type="text" placeholder="Enter name..."/></p>
				<p><input id="ScriptEntityUrl" name="url" className="input_field fields" type="text" placeholder="Enter url..."/></p>
				<p><input id="ScriptEntityShowOrder" name="showOrder" className="input_field fields" type="text" placeholder="Enter showOrder..."/></p>
				<textarea id="ScriptEntityBody" name="body" className="text_area fields" placeholder="Enter body..." rows="4" cols="50"></textarea>
				<div className="button"><button className="create_button" type="submit">Create</button></div>
				</form>
			</div>
		) ;
	}
	executeCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('name',document.getElementById("ScriptEntityName").value) ;
		form.append('url',document.getElementById("ScriptEntityUrl").value) ;
		form.append('showOrder',document.getElementById("ScriptEntityShowOrder").value) ;
		form.append('body',document.getElementById("ScriptEntityBody").value) ;
		Axios.post(getPrefix()+"/app/script/create",form).then(response=>{this.zoomin(response.data.scriptEntityId)}) ;
	}
	renderUpdate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="ScriptEntityName" name="name" className="input_field fields" type="text" defaultValue={this.state.scriptEntity.name?this.state.scriptEntity.name:""}/></p>
				<p><input id="ScriptEntityUrl" name="url" className="input_field fields" type="text" defaultValue={this.state.scriptEntity.url?this.state.scriptEntity.url:""}/></p>
				<p><input id="ScriptEntityShowOrder" name="showOrder" className="input_field fields" type="text" defaultValue={this.state.scriptEntity.showOrder?this.state.scriptEntity.showOrder:""}/></p>
				<textarea id="ScriptEntityBody" name="body" className="text_area fields" defaultValue={this.state.body?this.state.body:""} rows="4" cols="50"></textarea>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('scriptEntityId',this.state.scriptEntity.scriptEntityId) ;
		form.append('name',document.getElementById("ScriptEntityName").value) ;
		form.append('url',document.getElementById("ScriptEntityUrl").value) ;
		form.append('showOrder',document.getElementById("ScriptEntityShowOrder").value) ;
		form.append('body',document.getElementById("ScriptEntityBody").value) ;
		Axios.post(getPrefix()+"/app/script/update",form).then(response=>{this.zoomin(response.data.scriptEntityId)}) ;
		Axios.post(getPrefix()+"/app/script/updatebody",form) ;
	}
	renderDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Script?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeDelete (event)
	{
		Axios.get(getPrefix()+"/app/script/delete?sessionToken="+getSessionToken()+"&scriptEntityId="+this.state.scriptEntity.scriptEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class StyleEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			styleEntity:{},
			styleEntityList:[],
			body:null,
		} ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (styleEntityId)
	{
		if (!styleEntityId) styleEntityId = this.state.styleEntity.styleEntityId ;
		Axios.get(getPrefix()+"/app/style/view?sessionToken="+getSessionToken()+"&styleEntityId="+styleEntityId,null)
			.then(response=>{this.setState({command:"View",styleEntity:response.data})}) ;
		Axios.get(getPrefix()+"/app/style/textbody?sessionToken="+getSessionToken()+"&styleEntityId="+styleEntityId,null)
			.then(response=>{this.setState({body:response.data})}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/style/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",styleEntityList:response.data,styleEntity:{}})}) ;
		else
			Axios.get(getPrefix()+"/app/style/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",styleEntityList:response.data,styleEntity:{}})}) ;
	}
	menu ()
	{
		if (this.state.styleEntity.styleEntityId)
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("View")}}>View</button>}
						{<button className="menu-action" onClick={()=>{this.command("TextBody")}}>TextBody</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Update")}}>Update</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadBody")}}>UploadBody</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Delete")}}>Delete</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
		else
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderView() ;
		else if (this.state.command==="Create")
			return this.renderCreate() ;
		else if (this.state.command==="Update")
			return this.renderUpdate() ;
		else if (this.state.command==="UploadBody")
			return this.renderUploadBody() ;
		else if (this.state.command==="Delete")
			return this.renderDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='entityListDiv' id={this.id+"list"}>
				{this.menu()}
				<div className='signinDiv' id={this.id}>
					{getSession()?'User:'+ ' ' + getSession().label:'loading...'}
				</div>
				{this.state.styleEntityList?.map(styleEntity=>
					(
						<div className="list-card" key={styleEntity.styleEntityId} onClick={()=>{this.zoomin(styleEntity.styleEntityId)}} style={{cursor:'pointer'}}>
							<p>{styleEntity.label}</p>
							<p>[shortDescription goes here]</p>
						</div>
					))}
			</div>
		) ;
	}
	renderView ()
	{
		return(
			<div className='entityViewDiv' id={this.id+"view"}>
				{this.menu()}
				<div className="list-card" >
				</div>
				<p>Name: {this.state.name?this.state.name:''}</p>
				<p>Url: {this.state.url?this.state.url:''}</p>
				<p>ShowOrder: {this.state.showOrder?this.state.showOrder:''}</p>
				<p>{this.state.body?this.state.body:''}</p>
			</div>
		) ;
	}
	renderCreate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCreate(event)}}>
				<p><input id="StyleEntityName" name="name" className="input_field fields" type="text" placeholder="Enter name..."/></p>
				<p><input id="StyleEntityUrl" name="url" className="input_field fields" type="text" placeholder="Enter url..."/></p>
				<p><input id="StyleEntityShowOrder" name="showOrder" className="input_field fields" type="text" placeholder="Enter showOrder..."/></p>
				<textarea id="StyleEntityBody" name="body" className="text_area fields" placeholder="Enter body..." rows="4" cols="50"></textarea>
				<div className="button"><button className="create_button" type="submit">Create</button></div>
				</form>
			</div>
		) ;
	}
	executeCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('name',document.getElementById("StyleEntityName").value) ;
		form.append('url',document.getElementById("StyleEntityUrl").value) ;
		form.append('showOrder',document.getElementById("StyleEntityShowOrder").value) ;
		form.append('body',document.getElementById("StyleEntityBody").value) ;
		Axios.post(getPrefix()+"/app/style/create",form).then(response=>{this.zoomin(response.data.styleEntityId)}) ;
	}
	renderUpdate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="StyleEntityName" name="name" className="input_field fields" type="text" defaultValue={this.state.styleEntity.name?this.state.styleEntity.name:""}/></p>
				<p><input id="StyleEntityUrl" name="url" className="input_field fields" type="text" defaultValue={this.state.styleEntity.url?this.state.styleEntity.url:""}/></p>
				<p><input id="StyleEntityShowOrder" name="showOrder" className="input_field fields" type="text" defaultValue={this.state.styleEntity.showOrder?this.state.styleEntity.showOrder:""}/></p>
				<textarea id="StyleEntityBody" name="body" className="text_area fields" defaultValue={this.state.body?this.state.body:""} rows="4" cols="50"></textarea>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('styleEntityId',this.state.styleEntity.styleEntityId) ;
		form.append('name',document.getElementById("StyleEntityName").value) ;
		form.append('url',document.getElementById("StyleEntityUrl").value) ;
		form.append('showOrder',document.getElementById("StyleEntityShowOrder").value) ;
		form.append('body',document.getElementById("StyleEntityBody").value) ;
		Axios.post(getPrefix()+"/app/style/update",form).then(response=>{this.zoomin(response.data.styleEntityId)}) ;
		Axios.post(getPrefix()+"/app/style/updatebody",form) ;
	}
	renderDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this Style?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeDelete (event)
	{
		Axios.get(getPrefix()+"/app/style/delete?sessionToken="+getSessionToken()+"&styleEntityId="+this.state.styleEntity.styleEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
}

class UserEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			userEntity:{},
			userEntityList:[],
			shortDescription:null,
			longDescription:null,
			notifications:null,
		} ;
		this.longDescriptionEditorState = EditorState.createEmpty() ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (userEntityId)
	{
		if (!userEntityId) userEntityId = this.state.userEntity.userEntityId ;
		Axios.get(getPrefix()+"/app/user/view?sessionToken="+getSessionToken()+"&userEntityId="+userEntityId,null)
			.then(response=>{this.setState({command:"View",userEntity:response.data})}) ;
		Axios.get(getPrefix()+"/app/user/textshortdescription?sessionToken="+getSessionToken()+"&userEntityId="+userEntityId,null)
			.then(response=>{this.setState({shortDescription:response.data})}) ;
		Axios.get(getPrefix()+"/app/user/textlongdescription?sessionToken="+getSessionToken()+"&userEntityId="+userEntityId,null)
			.then(response=>{this.setState({longDescription:response.data})}) ;
		Axios.get(getPrefix()+"/app/user/textnotifications?sessionToken="+getSessionToken()+"&userEntityId="+userEntityId,null)
			.then(response=>{this.setState({notifications:response.data})}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/user/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",userEntityList:response.data,userEntity:{}})}) ;
		else
			Axios.get(getPrefix()+"/app/user/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",userEntityList:response.data,userEntity:{}})}) ;
	}
	adminPermission ()
	{
		return (true) ;
	}
	menu ()
	{
		if (this.state.userEntity.userEntityId)
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("ViewAdmin")}}>ViewAdmin</button>}
						{<button className="menu-action" onClick={()=>{this.command("TextShortDescription")}}>TextShortDescription</button>}
						{<button className="menu-action" onClick={()=>{this.command("TextLongDescription")}}>TextLongDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Update")}}>Update</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateShortDescription")}}>UpdateShortDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateLongDescription")}}>UpdateLongDescription</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdateImage")}}>UpdateImage</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UploadImage")}}>UploadImage</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Delete")}}>Delete</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("UpdatePassword")}}>UpdatePassword</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("View")}}>View</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
		else
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="ViewAdmin")
			return this.renderViewAdmin() ;
		else if (this.state.command==="Update")
			return this.renderUpdate() ;
		else if (this.state.command==="UpdateShortDescription")
			return this.renderUpdateShortDescription() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderUpdateLongDescription() ;
		else if (this.state.command==="UpdateImage")
			return this.renderUpdateImage() ;
		else if (this.state.command==="UploadImage")
			return this.renderUploadImage() ;
		else if (this.state.command==="Delete")
			return this.renderDelete() ;
		else if (this.state.command==="View")
			return this.renderView() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='entityListDiv' id={this.id+"list"}>
				{this.menu()}
				<div className='signinDiv' id={this.id}>
					{getSession()?'User:'+ ' ' + getSession().label:'loading...'}
				</div>
				{this.state.userEntityList?.map(userEntity=>
					(
						<div className="list-card" key={userEntity.userEntityId} onClick={()=>{this.zoomin(userEntity.userEntityId)}} style={{cursor:'pointer'}}>
							<p>{userEntity.label}</p>
							<p>[shortDescription goes here]</p>
						</div>
					))}
			</div>
		) ;
	}
	renderView ()
	{
		return(
			<div className='entityViewDiv' id={this.id+"view"}>
				{this.menu()}
				<div className="list-card" >
					<img className="image" alt='{userEntity.label}' src={getPrefix()+`/app/user/imageimage?userEntityId=${this.state.userEntity.userEntityId}`}/>
				</div>
				<p>Passcode: {this.state.passcode?this.state.passcode:''}</p>
				<p>Origin: {this.state.origin?this.state.origin:''}</p>
				<p>FirstName: {this.state.firstName?this.state.firstName:''}</p>
				<p>LastName: {this.state.lastName?this.state.lastName:''}</p>
				<p>Phone: {this.state.phone?this.state.phone:''}</p>
				<p>Url: {this.state.url?this.state.url:''}</p>
				<p>Timezone: {this.state.timezone?this.state.timezone:''}</p>
				<p>UseHtml: {this.state.useHtml?this.state.useHtml:''}</p>
				<p>NotificationFrequency: {this.state.notificationFrequency?this.state.notificationFrequency:''}</p>
				<p>LinkedinUserId: {this.state.linkedinUserId?this.state.linkedinUserId:''}</p>
				<p>FacebookUserId: {this.state.facebookUserId?this.state.facebookUserId:''}</p>
				<p>GmailUserId: {this.state.gmailUserId?this.state.gmailUserId:''}</p>
				<p>SkypeUserId: {this.state.skypeUserId?this.state.skypeUserId:''}</p>
				<p>Title: {this.state.title?this.state.title:''}</p>
				<p>ShowOrder: {this.state.showOrder?this.state.showOrder:''}</p>
				<p>Administrator: {this.state.administrator?this.state.administrator:''}</p>
				<p>Editor: {this.state.editor?this.state.editor:''}</p>
				<p>Manager: {this.state.manager?this.state.manager:''}</p>
				<p>QuitDate: {this.state.quitDate?this.state.quitDate:''}</p>
				<p>Reminders: {this.state.reminders?this.state.reminders:''}</p>
				<p>{this.state.shortDescription?this.state.shortDescription:''}</p>
				<p>{this.state.longDescription?this.state.longDescription:''}</p>
				<p>{this.state.notifications?this.state.notifications:''}</p>
			</div>
		) ;
	}
	renderUpdate ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="UserEntityPasscode" name="passcode" className="input_field fields" type="text" defaultValue={this.state.userEntity.passcode?this.state.userEntity.passcode:""}/></p>
				<p><input id="UserEntityOrigin" name="origin" className="input_field fields" type="text" defaultValue={this.state.userEntity.origin?this.state.userEntity.origin:""}/></p>
				<p><input id="UserEntityFirstName" name="firstName" className="input_field fields" type="text" defaultValue={this.state.userEntity.firstName?this.state.userEntity.firstName:""}/></p>
				<p><input id="UserEntityLastName" name="lastName" className="input_field fields" type="text" defaultValue={this.state.userEntity.lastName?this.state.userEntity.lastName:""}/></p>
				<p><input id="UserEntityPhone" name="phone" className="input_field fields" type="text" defaultValue={this.state.userEntity.phone?this.state.userEntity.phone:""}/></p>
				<p><input id="UserEntityUrl" name="url" className="input_field fields" type="text" defaultValue={this.state.userEntity.url?this.state.userEntity.url:""}/></p>
				<p><input id="UserEntityTimezone" name="timezone" className="input_field fields" type="text" defaultValue={this.state.userEntity.timezone?this.state.userEntity.timezone:""}/></p>
				<p><input id="UserEntityUseHtml" name="useHtml" className="input_field fields" type="text" defaultValue={this.state.userEntity.useHtml?this.state.userEntity.useHtml:""}/></p>
				<p><input id="UserEntityNotificationFrequency" name="notificationFrequency" className="input_field fields" type="text" defaultValue={this.state.userEntity.notificationFrequency?this.state.userEntity.notificationFrequency:""}/></p>
				<p><input id="UserEntityLinkedinUserId" name="linkedinUserId" className="input_field fields" type="text" defaultValue={this.state.userEntity.linkedinUserId?this.state.userEntity.linkedinUserId:""}/></p>
				<p><input id="UserEntityFacebookUserId" name="facebookUserId" className="input_field fields" type="text" defaultValue={this.state.userEntity.facebookUserId?this.state.userEntity.facebookUserId:""}/></p>
				<p><input id="UserEntityGmailUserId" name="gmailUserId" className="input_field fields" type="text" defaultValue={this.state.userEntity.gmailUserId?this.state.userEntity.gmailUserId:""}/></p>
				<p><input id="UserEntitySkypeUserId" name="skypeUserId" className="input_field fields" type="text" defaultValue={this.state.userEntity.skypeUserId?this.state.userEntity.skypeUserId:""}/></p>
				<p><input id="UserEntityTitle" name="title" className="input_field fields" type="text" defaultValue={this.state.userEntity.title?this.state.userEntity.title:""}/></p>
				<p><input id="UserEntityShowOrder" name="showOrder" className="input_field fields" type="text" defaultValue={this.state.userEntity.showOrder?this.state.userEntity.showOrder:""}/></p>
				<p><input id="UserEntityAdministrator" name="administrator" className="input_field fields" type="text" defaultValue={this.state.userEntity.administrator?this.state.userEntity.administrator:""}/></p>
				<p><input id="UserEntityEditor" name="editor" className="input_field fields" type="text" defaultValue={this.state.userEntity.editor?this.state.userEntity.editor:""}/></p>
				<p><input id="UserEntityManager" name="manager" className="input_field fields" type="text" defaultValue={this.state.userEntity.manager?this.state.userEntity.manager:""}/></p>
				<p><input id="UserEntityQuitDate" name="quitDate" className="input_field fields" type="text" defaultValue={this.state.userEntity.quitDate?this.state.userEntity.quitDate:""}/></p>
				<p><input id="UserEntityReminders" name="reminders" className="input_field fields" type="text" defaultValue={this.state.userEntity.reminders?this.state.userEntity.reminders:""}/></p>
				<textarea id="UserEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
				<div className="editor_field fields"><Editor id="UserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<textarea id="UserEntityNotifications" name="notifications" className="text_area fields" defaultValue={this.state.notifications?this.state.notifications:""} rows="4" cols="50"></textarea>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('userEntityId',this.state.userEntity.userEntityId) ;
		form.append('passcode',document.getElementById("UserEntityPasscode").value) ;
		form.append('origin',document.getElementById("UserEntityOrigin").value) ;
		form.append('firstName',document.getElementById("UserEntityFirstName").value) ;
		form.append('lastName',document.getElementById("UserEntityLastName").value) ;
		form.append('phone',document.getElementById("UserEntityPhone").value) ;
		form.append('url',document.getElementById("UserEntityUrl").value) ;
		form.append('timezone',document.getElementById("UserEntityTimezone").value) ;
		form.append('useHtml',document.getElementById("UserEntityUseHtml").value) ;
		form.append('notificationFrequency',document.getElementById("UserEntityNotificationFrequency").value) ;
		form.append('linkedinUserId',document.getElementById("UserEntityLinkedinUserId").value) ;
		form.append('facebookUserId',document.getElementById("UserEntityFacebookUserId").value) ;
		form.append('gmailUserId',document.getElementById("UserEntityGmailUserId").value) ;
		form.append('skypeUserId',document.getElementById("UserEntitySkypeUserId").value) ;
		form.append('title',document.getElementById("UserEntityTitle").value) ;
		form.append('showOrder',document.getElementById("UserEntityShowOrder").value) ;
		form.append('administrator',document.getElementById("UserEntityAdministrator").value) ;
		form.append('editor',document.getElementById("UserEntityEditor").value) ;
		form.append('manager',document.getElementById("UserEntityManager").value) ;
		form.append('quitDate',document.getElementById("UserEntityQuitDate").value) ;
		form.append('reminders',document.getElementById("UserEntityReminders").value) ;
		form.append('shortDescription',document.getElementById("UserEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		form.append('notifications',document.getElementById("UserEntityNotifications").value) ;
		Axios.post(getPrefix()+"/app/user/update",form).then(response=>{this.zoomin(response.data.userEntityId)}) ;
		Axios.post(getPrefix()+"/app/user/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/user/updatelongdescription",form) ;
		Axios.post(getPrefix()+"/app/user/updatenotifications",form) ;
	}
	renderUpdateShortDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<textarea id="UserEntityShortDescription" name="shortDescription" className="text_area fields" defaultValue={this.state.shortDescription?this.state.shortDescription:""} rows="4" cols="50"></textarea>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateShortDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('userEntityId',this.state.userEntity.userEntityId) ;
		form.append('shortDescription',document.getElementById("UserEntityShortDescription").value) ;
		Axios.post(getPrefix()+"/app/user/updateshortdescription/",form).then(response=>{this.zoomin(response.data.userEntityId)}) ;
	}
	renderUpdateLongDescription ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<div className="editor_field fields"><Editor id="UserEntityLongDescription" name="longDescription" onEditorStateChange={(editorState)=>{this.longDescriptionEditorState = editorState}} wrapperClassName="wrapper-class" editorClassName="editor-class editor" toolbarClassName="toolbar-class toolbar" placeholder="Enter longDescription..."/></div>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateLongDescription (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('userEntityId',this.state.userEntity.userEntityId) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		Axios.post(getPrefix()+"/app/user/updatelongdescription/",form).then(response=>{this.zoomin(response.data.userEntityId)}) ;
	}
	renderUpdateImage ()
	{
		this.longDescriptionEditorState = EditorState.createEmpty() ;
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeUpdate(event)}}>
				<p><input id="UserEntityImageLabel" name="imageLabel" className="input_field fields" type="text" defaultValue={this.state.userEntity.imageLabel?this.state.userEntity.imageLabel:""}/></p>
				<p><input id="UserEntityImageName" name="imageName" className="input_field fields" type="text" defaultValue={this.state.userEntity.imageName?this.state.userEntity.imageName:""}/></p>
				<p><input id="UserEntityImageType" name="imageType" className="input_field fields" type="text" defaultValue={this.state.userEntity.imageType?this.state.userEntity.imageType:""}/></p>
				<p><input id="UserEntityImageUrl" name="imageUrl" className="input_field fields" type="text" defaultValue={this.state.userEntity.imageUrl?this.state.userEntity.imageUrl:""}/></p>
				<p><input id="UserEntityImageCredit" name="imageCredit" className="input_field fields" type="text" defaultValue={this.state.userEntity.imageCredit?this.state.userEntity.imageCredit:""}/></p>
				<div className="button"><button className="update_button" type="submit">Update</button></div>
				</form>
			</div>
		) ;
	}
	executeUpdateImage (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('userEntityId',this.state.userEntity.userEntityId) ;
		form.append('passcode',document.getElementById("UserEntityPasscode").value) ;
		form.append('origin',document.getElementById("UserEntityOrigin").value) ;
		form.append('firstName',document.getElementById("UserEntityFirstName").value) ;
		form.append('lastName',document.getElementById("UserEntityLastName").value) ;
		form.append('phone',document.getElementById("UserEntityPhone").value) ;
		form.append('url',document.getElementById("UserEntityUrl").value) ;
		form.append('timezone',document.getElementById("UserEntityTimezone").value) ;
		form.append('useHtml',document.getElementById("UserEntityUseHtml").value) ;
		form.append('notificationFrequency',document.getElementById("UserEntityNotificationFrequency").value) ;
		form.append('linkedinUserId',document.getElementById("UserEntityLinkedinUserId").value) ;
		form.append('facebookUserId',document.getElementById("UserEntityFacebookUserId").value) ;
		form.append('gmailUserId',document.getElementById("UserEntityGmailUserId").value) ;
		form.append('skypeUserId',document.getElementById("UserEntitySkypeUserId").value) ;
		form.append('title',document.getElementById("UserEntityTitle").value) ;
		form.append('showOrder',document.getElementById("UserEntityShowOrder").value) ;
		form.append('administrator',document.getElementById("UserEntityAdministrator").value) ;
		form.append('editor',document.getElementById("UserEntityEditor").value) ;
		form.append('manager',document.getElementById("UserEntityManager").value) ;
		form.append('quitDate',document.getElementById("UserEntityQuitDate").value) ;
		form.append('reminders',document.getElementById("UserEntityReminders").value) ;
		form.append('shortDescription',document.getElementById("UserEntityShortDescription").value) ;
		form.append('longDescription',draftToHtml(convertToRaw(this.longDescriptionEditorState.getCurrentContent()))) ;
		form.append('notifications',document.getElementById("UserEntityNotifications").value) ;
		Axios.post(getPrefix()+"/app/user/update",form).then(response=>{this.zoomin(response.data.userEntityId)}) ;
		Axios.post(getPrefix()+"/app/user/updateshortdescription",form) ;
		Axios.post(getPrefix()+"/app/user/updatelongdescription",form) ;
		Axios.post(getPrefix()+"/app/user/updatenotifications",form) ;
	}
	renderUploadImage ()
	{
		const loadFile = (event) => {const src = URL.createObjectURL(event.target.files[0])} ;
		return(
			<div>
			{this.menu()}
			<form onSubmit={(event) =>{this.executeUploadImage(event)}}>
			<input type="file" accept="image/*" id="myFile" name="image" onChange={(event)=>{this.executeUploadImage(event)}}/>
			<input className="upload_image_button" type="submit"/>
			</form>
			</div>
		) ;
	}
	executeUploadImage (event)
	{
		event.preventDefault() ;
		var form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('userEntityId',this.state.userEntity.userEntityId) ;
		Axios.post(getPrefix()+"/app/user/uploadimage",form)
			.then(response=>{this.zoomin(this.state.userEntity.userEntityId)}) ;
	}
	renderDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this User?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeDelete (event)
	{
		Axios.get(getPrefix()+"/app/user/delete?sessionToken="+getSessionToken()+"&userEntityId="+this.state.userEntity.userEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	renderUpdatePassword ()
	{
	}
	executeUpdatePassword (event)
	{
		Axios.get(getPrefix()+"/app/user/updatepassword?sessionToken="+getSessionToken(),null) ;
	}
	renderView ()
	{
		return(
			<div className='entityViewDiv' id={this.id+"view"}>
				{this.menu()}
				<div className="list-card" >
				</div>
				<p>Passcode: {this.state.passcode?this.state.passcode:''}</p>
				<p>Origin: {this.state.origin?this.state.origin:''}</p>
				<p>FirstName: {this.state.firstName?this.state.firstName:''}</p>
				<p>LastName: {this.state.lastName?this.state.lastName:''}</p>
				<p>Phone: {this.state.phone?this.state.phone:''}</p>
				<p>Url: {this.state.url?this.state.url:''}</p>
				<p>Timezone: {this.state.timezone?this.state.timezone:''}</p>
				<p>UseHtml: {this.state.useHtml?this.state.useHtml:''}</p>
				<p>NotificationFrequency: {this.state.notificationFrequency?this.state.notificationFrequency:''}</p>
				<p>LinkedinUserId: {this.state.linkedinUserId?this.state.linkedinUserId:''}</p>
				<p>FacebookUserId: {this.state.facebookUserId?this.state.facebookUserId:''}</p>
				<p>GmailUserId: {this.state.gmailUserId?this.state.gmailUserId:''}</p>
				<p>SkypeUserId: {this.state.skypeUserId?this.state.skypeUserId:''}</p>
				<p>Title: {this.state.title?this.state.title:''}</p>
				<p>ShowOrder: {this.state.showOrder?this.state.showOrder:''}</p>
				<p>Administrator: {this.state.administrator?this.state.administrator:''}</p>
				<p>Editor: {this.state.editor?this.state.editor:''}</p>
				<p>Manager: {this.state.manager?this.state.manager:''}</p>
				<p>QuitDate: {this.state.quitDate?this.state.quitDate:''}</p>
				<p>Reminders: {this.state.reminders?this.state.reminders:''}</p>
				<p>{this.state.shortDescription?this.state.shortDescription:''}</p>
				<p>{this.state.longDescription?this.state.longDescription:''}</p>
				<p>{this.state.notifications?this.state.notifications:''}</p>
			</div>
		) ;
	}
}

class UserEmailEntityComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
		this.state =
		{
			userEmailEntity:{},
			userEmailEntityList:[],
		} ;
	}
	componentDidMount () {this.zoomout() ;}
	zoomin (userEmailEntityId)
	{
		if (!userEmailEntityId) userEmailEntityId = this.state.userEmailEntity.userEmailEntityId ;
		Axios.get(getPrefix()+"/app/useremail/view?sessionToken="+getSessionToken()+"&userEmailEntityId="+userEmailEntityId,null)
			.then(response=>{this.setState({command:"View",userEmailEntity:response.data})}) ;
	}
	zoomout (commandList, props)
	{
		if (!commandList)
			Axios.get(getPrefix()+"/app/useremail/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",userEmailEntityList:response.data,userEmailEntity:{}})}) ;
		else if (commandList==="ListAllAlpha")
			Axios.get(getPrefix()+"/app/useremail/listallalpha?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=>{this.setState({command:"List",commandList:"List",userEmailEntityList:response.data,userEmailEntity:{}})}) ;
		else if (commandList==="ListByUserAlpha")
			Axios.get(getPrefix()+"/app/useremail/listbyuseralpha?sessionToken="+getSessionToken()+"&page="+this.page+"&userEntityId="+props.userEntityId,null)
				.then(response=>{this.setState({command:"List",commandList:"List",userEmailEntityList:response.data,userEmailEntity:{}})}) ;
		else
			Axios.get(getPrefix()+"/app/useremail/list?sessionToken="+getSessionToken()+"&page="+this.page,null)
				.then(response=> {this.setState({command:"List",commandList:"List",userEmailEntityList:response.data,userEmailEntity:{}})}) ;
	}
	menu ()
	{
		if (this.state.userEmailEntity.userEmailEntityId)
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListAllAlpha")}}>ListAllAlpha</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListByUserAlpha")}}>ListByUserAlpha</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("View")}}>View</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Delete")}}>Delete</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Search")}}>Search</button>}
						{<button className="menu-action" onClick={()=>{this.command("Validate")}}>Validate</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Resend")}}>Resend</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Primary")}}>Primary</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
		else
			return (
				<div className="menu">
					<div>
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout(null)}}>List</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListAllAlpha")}}>ListAllAlpha</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.zoomout("ListByUserAlpha")}}>ListByUserAlpha</button>}
						{(this.adminPermission())&&<button className="menu-action" onClick={()=>{this.command("Create")}}>Create</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="View")
			return this.renderView() ;
		else if (this.state.command==="Create")
			return this.renderCreate() ;
		else if (this.state.command==="Delete")
			return this.renderDelete() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderList ()
	{
		return(
			<div className='entityListDiv' id={this.id+"list"}>
				{this.menu()}
				<div className='signinDiv' id={this.id}>
					{getSession()?'User:'+ ' ' + getSession().label:'loading...'}
				</div>
				{this.state.userEmailEntityList?.map(userEmailEntity=>
					(
						<div className="list-card" key={userEmailEntity.userEmailEntityId} onClick={()=>{this.zoomin(userEmailEntity.userEmailEntityId)}} style={{cursor:'pointer'}}>
							<p>{userEmailEntity.label}</p>
							<p>[shortDescription goes here]</p>
						</div>
					))}
			</div>
		) ;
	}
	renderView ()
	{
		return(
			<div className='entityViewDiv' id={this.id+"view"}>
				{this.menu()}
				<div className="list-card" >
				</div>
				<p>Email: {this.state.email?this.state.email:''}</p>
				<p>ValidationCode: {this.state.validationCode?this.state.validationCode:''}</p>
				<p>ValidationDate: {this.state.validationDate?this.state.validationDate:''}</p>
			</div>
		) ;
	}
	renderCreate ()
	{
		return(
			<div className="update_div">
				{this.menu()}
				<form onSubmit={(event)=>{this.executeCreate(event)}}>
				<p><input id="UserEmailEntityEmail" name="email" className="input_field fields" type="text" placeholder="Enter email..."/></p>
				<p><input id="UserEmailEntityValidationCode" name="validationCode" className="input_field fields" type="text" placeholder="Enter validationCode..."/></p>
				<p><input id="UserEmailEntityValidationDate" name="validationDate" className="input_field fields" type="text" placeholder="Enter validationDate..."/></p>
				<div className="button"><button className="create_button" type="submit">Create</button></div>
				</form>
			</div>
		) ;
	}
	executeCreate (event)
	{
		event.preventDefault() ;
		const form = new FormData() ;
		form.append('sessionToken',getSessionToken()) ;
		form.append('email',document.getElementById("UserEmailEntityEmail").value) ;
		form.append('validationCode',document.getElementById("UserEmailEntityValidationCode").value) ;
		form.append('validationDate',document.getElementById("UserEmailEntityValidationDate").value) ;
		Axios.post(getPrefix()+"/app/useremail/create",form).then(response=>{this.zoomin(response.data.userEmailEntityId)}) ;
	}
	renderDelete ()
	{
		return(
			<div className="delete_popup">
				<div>Are you sure you want to delete this UserEmail?</div>
				<div className="buttons">
					<button className="no_button" onClick={()=>{this.zoomout()}}>NO</button>
					<button className="yes_button" onClick={()=>{this.executeDelete()}}>YES</button>
				</div>
			</div>
		) ;
	}
	executeDelete (event)
	{
		Axios.get(getPrefix()+"/app/useremail/delete?sessionToken="+getSessionToken()+"&userEmailEntityId="+this.state.userEmailEntity.userEmailEntityId,null)
			.then(response=>{this.zoomout();}) ;
	}
	renderSearch ()
	{
	}
	executeSearch (event)
	{
		Axios.get(getPrefix()+"/app/useremail/search?sessionToken="+getSessionToken(),null) ;
	}
	renderValidate ()
	{
	}
	executeValidate (event)
	{
		Axios.get(getPrefix()+"/app/useremail/validate?sessionToken="+getSessionToken(),null) ;
	}
	renderResend ()
	{
	}
	executeResend (event)
	{
		Axios.get(getPrefix()+"/app/useremail/resend?sessionToken="+getSessionToken(),null) ;
	}
	renderPrimary ()
	{
	}
	executePrimary (event)
	{
		Axios.get(getPrefix()+"/app/useremail/primary?sessionToken="+getSessionToken(),null) ;
	}
}

class SearchComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
	}
	componentDidMount () {this.zoomout() ;}
	menu ()
	{
			return (
				<div className="menu">
					<div>
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
}

class SessionComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
	}
	componentDidMount () {this.zoomout() ;}
	menu ()
	{
			return (
				<div className="menu">
					<div>
						{<button className="menu-action" onClick={()=>{this.zoomout("ListUserEmail")}}>ListUserEmail</button>}
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="Update")
			return this.renderUpdate() ;
		else if (this.state.command==="UpdateShortDescription")
			return this.renderUpdateShortDescription() ;
		else if (this.state.command==="UpdateLongDescription")
			return this.renderUpdateLongDescription() ;
		else if (this.state.command==="UpdateImage")
			return this.renderUpdateImage() ;
		else if (this.state.command==="UploadImage")
			return this.renderUploadImage() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderuser ()
	{
	}
	executeuser (event)
	{
		Axios.get(getPrefix()+"/app/session/user?sessionToken="+getSessionToken(),null) ;
	}
	renderConfirm ()
	{
	}
	executeConfirm (event)
	{
		Axios.get(getPrefix()+"/app/session/confirm?sessionToken="+getSessionToken(),null) ;
	}
	renderSignin ()
	{
	}
	executeSignin (event)
	{
		Axios.get(getPrefix()+"/app/session/signin?sessionToken="+getSessionToken(),null) ;
	}
	renderSignout ()
	{
	}
	executeSignout (event)
	{
		Axios.get(getPrefix()+"/app/session/signout?sessionToken="+getSessionToken(),null) ;
	}
	renderUpdatePassword ()
	{
	}
	executeUpdatePassword (event)
	{
		Axios.get(getPrefix()+"/app/session/updatepassword?sessionToken="+getSessionToken(),null) ;
	}
	renderJoin ()
	{
	}
	executeJoin (event)
	{
		Axios.get(getPrefix()+"/app/session/join?sessionToken="+getSessionToken(),null) ;
	}
	renderQuit ()
	{
	}
	executeQuit (event)
	{
		Axios.get(getPrefix()+"/app/session/quit?sessionToken="+getSessionToken(),null) ;
	}
	renderUnquit ()
	{
	}
	executeUnquit (event)
	{
		Axios.get(getPrefix()+"/app/session/unquit?sessionToken="+getSessionToken(),null) ;
	}
	renderUpdate ()
	{
	}
	executeUpdate (event)
	{
	}
	renderUpdate ()
	{
	}
	executeUpdate (event)
	{
	}
	renderUpdate ()
	{
	}
	executeUpdate (event)
	{
	}
	renderUpdate ()
	{
	}
	executeUpdate (event)
	{
	}
	renderUpload ()
	{
	}
	executeUpload (event)
	{
	}
	renderViewUserEmail ()
	{
	}
	executeViewUserEmail (event)
	{
		Axios.get(getPrefix()+"/app/session/viewuseremail?sessionToken="+getSessionToken(),null) ;
	}
	renderCreateUserEmail ()
	{
	}
	executeCreateUserEmail (event)
	{
		Axios.get(getPrefix()+"/app/session/createuseremail?sessionToken="+getSessionToken(),null) ;
	}
	renderDeleteUserEmail ()
	{
	}
	executeDeleteUserEmail (event)
	{
		Axios.get(getPrefix()+"/app/session/deleteuseremail?sessionToken="+getSessionToken(),null) ;
	}
	renderValidateUserEmail ()
	{
	}
	executeValidateUserEmail (event)
	{
		Axios.get(getPrefix()+"/app/session/validateuseremail?sessionToken="+getSessionToken(),null) ;
	}
	renderResendUserEmail ()
	{
	}
	executeResendUserEmail (event)
	{
		Axios.get(getPrefix()+"/app/session/resenduseremail?sessionToken="+getSessionToken(),null) ;
	}
	renderPrimaryUserEmail ()
	{
	}
	executePrimaryUserEmail (event)
	{
		Axios.get(getPrefix()+"/app/session/primaryuseremail?sessionToken="+getSessionToken(),null) ;
	}
}

class AdminComponent
	extends BandungComponent
{
	constructor (props)
	{
		super(props) ;
	}
	componentDidMount () {this.zoomout() ;}
	menu ()
	{
			return (
				<div className="menu">
					<div>
					</div>
					<div><button className="menu-action" onClick={()=>{this.command("Signin")}}>Signin</button><button className="menu-action" onClick={()=>{this.signout()}}>Signout</button></div>
				</div>
			) ;
	}
	render ()
	{
		if (!this.state.command)
			return this.renderList() ;
		else if (this.state.command==="List")
			return this.renderList() ;
		else if (this.state.command==="Signin"&&!getSessionToken())
			return this.renderSignin() ;
		else
			return this.renderList() ;
	}
	renderTerms ()
	{
	}
	executeTerms (event)
	{
		Axios.get(getPrefix()+"/app/admin/terms?sessionToken="+getSessionToken(),null) ;
	}
	renderPrivacy ()
	{
	}
	executePrivacy (event)
	{
		Axios.get(getPrefix()+"/app/admin/privacy?sessionToken="+getSessionToken(),null) ;
	}
	renderReindex ()
	{
	}
	executeReindex (event)
	{
		Axios.get(getPrefix()+"/app/admin/reindex?sessionToken="+getSessionToken(),null) ;
	}
	renderRecompute ()
	{
	}
	executeRecompute (event)
	{
		Axios.get(getPrefix()+"/app/admin/recompute?sessionToken="+getSessionToken(),null) ;
	}
}

export {AnnouncementEntityComponent,CategoryEntityComponent,CategoryUserEntityComponent,ContactEntityComponent,CompanyEntityComponent,CompanyUserEntityComponent,FontEntityComponent,ImageEntityComponent,MainEntityComponent,PageEntityComponent,QuizEntityComponent,QuizUserEntityComponent,ScriptEntityComponent,StyleEntityComponent,UserEntityComponent,UserEmailEntityComponent,SearchComponent,SessionComponent,AdminComponent,} ;
